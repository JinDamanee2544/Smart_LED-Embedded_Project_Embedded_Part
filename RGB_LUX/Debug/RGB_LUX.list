
RGB_LUX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008268  08008268  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008270  08008270  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000477c  2000007c  080082f4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047f8  080082f4  000247f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162d3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3f  00000000  00000000  0003637f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000391c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  0003a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017267  00000000  00000000  0003b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128ae  00000000  00000000  00052327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091002  00000000  00000000  00064bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5bd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  000f5c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080d4 	.word	0x080080d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080080d4 	.word	0x080080d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000098 	.word	0x20000098
 80005b8:	200000ec 	.word	0x200000ec

080005bc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetTimerTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005da:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	200002ec 	.word	0x200002ec
 80005ec:	20000340 	.word	0x20000340

080005f0 <map>:
char colorBuffer[100];
char luxBuffer[10];
char luxString[4];
//char printBuffer[50];

int map(int x,int in_min,int in_max,int out_min,int out_max){
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
	int calibrate = (x-in_min)*(out_max-out_min) / (in_max - in_min) + out_min;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	6a39      	ldr	r1, [r7, #32]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	1a8a      	subs	r2, r1, r2
 800060a:	fb02 f203 	mul.w	r2, r2, r3
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1acb      	subs	r3, r1, r3
 8000614:	fb92 f3f3 	sdiv	r3, r2, r3
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	617b      	str	r3, [r7, #20]
	if(calibrate>255) return 255;
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	2bff      	cmp	r3, #255	; 0xff
 8000622:	dd01      	ble.n	8000628 <map+0x38>
 8000624:	23ff      	movs	r3, #255	; 0xff
 8000626:	e005      	b.n	8000634 <map+0x44>
	if(calibrate<0) return 0;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2b00      	cmp	r3, #0
 800062c:	da01      	bge.n	8000632 <map+0x42>
 800062e:	2300      	movs	r3, #0
 8000630:	e000      	b.n	8000634 <map+0x44>
	return calibrate;
 8000632:	697b      	ldr	r3, [r7, #20]

}
 8000634:	4618      	mov	r0, r3
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <printMutexUART>:

void printMutexUART(char *buffer) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	// UART MUTEX
	osMutexWait(UartMutexHandle, osWaitForever);
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <printMutexUART+0x40>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f04f 31ff 	mov.w	r1, #4294967295
 8000650:	4618      	mov	r0, r3
 8000652:	f003 ff81 	bl	8004558 <osMutexWait>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff fdc2 	bl	80001e0 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <printMutexUART+0x44>)
 8000668:	f003 fb8b 	bl	8003d82 <HAL_UART_Transmit>
	osMutexRelease(UartMutexHandle);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <printMutexUART+0x40>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f003 ffbf 	bl	80045f4 <osMutexRelease>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20004678 	.word	0x20004678
 8000684:	20004728 	.word	0x20004728

08000688 <settingNextFilter>:
void settingNextFilter(int counter, uint8_t state) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	//                s2 s3
	// RED FILTER   -> 0 0
	// BLUE FILTER 	-> 0 1
	// GREEN FILTER	-> 1 1

	if (state == 1) {	// RED
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10c      	bne.n	80006b4 <settingNextFilter+0x2c>
		//sprintf(printBuffer,"RED\t: %d\r\n",counter);
		//printMutexUART(printBuffer);

		//Setting next Filter : BLUE
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	4816      	ldr	r0, [pc, #88]	; (80006fc <settingNextFilter+0x74>)
 80006a2:	f001 fa2d 	bl	8001b00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <settingNextFilter+0x74>)
 80006ae:	f001 fa27 	bl	8001b00 <HAL_GPIO_WritePin>

		//Setting next Filter : RED
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
	}
}
 80006b2:	e01e      	b.n	80006f2 <settingNextFilter+0x6a>
	} else if (state == 2) {	// BLUE
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d10c      	bne.n	80006d4 <settingNextFilter+0x4c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <settingNextFilter+0x74>)
 80006c2:	f001 fa1d 	bl	8001b00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <settingNextFilter+0x74>)
 80006ce:	f001 fa17 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80006d2:	e00e      	b.n	80006f2 <settingNextFilter+0x6a>
	} else if (state == 3) { // GREEN
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d10b      	bne.n	80006f2 <settingNextFilter+0x6a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <settingNextFilter+0x74>)
 80006e2:	f001 fa0d 	bl	8001b00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <settingNextFilter+0x74>)
 80006ee:	f001 fa07 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020800 	.word	0x40020800

08000700 <sendDataToNodeMCU>:
		calibrate = counter * 255 / MAX_GREEN;
	}
	return calibrate;
}
*/
void sendDataToNodeMCU() {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af02      	add	r7, sp, #8
	// Send lastest Data to node MCU

	// LED PIN CHECK
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000706:	2120      	movs	r1, #32
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <sendDataToNodeMCU+0x70>)
 800070a:	f001 fa12 	bl	8001b32 <HAL_GPIO_TogglePin>

	// SENDER TERMINAL
	sprintf(colorBuffer, "R : %d G: %d B :%d\r\n", globalColor[0],
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <sendDataToNodeMCU+0x74>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <sendDataToNodeMCU+0x74>)
 8000714:	6859      	ldr	r1, [r3, #4]
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <sendDataToNodeMCU+0x74>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	460b      	mov	r3, r1
 800071e:	4916      	ldr	r1, [pc, #88]	; (8000778 <sendDataToNodeMCU+0x78>)
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <sendDataToNodeMCU+0x7c>)
 8000722:	f007 f875 	bl	8007810 <siprintf>
			globalColor[1], globalColor[2]);
	printMutexUART(colorBuffer);
 8000726:	4815      	ldr	r0, [pc, #84]	; (800077c <sendDataToNodeMCU+0x7c>)
 8000728:	f7ff ff8a 	bl	8000640 <printMutexUART>
	sprintf(luxBuffer, "LUX : %d\r\n", globalLux[0]);
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <sendDataToNodeMCU+0x80>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4914      	ldr	r1, [pc, #80]	; (8000784 <sendDataToNodeMCU+0x84>)
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <sendDataToNodeMCU+0x88>)
 8000736:	f007 f86b 	bl	8007810 <siprintf>
	printMutexUART(luxBuffer);
 800073a:	4813      	ldr	r0, [pc, #76]	; (8000788 <sendDataToNodeMCU+0x88>)
 800073c:	f7ff ff80 	bl	8000640 <printMutexUART>

	// FORMAT LUX FROM INT TO STRING
	itoa(globalLux[0], luxString, 10);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <sendDataToNodeMCU+0x80>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	220a      	movs	r2, #10
 8000746:	4911      	ldr	r1, [pc, #68]	; (800078c <sendDataToNodeMCU+0x8c>)
 8000748:	4618      	mov	r0, r3
 800074a:	f007 f849 	bl	80077e0 <itoa>

	// SEND TO NODE MCU in String Format
	HAL_UART_Transmit(&huart1, globalColor, 3 * sizeof(int), 1000);
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	220c      	movs	r2, #12
 8000754:	4907      	ldr	r1, [pc, #28]	; (8000774 <sendDataToNodeMCU+0x74>)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <sendDataToNodeMCU+0x90>)
 8000758:	f003 fb13 	bl	8003d82 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, luxString, sizeof(luxString), 1000);
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	2204      	movs	r2, #4
 8000762:	490a      	ldr	r1, [pc, #40]	; (800078c <sendDataToNodeMCU+0x8c>)
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <sendDataToNodeMCU+0x94>)
 8000766:	f003 fb0c 	bl	8003d82 <HAL_UART_Transmit>
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40020000 	.word	0x40020000
 8000774:	20004798 	.word	0x20004798
 8000778:	080080fc 	.word	0x080080fc
 800077c:	20004614 	.word	0x20004614
 8000780:	200045b8 	.word	0x200045b8
 8000784:	08008114 	.word	0x08008114
 8000788:	200046c8 	.word	0x200046c8
 800078c:	200046dc 	.word	0x200046dc
 8000790:	20004684 	.word	0x20004684
 8000794:	200046e0 	.word	0x200046e0

08000798 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {	// WAVE CHANGEs
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {						// PUSH BUTTON REQEUST
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a8:	d10b      	bne.n	80007c2 <HAL_GPIO_EXTI_Callback+0x2a>
		sendDataToNodeMCU();
 80007aa:	f7ff ffa9 	bl	8000700 <sendDataToNodeMCU>
		//HAL_Delay(100);
		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80007ae:	bf00      	nop
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007b6:	f001 f98b 	bl	8001ad0 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f7      	bne.n	80007b0 <HAL_GPIO_EXTI_Callback+0x18>
 80007c0:	e007      	b.n	80007d2 <HAL_GPIO_EXTI_Callback+0x3a>
			;
	} else if (GPIO_Pin == GPIO_PIN_3) {		// COUNT FREQ OF LIGHT BY TIMER
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d104      	bne.n	80007d2 <HAL_GPIO_EXTI_Callback+0x3a>
		counter++; // count freq of color
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80007d0:	6013      	str	r3, [r2, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	6153      	str	r3, [r2, #20]
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020800 	.word	0x40020800
 80007e4:	20000744 	.word	0x20000744
 80007e8:	40013c00 	.word	0x40013c00

080007ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b096      	sub	sp, #88	; 0x58
 80007f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f2:	f000 fe65 	bl	80014c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007f6:	f000 f899 	bl	800092c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007fa:	f000 f9ad 	bl	8000b58 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80007fe:	f000 f957 	bl	8000ab0 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000802:	f000 f92b 	bl	8000a5c <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000806:	f000 f8fb 	bl	8000a00 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 800080a:	f000 f97b 	bl	8000b04 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	// SET UP SCALING PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1); // -> 1 0 means that 50% scaling
 800080e:	2201      	movs	r2, #1
 8000810:	2120      	movs	r1, #32
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <main+0x110>)
 8000814:	f001 f974 	bl	8001b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4837      	ldr	r0, [pc, #220]	; (80008fc <main+0x110>)
 800081e:	f001 f96f 	bl	8001b00 <HAL_GPIO_WritePin>
	// TURN ON LIGHT ON RGB
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1); // B2-LED
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4836      	ldr	r0, [pc, #216]	; (8000900 <main+0x114>)
 8000828:	f001 f96a 	bl	8001b00 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UartMutex */
	osMutexDef(UartMutex);
 800082c:	2300      	movs	r3, #0
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
 8000830:	2300      	movs	r3, #0
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
	UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000834:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fe75 	bl	8004528 <osMutexCreate>
 800083e:	4603      	mov	r3, r0
 8000840:	4a30      	ldr	r2, [pc, #192]	; (8000904 <main+0x118>)
 8000842:	6013      	str	r3, [r2, #0]

	/* definition and creation of ESPUARTMutex */
	osMutexDef(ESPUARTMutex);
 8000844:	2300      	movs	r3, #0
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
	ESPUARTMutexHandle = osMutexCreate(osMutex(ESPUARTMutex));
 800084c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fe69 	bl	8004528 <osMutexCreate>
 8000856:	4603      	mov	r3, r0
 8000858:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <main+0x11c>)
 800085a:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of measureTimer */
	osTimerDef(measureTimer, rgbCount);
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <main+0x120>)
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
 8000860:	2300      	movs	r3, #0
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
	measureTimerHandle = osTimerCreate(osTimer(measureTimer), osTimerPeriodic,
 8000864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000868:	2200      	movs	r2, #0
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fde3 	bl	8004438 <osTimerCreate>
 8000872:	4603      	mov	r3, r0
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <main+0x124>)
 8000876:	6013      	str	r3, [r2, #0]
	NULL);

	/* definition and creation of autoUpdate */
	osTimerDef(autoUpdate, update);
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <main+0x128>)
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
	autoUpdateHandle = osTimerCreate(osTimer(autoUpdate), osTimerPeriodic,
 8000880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f003 fdd5 	bl	8004438 <osTimerCreate>
 800088e:	4603      	mov	r3, r0
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <main+0x12c>)
 8000892:	6013      	str	r3, [r2, #0]
	NULL);

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osTimerStart(measureTimerHandle, 10);
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <main+0x124>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	210a      	movs	r1, #10
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fe00 	bl	80044a0 <osTimerStart>
	osTimerStart(autoUpdateHandle, 10000);
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <main+0x12c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fdf9 	bl	80044a0 <osTimerStart>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <main+0x130>)
 80008b0:	f107 041c 	add.w	r4, r7, #28
 80008b4:	461d      	mov	r5, r3
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fd54 	bl	8004376 <osThreadCreate>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a13      	ldr	r2, [pc, #76]	; (8000920 <main+0x134>)
 80008d2:	6013      	str	r3, [r2, #0]

	/* definition and creation of LUX */
	osThreadDef(LUX, luxFunc, osPriorityIdle, 0, 128);
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0x138>)
 80008d6:	463c      	mov	r4, r7
 80008d8:	461d      	mov	r5, r3
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LUXHandle = osThreadCreate(osThread(LUX), NULL);
 80008e6:	463b      	mov	r3, r7
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fd43 	bl	8004376 <osThreadCreate>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <main+0x13c>)
 80008f4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80008f6:	f003 fd37 	bl	8004368 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80008fa:	e7fe      	b.n	80008fa <main+0x10e>
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020400 	.word	0x40020400
 8000904:	20004678 	.word	0x20004678
 8000908:	2000478c 	.word	0x2000478c
 800090c:	08000f91 	.word	0x08000f91
 8000910:	20004610 	.word	0x20004610
 8000914:	080010b1 	.word	0x080010b1
 8000918:	200046d8 	.word	0x200046d8
 800091c:	08008120 	.word	0x08008120
 8000920:	200045b4 	.word	0x200045b4
 8000924:	0800813c 	.word	0x0800813c
 8000928:	200046d4 	.word	0x200046d4

0800092c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 ff60 	bl	8007800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <SystemClock_Config+0xcc>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <SystemClock_Config+0xd0>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800099c:	2310      	movs	r3, #16
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fd24 	bl	8003400 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x96>
		Error_Handler();
 80009be:	f000 fb8f 	bl	80010e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 ff86 	bl	80038f0 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc2>
		Error_Handler();
 80009ea:	f000 fb79 	bl	80010e0 <Error_Handler>
	}
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <MX_I2C1_Init+0x58>)
 8000a08:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 25000;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a0c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000a10:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a24:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a40:	f001 f8aa 	bl	8001b98 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x4e>
		Error_Handler();
 8000a4a:	f000 fb49 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200045bc 	.word	0x200045bc
 8000a58:	40005400 	.word	0x40005400

08000a5c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART1_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f003 f928 	bl	8003ce8 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a9e:	f000 fb1f 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20004684 	.word	0x20004684
 8000aac:	40011000 	.word	0x40011000

08000ab0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART2_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f003 f8fe 	bl	8003ce8 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000af2:	f000 faf5 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20004728 	.word	0x20004728
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART6_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART6_UART_Init+0x4c>)
 8000b3c:	f003 f8d4 	bl	8003ce8 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8000b46:	f000 facb 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200046e0 	.word	0x200046e0
 8000b54:	40011400 	.word	0x40011400

08000b58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a4f      	ldr	r2, [pc, #316]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b4d      	ldr	r3, [pc, #308]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a48      	ldr	r2, [pc, #288]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a41      	ldr	r2, [pc, #260]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <MX_GPIO_Init+0x15c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0x160>)
 8000be4:	f000 ff8c 	bl	8001b00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, S0_Pin | S1_Pin | S2_Pin | S3_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000bee:	4833      	ldr	r0, [pc, #204]	; (8000cbc <MX_GPIO_Init+0x164>)
 8000bf0:	f000 ff86 	bl	8001b00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <MX_GPIO_Init+0x168>)
 8000bfa:	f000 ff81 	bl	8001b00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4829      	ldr	r0, [pc, #164]	; (8000cbc <MX_GPIO_Init+0x164>)
 8000c16:	f000 fdd7 	bl	80017c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RGB_WAVE_Pin */
	GPIO_InitStruct.Pin = RGB_WAVE_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RGB_WAVE_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <MX_GPIO_Init+0x164>)
 8000c30:	f000 fdca 	bl	80017c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c34:	2320      	movs	r3, #32
 8000c36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <MX_GPIO_Init+0x160>)
 8000c4c:	f000 fdbc 	bl	80017c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
	GPIO_InitStruct.Pin = S0_Pin | S1_Pin | S2_Pin | S3_Pin;
 8000c50:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000c54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <MX_GPIO_Init+0x164>)
 8000c6a:	f000 fdad 	bl	80017c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <MX_GPIO_Init+0x168>)
 8000c86:	f000 fd9f 	bl	80017c8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2009      	movs	r0, #9
 8000c90:	f000 fd63 	bl	800175a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c94:	2009      	movs	r0, #9
 8000c96:	f000 fd7c 	bl	8001792 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	2028      	movs	r0, #40	; 0x28
 8000ca0:	f000 fd5b 	bl	800175a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ca4:	2028      	movs	r0, #40	; 0x28
 8000ca6:	f000 fd74 	bl	8001792 <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	while (1) {
		osDelay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f003 fb9e 	bl	800440e <osDelay>
 8000cd2:	e7fb      	b.n	8000ccc <StartDefaultTask+0x8>

08000cd4 <luxFunc>:
 * @brief Function implementing the LUX thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_luxFunc */
void luxFunc(void const *argument) {
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b090      	sub	sp, #64	; 0x40
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN luxFunc */
	/* Infinite loop */

	for (;;) {
		ret = HAL_I2C_Mem_Write(&hi2c1, 0x39 << 1, 0xA0, I2C_MEMADD_SIZE_8BIT,
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	4b9b      	ldr	r3, [pc, #620]	; (8000f54 <luxFunc+0x280>)
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	22a0      	movs	r2, #160	; 0xa0
 8000cec:	2172      	movs	r1, #114	; 0x72
 8000cee:	489a      	ldr	r0, [pc, #616]	; (8000f58 <luxFunc+0x284>)
 8000cf0:	f001 fbba 	bl	8002468 <HAL_I2C_Mem_Write>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <luxFunc+0x288>)
 8000cfa:	701a      	strb	r2, [r3, #0]
				config, 1, 100);
		if (ret != HAL_OK) {
 8000cfc:	4b97      	ldr	r3, [pc, #604]	; (8000f5c <luxFunc+0x288>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d012      	beq.n	8000d2a <luxFunc+0x56>
			strcpy((char*) uart, "Error Write mem 0x0 by 0x03\r\n");
 8000d04:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <luxFunc+0x28c>)
 8000d06:	4b97      	ldr	r3, [pc, #604]	; (8000f64 <luxFunc+0x290>)
 8000d08:	4615      	mov	r5, r2
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0e:	6028      	str	r0, [r5, #0]
 8000d10:	6069      	str	r1, [r5, #4]
 8000d12:	60aa      	str	r2, [r5, #8]
 8000d14:	60eb      	str	r3, [r5, #12]
 8000d16:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000d18:	6128      	str	r0, [r5, #16]
 8000d1a:	6169      	str	r1, [r5, #20]
 8000d1c:	61aa      	str	r2, [r5, #24]
 8000d1e:	8823      	ldrh	r3, [r4, #0]
 8000d20:	83ab      	strh	r3, [r5, #28]
			printMutexUART(uart);
 8000d22:	488f      	ldr	r0, [pc, #572]	; (8000f60 <luxFunc+0x28c>)
 8000d24:	f7ff fc8c 	bl	8000640 <printMutexUART>
 8000d28:	e10e      	b.n	8000f48 <luxFunc+0x274>
		} else {
			HAL_I2C_Master_Transmit(&hi2c1, 0x39 << 1, addr, 1, 100);
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	4a8d      	ldr	r2, [pc, #564]	; (8000f68 <luxFunc+0x294>)
 8000d32:	2172      	movs	r1, #114	; 0x72
 8000d34:	4888      	ldr	r0, [pc, #544]	; (8000f58 <luxFunc+0x284>)
 8000d36:	f001 f873 	bl	8001e20 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1, 0x39 << 1, S, 2, 100);
 8000d3a:	2364      	movs	r3, #100	; 0x64
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	4a8a      	ldr	r2, [pc, #552]	; (8000f6c <luxFunc+0x298>)
 8000d42:	2172      	movs	r1, #114	; 0x72
 8000d44:	4884      	ldr	r0, [pc, #528]	; (8000f58 <luxFunc+0x284>)
 8000d46:	f001 f969 	bl	800201c <HAL_I2C_Master_Receive>
			//			ret = HAL_I2C_Mem_Read(&hi2c1, 0x39 << 1 , 0x00, 1, R00, 1, 100);
			if (ret != HAL_OK) {
 8000d4a:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <luxFunc+0x288>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00e      	beq.n	8000d70 <luxFunc+0x9c>
				strcpy((char*) uart, "Error Read mem 0x0 ");
 8000d52:	4a83      	ldr	r2, [pc, #524]	; (8000f60 <luxFunc+0x28c>)
 8000d54:	4b86      	ldr	r3, [pc, #536]	; (8000f70 <luxFunc+0x29c>)
 8000d56:	4615      	mov	r5, r2
 8000d58:	461c      	mov	r4, r3
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	6028      	str	r0, [r5, #0]
 8000d5e:	6069      	str	r1, [r5, #4]
 8000d60:	60aa      	str	r2, [r5, #8]
 8000d62:	60eb      	str	r3, [r5, #12]
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	6128      	str	r0, [r5, #16]
				printMutexUART(uart);
 8000d68:	487d      	ldr	r0, [pc, #500]	; (8000f60 <luxFunc+0x28c>)
 8000d6a:	f7ff fc69 	bl	8000640 <printMutexUART>
 8000d6e:	e0eb      	b.n	8000f48 <luxFunc+0x274>
			} else {
				osDelay(100);
 8000d70:	2064      	movs	r0, #100	; 0x64
 8000d72:	f003 fb4c 	bl	800440e <osDelay>
				ret = HAL_I2C_Mem_Read(&hi2c1, 0x39 << 1, 0x8C, 1, R0C, 1, 100);
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	4b7d      	ldr	r3, [pc, #500]	; (8000f74 <luxFunc+0x2a0>)
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2301      	movs	r3, #1
 8000d84:	228c      	movs	r2, #140	; 0x8c
 8000d86:	2172      	movs	r1, #114	; 0x72
 8000d88:	4873      	ldr	r0, [pc, #460]	; (8000f58 <luxFunc+0x284>)
 8000d8a:	f001 fc67 	bl	800265c <HAL_I2C_Mem_Read>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <luxFunc+0x288>)
 8000d94:	701a      	strb	r2, [r3, #0]
				ret = HAL_I2C_Mem_Read(&hi2c1, 0x39 << 1, 0x8D, 1, R0D, 1, 100);
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	4b76      	ldr	r3, [pc, #472]	; (8000f78 <luxFunc+0x2a4>)
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	228d      	movs	r2, #141	; 0x8d
 8000da6:	2172      	movs	r1, #114	; 0x72
 8000da8:	486b      	ldr	r0, [pc, #428]	; (8000f58 <luxFunc+0x284>)
 8000daa:	f001 fc57 	bl	800265c <HAL_I2C_Mem_Read>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <luxFunc+0x288>)
 8000db4:	701a      	strb	r2, [r3, #0]
				ret = HAL_I2C_Mem_Read(&hi2c1, 0x39 << 1, 0x8E, 1, R0E, 1, 100);
 8000db6:	2364      	movs	r3, #100	; 0x64
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <luxFunc+0x2a8>)
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	228e      	movs	r2, #142	; 0x8e
 8000dc6:	2172      	movs	r1, #114	; 0x72
 8000dc8:	4863      	ldr	r0, [pc, #396]	; (8000f58 <luxFunc+0x284>)
 8000dca:	f001 fc47 	bl	800265c <HAL_I2C_Mem_Read>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <luxFunc+0x288>)
 8000dd4:	701a      	strb	r2, [r3, #0]
				ret = HAL_I2C_Mem_Read(&hi2c1, 0x39 << 1, 0x8F, 1, R0F, 1, 100);
 8000dd6:	2364      	movs	r3, #100	; 0x64
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <luxFunc+0x2ac>)
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	228f      	movs	r2, #143	; 0x8f
 8000de6:	2172      	movs	r1, #114	; 0x72
 8000de8:	485b      	ldr	r0, [pc, #364]	; (8000f58 <luxFunc+0x284>)
 8000dea:	f001 fc37 	bl	800265c <HAL_I2C_Mem_Read>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <luxFunc+0x288>)
 8000df4:	701a      	strb	r2, [r3, #0]
				uint16_t data0;
				data0 = (uint16_t) R0C[0];
 8000df6:	4b5f      	ldr	r3, [pc, #380]	; (8000f74 <luxFunc+0x2a0>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	847b      	strh	r3, [r7, #34]	; 0x22
				data0 |= (uint16_t) (R0D[0] << 8);
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	; (8000f78 <luxFunc+0x2a4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	847b      	strh	r3, [r7, #34]	; 0x22
				uint16_t data1;
				data1 = (uint16_t) R0E[0];
 8000e0c:	4b5b      	ldr	r3, [pc, #364]	; (8000f7c <luxFunc+0x2a8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	843b      	strh	r3, [r7, #32]
				data1 |= (uint16_t) (R0F[0] << 8);
 8000e12:	4b5b      	ldr	r3, [pc, #364]	; (8000f80 <luxFunc+0x2ac>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	8c3b      	ldrh	r3, [r7, #32]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	843b      	strh	r3, [r7, #32]

				long ch0 = data0;
 8000e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e24:	61fb      	str	r3, [r7, #28]
				long ch1 = data1;
 8000e26:	8c3b      	ldrh	r3, [r7, #32]
 8000e28:	61bb      	str	r3, [r7, #24]
				unsigned long ratio1 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

				// calculate ratio and scale to 512 (2^9)
				if (ch0 != 0) {
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <luxFunc+0x16c>
					ratio1 = (ch1 << (RATIO_SCALE + 1)) / ch0;
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	029a      	lsls	r2, r3, #10
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
				}

				// round ratio value
				unsigned long ratio = (ratio1 + 1) >> 1;
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	3301      	adds	r3, #1
 8000e44:	085b      	lsrs	r3, r3, #1
 8000e46:	617b      	str	r3, [r7, #20]

				// transform to LUX (p. 23)
				// FN package
				unsigned int b, m;

				if (ratio >= 0 && ratio <= K1T) {
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b40      	cmp	r3, #64	; 0x40
 8000e4c:	d806      	bhi.n	8000e5c <luxFunc+0x188>
					b = B1T;
 8000e4e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M1T;
 8000e54:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5a:	e045      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K2T) {
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b80      	cmp	r3, #128	; 0x80
 8000e60:	d806      	bhi.n	8000e70 <luxFunc+0x19c>
					b = B2T;
 8000e62:	f44f 7305 	mov.w	r3, #532	; 0x214
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M2T;
 8000e68:	f240 23d1 	movw	r3, #721	; 0x2d1
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	e03b      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K3T) {
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2bc0      	cmp	r3, #192	; 0xc0
 8000e74:	d806      	bhi.n	8000e84 <luxFunc+0x1b0>
					b = B3T;
 8000e76:	f240 233f 	movw	r3, #575	; 0x23f
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M3T;
 8000e7c:	f240 337b 	movw	r3, #891	; 0x37b
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	e031      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K4T) {
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e8a:	d806      	bhi.n	8000e9a <luxFunc+0x1c6>
					b = B4T;
 8000e8c:	f44f 731c 	mov.w	r3, #624	; 0x270
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M4T;
 8000e92:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
 8000e98:	e026      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K5T) {
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000ea0:	d806      	bhi.n	8000eb0 <luxFunc+0x1dc>
					b = B5T;
 8000ea2:	f240 136f 	movw	r3, #367	; 0x16f
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M5T;
 8000ea8:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
 8000eae:	e01b      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K6T) {
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8000eb6:	d804      	bhi.n	8000ec2 <luxFunc+0x1ee>
					b = B6T;
 8000eb8:	23d2      	movs	r3, #210	; 0xd2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M6T;
 8000ebc:	23fb      	movs	r3, #251	; 0xfb
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec0:	e012      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K7T) {
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f240 229a 	movw	r2, #666	; 0x29a
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d804      	bhi.n	8000ed6 <luxFunc+0x202>
					b = B7T;
 8000ecc:	2318      	movs	r3, #24
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M7T;
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed4:	e008      	b.n	8000ee8 <luxFunc+0x214>
				} else if (ratio <= K8T) {
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f240 229a 	movw	r2, #666	; 0x29a
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d803      	bhi.n	8000ee8 <luxFunc+0x214>
					b = B8T;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
					m = M8T;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
				}

				unsigned long temp = (ch0 * b) - (ch1 * m);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eec:	fb02 f203 	mul.w	r2, r2, r3
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ef4:	fb01 f303 	mul.w	r3, r1, r3
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	613b      	str	r3, [r7, #16]
				if (temp < 0) {
					temp = 0;
				}

				// round the LSB (2^LUX-SCALE-1)
				temp += (1 << LUX_SCALE - 1);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f02:	613b      	str	r3, [r7, #16]

				// cut the rest
				unsigned long lux = temp >> LUX_SCALE;
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	0b9b      	lsrs	r3, r3, #14
 8000f08:	60fb      	str	r3, [r7, #12]
				globalLux[0] = (int) lux;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <luxFunc+0x2b0>)
 8000f0e:	6013      	str	r3, [r2, #0]
				//makeLuxArr(lux);

				if (ret != HAL_OK) {
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <luxFunc+0x288>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00e      	beq.n	8000f36 <luxFunc+0x262>
					strcpy((char*) uart, "Error read mem 0x0C");
 8000f18:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <luxFunc+0x28c>)
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <luxFunc+0x2b4>)
 8000f1c:	4615      	mov	r5, r2
 8000f1e:	461c      	mov	r4, r3
 8000f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f22:	6028      	str	r0, [r5, #0]
 8000f24:	6069      	str	r1, [r5, #4]
 8000f26:	60aa      	str	r2, [r5, #8]
 8000f28:	60eb      	str	r3, [r5, #12]
 8000f2a:	6820      	ldr	r0, [r4, #0]
 8000f2c:	6128      	str	r0, [r5, #16]
					printMutexUART(uart);
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <luxFunc+0x28c>)
 8000f30:	f7ff fb86 	bl	8000640 <printMutexUART>
 8000f34:	e008      	b.n	8000f48 <luxFunc+0x274>
				} else {
					sprintf((char*) uart, "DATA0 %d DATA1 %d lux %d\r\n", data0,
 8000f36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000f38:	8c39      	ldrh	r1, [r7, #32]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4912      	ldr	r1, [pc, #72]	; (8000f8c <luxFunc+0x2b8>)
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <luxFunc+0x28c>)
 8000f44:	f006 fc64 	bl	8007810 <siprintf>
							data1, lux);
				}
			}
		}
		//printMutexUART(uart);
		osDelay(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f003 fa5f 	bl	800440e <osDelay>
		ret = HAL_I2C_Mem_Write(&hi2c1, 0x39 << 1, 0xA0, I2C_MEMADD_SIZE_8BIT,
 8000f50:	e6c4      	b.n	8000cdc <luxFunc+0x8>
 8000f52:	bf00      	nop
 8000f54:	20000004 	.word	0x20000004
 8000f58:	200045bc 	.word	0x200045bc
 8000f5c:	20004790 	.word	0x20004790
 8000f60:	2000476c 	.word	0x2000476c
 8000f64:	08008158 	.word	0x08008158
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20004680 	.word	0x20004680
 8000f70:	08008178 	.word	0x08008178
 8000f74:	20004794 	.word	0x20004794
 8000f78:	2000467c 	.word	0x2000467c
 8000f7c:	200045b0 	.word	0x200045b0
 8000f80:	20004724 	.word	0x20004724
 8000f84:	200045b8 	.word	0x200045b8
 8000f88:	0800818c 	.word	0x0800818c
 8000f8c:	080081a0 	.word	0x080081a0

08000f90 <rgbCount>:

	/* USER CODE END luxFunc */
}

/* measure function */
void rgbCount(void const *argument) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN measure */

	// Trigger every 10 ms to print out
	flag++;
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <rgbCount+0x108>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <rgbCount+0x108>)
 8000fa2:	701a      	strb	r2, [r3, #0]
	if (flag == 1) {				// RED
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <rgbCount+0x108>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d117      	bne.n	8000fdc <rgbCount+0x4c>
		//counter = calibrate(counter,1);
		counter = map(counter, MIN_RED, MAX_RED, 0, 255);
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <rgbCount+0x10c>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	23ff      	movs	r3, #255	; 0xff
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8000fba:	2136      	movs	r1, #54	; 0x36
 8000fbc:	f7ff fb18 	bl	80005f0 <map>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a36      	ldr	r2, [pc, #216]	; (800109c <rgbCount+0x10c>)
 8000fc4:	6013      	str	r3, [r2, #0]
		countR = counter;
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <rgbCount+0x10c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a35      	ldr	r2, [pc, #212]	; (80010a0 <rgbCount+0x110>)
 8000fcc:	6013      	str	r3, [r2, #0]
		/*
		if(counter<=255){
		} else {
			countR = 255;
		}*/
		settingNextFilter(counter, 1);
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <rgbCount+0x10c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb57 	bl	8000688 <settingNextFilter>
 8000fda:	e055      	b.n	8001088 <rgbCount+0xf8>
	} else if (flag == 2) {			// BLUE
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <rgbCount+0x108>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d117      	bne.n	8001014 <rgbCount+0x84>
		//counter = calibrate(counter,2);
		counter = map(counter, MIN_BLUE, MAX_BLUE, 0, 255);
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <rgbCount+0x10c>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	23ff      	movs	r3, #255	; 0xff
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000ff2:	213d      	movs	r1, #61	; 0x3d
 8000ff4:	f7ff fafc 	bl	80005f0 <map>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <rgbCount+0x10c>)
 8000ffc:	6013      	str	r3, [r2, #0]
		countB = counter;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <rgbCount+0x10c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <rgbCount+0x114>)
 8001004:	6013      	str	r3, [r2, #0]
		/*
		if(counter<=255){
		} else {
			countB = 255;
		}*/
		settingNextFilter(counter, 2);
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <rgbCount+0x10c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2102      	movs	r1, #2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fb3b 	bl	8000688 <settingNextFilter>
 8001012:	e039      	b.n	8001088 <rgbCount+0xf8>
	} else if (flag == 3) {			// GREEN
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <rgbCount+0x108>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d117      	bne.n	800104c <rgbCount+0xbc>
		//counter = calibrate(counter,3);
		counter = map(counter, MIN_GREEN, MAX_GREEN, 0, 255);
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <rgbCount+0x10c>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	23ff      	movs	r3, #255	; 0xff
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800102a:	212e      	movs	r1, #46	; 0x2e
 800102c:	f7ff fae0 	bl	80005f0 <map>
 8001030:	4603      	mov	r3, r0
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <rgbCount+0x10c>)
 8001034:	6013      	str	r3, [r2, #0]
		countG = counter;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <rgbCount+0x10c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <rgbCount+0x118>)
 800103c:	6013      	str	r3, [r2, #0]
		/*
		if(counter<=255){
		} else {
			countG = 255;
		}*/
		settingNextFilter(counter, 3);
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <rgbCount+0x10c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2103      	movs	r1, #3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fb1f 	bl	8000688 <settingNextFilter>
 800104a:	e01d      	b.n	8001088 <rgbCount+0xf8>
	} else if (flag == 4) {			// Update global and RESET
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <rgbCount+0x108>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b04      	cmp	r3, #4
 8001052:	d119      	bne.n	8001088 <rgbCount+0xf8>
		// PUT IN Global Buffer
		globalColor[0] = countR;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <rgbCount+0x110>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <rgbCount+0x11c>)
 800105a:	6013      	str	r3, [r2, #0]
		globalColor[1] = countG;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <rgbCount+0x118>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <rgbCount+0x11c>)
 8001062:	6053      	str	r3, [r2, #4]
		globalColor[2] = countB;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <rgbCount+0x114>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <rgbCount+0x11c>)
 800106a:	6093      	str	r3, [r2, #8]
		// RESET
		flag = 0;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <rgbCount+0x108>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		countR = countB = countG = 0;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <rgbCount+0x118>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <rgbCount+0x118>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <rgbCount+0x114>)
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <rgbCount+0x114>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <rgbCount+0x110>)
 8001086:	6013      	str	r3, [r2, #0]
	}
	counter = 0;					// RESET COUNTER after count any color
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <rgbCount+0x10c>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
	/* USER CODE END measure */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000740 	.word	0x20000740
 800109c:	20000744 	.word	0x20000744
 80010a0:	20000748 	.word	0x20000748
 80010a4:	20000750 	.word	0x20000750
 80010a8:	2000074c 	.word	0x2000074c
 80010ac:	20004798 	.word	0x20004798

080010b0 <update>:

/* update function */
void update(void const *argument) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN update */

	// Auto Update Every 10 Second
	printMutexUART("\n--UPDATE--\r\n");
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <update+0x28>)
 80010ba:	f7ff fac1 	bl	8000640 <printMutexUART>
	sendDataToNodeMCU();
 80010be:	f7ff fb1f 	bl	8000700 <sendDataToNodeMCU>
	printMutexUART("----------\r\n");
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <update+0x2c>)
 80010c4:	f7ff fabc 	bl	8000640 <printMutexUART>
	osDelay(100);
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f003 f9a0 	bl	800440e <osDelay>

	/* USER CODE END update */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	080081bc 	.word	0x080081bc
 80010dc:	080081cc 	.word	0x080081cc

080010e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x54>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_MspInit+0x54>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x54>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_MspInit+0x54>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_MspInit+0x54>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_MspInit+0x54>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	210f      	movs	r1, #15
 800112e:	f06f 0001 	mvn.w	r0, #1
 8001132:	f000 fb12 	bl	800175a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_I2C_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_I2C_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_I2C_MspInit+0x88>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_I2C_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001188:	2312      	movs	r3, #18
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001194:	2304      	movs	r3, #4
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <HAL_I2C_MspInit+0x8c>)
 80011a0:	f000 fb12 	bl	80017c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_I2C_MspInit+0x88>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_I2C_MspInit+0x88>)
 80011ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_I2C_MspInit+0x88>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a5b      	ldr	r2, [pc, #364]	; (8001360 <HAL_UART_MspInit+0x18c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12d      	bne.n	8001252 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_UART_MspInit+0x190>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a59      	ldr	r2, [pc, #356]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b57      	ldr	r3, [pc, #348]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_UART_MspInit+0x190>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b50      	ldr	r3, [pc, #320]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800122e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001240:	2307      	movs	r3, #7
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4847      	ldr	r0, [pc, #284]	; (8001368 <HAL_UART_MspInit+0x194>)
 800124c:	f000 fabc 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001250:	e081      	b.n	8001356 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a45      	ldr	r2, [pc, #276]	; (800136c <HAL_UART_MspInit+0x198>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d12c      	bne.n	80012b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a3f      	ldr	r2, [pc, #252]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_UART_MspInit+0x190>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_UART_MspInit+0x190>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a38      	ldr	r2, [pc, #224]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <HAL_UART_MspInit+0x190>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001294:	230c      	movs	r3, #12
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a4:	2307      	movs	r3, #7
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	482e      	ldr	r0, [pc, #184]	; (8001368 <HAL_UART_MspInit+0x194>)
 80012b0:	f000 fa8a 	bl	80017c8 <HAL_GPIO_Init>
}
 80012b4:	e04f      	b.n	8001356 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART6)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HAL_UART_MspInit+0x19c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d14a      	bne.n	8001356 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_UART_MspInit+0x190>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a18      	ldr	r2, [pc, #96]	; (8001364 <HAL_UART_MspInit+0x190>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_UART_MspInit+0x190>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001324:	2308      	movs	r3, #8
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x1a0>)
 8001330:	f000 fa4a 	bl	80017c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001346:	2308      	movs	r3, #8
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_UART_MspInit+0x194>)
 8001352:	f000 fa39 	bl	80017c8 <HAL_GPIO_Init>
}
 8001356:	bf00      	nop
 8001358:	3738      	adds	r7, #56	; 0x38
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40011000 	.word	0x40011000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40004400 	.word	0x40004400
 8001370:	40011400 	.word	0x40011400
 8001374:	40020800 	.word	0x40020800

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f8dc 	bl	8001564 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ac:	f004 ffb2 	bl	8006314 <xTaskGetSchedulerState>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d001      	beq.n	80013ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013b6:	f005 ff57 	bl	8007268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}

080013be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RGB_WAVE_Pin);
 80013c2:	2008      	movs	r0, #8
 80013c4:	f000 fbd0 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013d4:	f000 fbc8 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f006 f9a6 	bl	800775c <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	20000754 	.word	0x20000754
 8001444:	200047f8 	.word	0x200047f8

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001488:	4c0b      	ldr	r4, [pc, #44]	; (80014b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001496:	f7ff ffd7 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f006 f965 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149e:	f7ff f9a5 	bl	80007ec <main>
  bx  lr    
 80014a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80014b0:	08008278 	.word	0x08008278
  ldr r2, =_sbss
 80014b4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80014b8:	200047f8 	.word	0x200047f8

080014bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_Init+0x40>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_Init+0x40>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x40>)
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f92b 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fdfa 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f943 	bl	80017ae <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f90b 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000008 	.word	0x20000008
 800155c:	20000010 	.word	0x20000010
 8001560:	2000000c 	.word	0x2000000c

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000010 	.word	0x20000010
 8001588:	200047a4 	.word	0x200047a4

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200047a4 	.word	0x200047a4

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	; (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e159      	b.n	8001a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 8148 	bne.w	8001a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d005      	beq.n	800181a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	2b02      	cmp	r3, #2
 8001818:	d130      	bne.n	800187c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b03      	cmp	r3, #3
 8001886:	d017      	beq.n	80018b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a2 	beq.w	8001a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196a:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_GPIO_Init+0x2ec>)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_GPIO_Init+0x2f0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x202>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2f4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x1fe>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x1fa>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <HAL_GPIO_Init+0x2fc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x1f6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a45      	ldr	r2, [pc, #276]	; (8001ac8 <HAL_GPIO_Init+0x300>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x1f2>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x2ec>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_GPIO_Init+0x304>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0e:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a38:	4a24      	ldr	r2, [pc, #144]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f aea2 	bls.w	80017e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40013c00 	.word	0x40013c00

08001ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e001      	b.n	8001af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b44:	887a      	ldrh	r2, [r7, #2]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	041a      	lsls	r2, r3, #16
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	400b      	ands	r3, r1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	619a      	str	r2, [r3, #24]
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fe06 	bl	8000798 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e12b      	b.n	8001e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fac0 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bfc:	f002 f84c 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8001c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a81      	ldr	r2, [pc, #516]	; (8001e0c <HAL_I2C_Init+0x274>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d807      	bhi.n	8001c1c <HAL_I2C_Init+0x84>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a80      	ldr	r2, [pc, #512]	; (8001e10 <HAL_I2C_Init+0x278>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	bf94      	ite	ls
 8001c14:	2301      	movls	r3, #1
 8001c16:	2300      	movhi	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e006      	b.n	8001c2a <HAL_I2C_Init+0x92>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a7d      	ldr	r2, [pc, #500]	; (8001e14 <HAL_I2C_Init+0x27c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	bf94      	ite	ls
 8001c24:	2301      	movls	r3, #1
 8001c26:	2300      	movhi	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0e7      	b.n	8001e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a78      	ldr	r2, [pc, #480]	; (8001e18 <HAL_I2C_Init+0x280>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0c9b      	lsrs	r3, r3, #18
 8001c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_I2C_Init+0x274>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d802      	bhi.n	8001c6c <HAL_I2C_Init+0xd4>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	e009      	b.n	8001c80 <HAL_I2C_Init+0xe8>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	4a69      	ldr	r2, [pc, #420]	; (8001e1c <HAL_I2C_Init+0x284>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	3301      	adds	r3, #1
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	495c      	ldr	r1, [pc, #368]	; (8001e0c <HAL_I2C_Init+0x274>)
 8001c9c:	428b      	cmp	r3, r1
 8001c9e:	d819      	bhi.n	8001cd4 <HAL_I2C_Init+0x13c>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e59      	subs	r1, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_I2C_Init+0x138>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e59      	subs	r1, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cce:	e051      	b.n	8001d74 <HAL_I2C_Init+0x1dc>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e04f      	b.n	8001d74 <HAL_I2C_Init+0x1dc>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <HAL_I2C_Init+0x168>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e012      	b.n	8001d26 <HAL_I2C_Init+0x18e>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	0099      	lsls	r1, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x196>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e022      	b.n	8001d74 <HAL_I2C_Init+0x1dc>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10e      	bne.n	8001d54 <HAL_I2C_Init+0x1bc>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1e58      	subs	r0, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	440b      	add	r3, r1
 8001d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d52:	e00f      	b.n	8001d74 <HAL_I2C_Init+0x1dc>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6809      	ldr	r1, [r1, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6911      	ldr	r1, [r2, #16]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	000186a0 	.word	0x000186a0
 8001e10:	001e847f 	.word	0x001e847f
 8001e14:	003d08ff 	.word	0x003d08ff
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	10624dd3 	.word	0x10624dd3

08001e20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	817b      	strh	r3, [r7, #10]
 8001e30:	4613      	mov	r3, r2
 8001e32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff fbaa 	bl	800158c <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	f040 80e0 	bne.w	8002008 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2319      	movs	r3, #25
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4970      	ldr	r1, [pc, #448]	; (8002014 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f001 f8f6 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0d3      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x50>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e0cc      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d007      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2221      	movs	r2, #33	; 0x21
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	893a      	ldrh	r2, [r7, #8]
 8001ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ed8:	8979      	ldrh	r1, [r7, #10]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fde2 	bl	8002aa8 <I2C_MasterRequestWrite>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e08d      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f04:	e066      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f001 f970 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d107      	bne.n	8001f2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06b      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_I2C_Master_Transmit+0x188>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d017      	beq.n	8001fa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	6a39      	ldr	r1, [r7, #32]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f001 f960 	bl	8003272 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d107      	bne.n	8001fd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e01a      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d194      	bne.n	8001f06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	00100002 	.word	0x00100002
 8002018:	ffff0000 	.word	0xffff0000

0800201c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	461a      	mov	r2, r3
 8002028:	460b      	mov	r3, r1
 800202a:	817b      	strh	r3, [r7, #10]
 800202c:	4613      	mov	r3, r2
 800202e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff faac 	bl	800158c <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b20      	cmp	r3, #32
 8002040:	f040 820b 	bne.w	800245a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2319      	movs	r3, #25
 800204a:	2201      	movs	r2, #1
 800204c:	497c      	ldr	r1, [pc, #496]	; (8002240 <HAL_I2C_Master_Receive+0x224>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fff8 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	e1fe      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_I2C_Master_Receive+0x50>
 8002068:	2302      	movs	r3, #2
 800206a:	e1f7      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d007      	beq.n	8002092 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2222      	movs	r2, #34	; 0x22
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2210      	movs	r2, #16
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	893a      	ldrh	r2, [r7, #8]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a5c      	ldr	r2, [pc, #368]	; (8002244 <HAL_I2C_Master_Receive+0x228>)
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fd66 	bl	8002bac <I2C_MasterRequestRead>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1b8      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d113      	bne.n	800211a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	623b      	str	r3, [r7, #32]
 8002106:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e18c      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	2b01      	cmp	r3, #1
 8002120:	d11b      	bne.n	800215a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e16c      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	2b02      	cmp	r3, #2
 8002160:	d11b      	bne.n	800219a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002170:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	e14c      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021c0:	e138      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	f200 80f1 	bhi.w	80023ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d123      	bne.n	800221c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f001 f88b 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e139      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800221a:	e10b      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	2b02      	cmp	r3, #2
 8002222:	d14e      	bne.n	80022c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	2200      	movs	r2, #0
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <HAL_I2C_Master_Receive+0x22c>)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 ff08 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e10e      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
 800223e:	bf00      	nop
 8002240:	00100002 	.word	0x00100002
 8002244:	ffff0000 	.word	0xffff0000
 8002248:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c0:	e0b8      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	2200      	movs	r2, #0
 80022ca:	4966      	ldr	r1, [pc, #408]	; (8002464 <HAL_I2C_Master_Receive+0x448>)
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 feb9 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0bf      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	2200      	movs	r2, #0
 8002326:	494f      	ldr	r1, [pc, #316]	; (8002464 <HAL_I2C_Master_Receive+0x448>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fe8b 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e091      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ac:	e042      	b.n	8002434 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 ff9e 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04c      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d118      	bne.n	8002434 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f aec2 	bne.w	80021c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00010004 	.word	0x00010004

08002468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002482:	f7ff f883 	bl	800158c <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 80d9 	bne.w	8002648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	496d      	ldr	r1, [pc, #436]	; (8002654 <HAL_I2C_Mem_Write+0x1ec>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fdcf 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0cc      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Write+0x56>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0c5      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2221      	movs	r2, #33	; 0x21
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_I2C_Mem_Write+0x1f0>)
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fc06 	bl	8002d48 <I2C_RequestMemoryWrite>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d052      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e081      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fe50 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b04      	cmp	r3, #4
 800255c:	d107      	bne.n	800256e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x180>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1aa      	bne.n	8002546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fe3c 	bl	8003272 <I2C_WaitOnBTFFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b04      	cmp	r3, #4
 8002606:	d107      	bne.n	8002618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e016      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000

0800265c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4603      	mov	r3, r0
 800266c:	817b      	strh	r3, [r7, #10]
 800266e:	460b      	mov	r3, r1
 8002670:	813b      	strh	r3, [r7, #8]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002676:	f7fe ff89 	bl	800158c <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b20      	cmp	r3, #32
 8002686:	f040 8208 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2319      	movs	r3, #25
 8002690:	2201      	movs	r2, #1
 8002692:	497b      	ldr	r1, [pc, #492]	; (8002880 <HAL_I2C_Mem_Read+0x224>)
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fcd5 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
 80026a2:	e1fb      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_Mem_Read+0x56>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e1f4      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d007      	beq.n	80026d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2222      	movs	r2, #34	; 0x22
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_I2C_Mem_Read+0x228>)
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800271a:	88f8      	ldrh	r0, [r7, #6]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	4603      	mov	r3, r0
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fba2 	bl	8002e74 <I2C_RequestMemoryRead>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1b0      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e184      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	2b01      	cmp	r3, #1
 8002770:	d11b      	bne.n	80027aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e164      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d11b      	bne.n	80027ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	e144      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002800:	e138      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b03      	cmp	r3, #3
 8002808:	f200 80f1 	bhi.w	80029ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b01      	cmp	r3, #1
 8002812:	d123      	bne.n	800285c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fd6b 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e139      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800285a:	e10b      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	2b02      	cmp	r3, #2
 8002862:	d14e      	bne.n	8002902 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	2200      	movs	r2, #0
 800286c:	4906      	ldr	r1, [pc, #24]	; (8002888 <HAL_I2C_Mem_Read+0x22c>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fbe8 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e10e      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
 800287e:	bf00      	nop
 8002880:	00100002 	.word	0x00100002
 8002884:	ffff0000 	.word	0xffff0000
 8002888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002900:	e0b8      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	4966      	ldr	r1, [pc, #408]	; (8002aa4 <HAL_I2C_Mem_Read+0x448>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb99 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0bf      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2200      	movs	r2, #0
 8002966:	494f      	ldr	r1, [pc, #316]	; (8002aa4 <HAL_I2C_Mem_Read+0x448>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fb6b 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e091      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ec:	e042      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fc7e 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e04c      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d118      	bne.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f aec2 	bne.w	8002802 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00010004 	.word	0x00010004

08002aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d006      	beq.n	8002ad2 <I2C_MasterRequestWrite+0x2a>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <I2C_MasterRequestWrite+0x2a>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad0:	d108      	bne.n	8002ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e00b      	b.n	8002afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d107      	bne.n	8002afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa9b 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	d103      	bne.n	8002b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e035      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b38:	d108      	bne.n	8002b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	e01b      	b.n	8002b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b4c:	897b      	ldrh	r3, [r7, #10]
 8002b4e:	11db      	asrs	r3, r3, #7
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 0306 	and.w	r3, r3, #6
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f063 030f 	orn	r3, r3, #15
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <I2C_MasterRequestWrite+0xfc>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fac1 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e010      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <I2C_MasterRequestWrite+0x100>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fab1 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00010008 	.word	0x00010008
 8002ba8:	00010002 	.word	0x00010002

08002bac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d006      	beq.n	8002be6 <I2C_MasterRequestRead+0x3a>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d003      	beq.n	8002be6 <I2C_MasterRequestRead+0x3a>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002be4:	d108      	bne.n	8002bf8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e00b      	b.n	8002c10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	2b11      	cmp	r3, #17
 8002bfe:	d107      	bne.n	8002c10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fa11 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c36:	d103      	bne.n	8002c40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e079      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c4c:	d108      	bne.n	8002c60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	e05f      	b.n	8002d20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c60:	897b      	ldrh	r3, [r7, #10]
 8002c62:	11db      	asrs	r3, r3, #7
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0306 	and.w	r3, r3, #6
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f063 030f 	orn	r3, r3, #15
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4930      	ldr	r1, [pc, #192]	; (8002d40 <I2C_MasterRequestRead+0x194>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa37 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e054      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4929      	ldr	r1, [pc, #164]	; (8002d44 <I2C_MasterRequestRead+0x198>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa27 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e044      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f9af 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	d103      	bne.n	8002d04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e017      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	11db      	asrs	r3, r3, #7
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0306 	and.w	r3, r3, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f063 030e 	orn	r3, r3, #14
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <I2C_MasterRequestRead+0x198>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f9e3 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	00010008 	.word	0x00010008
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f960 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d98:	d103      	bne.n	8002da2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e05f      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	492d      	ldr	r1, [pc, #180]	; (8002e70 <I2C_RequestMemoryWrite+0x128>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f998 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e04c      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa02 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e02b      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	611a      	str	r2, [r3, #16]
 8002e1e:	e021      	b.n	8002e64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	6a39      	ldr	r1, [r7, #32]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f9dc 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d107      	bne.n	8002e56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e005      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5a:	893b      	ldrh	r3, [r7, #8]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	00010002 	.word	0x00010002

08002e74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8c2 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed4:	d103      	bne.n	8002ede <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0aa      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	6a3a      	ldr	r2, [r7, #32]
 8002ef6:	4952      	ldr	r1, [pc, #328]	; (8003040 <I2C_RequestMemoryRead+0x1cc>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f8fa 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e097      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	6a39      	ldr	r1, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f964 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d107      	bne.n	8002f46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e076      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e021      	b.n	8002fa0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5c:	893b      	ldrh	r3, [r7, #8]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f93e 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e050      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	6a39      	ldr	r1, [r7, #32]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f923 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d107      	bne.n	8002fc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e035      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f82b 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003002:	d103      	bne.n	800300c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e013      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003010:	897b      	ldrh	r3, [r7, #10]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	4906      	ldr	r1, [pc, #24]	; (8003040 <I2C_RequestMemoryRead+0x1cc>)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f863 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	00010002 	.word	0x00010002

08003044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003054:	e025      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d021      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7fe fa95 	bl	800158c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e023      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10d      	bne.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	e00c      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0b6      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003100:	e051      	b.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d123      	bne.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0204 	orr.w	r2, r3, #4
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e046      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d021      	beq.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fa13 	bl	800158c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e020      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10c      	bne.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf14      	ite	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	2300      	moveq	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e00b      	b.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	43da      	mvns	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d18d      	bne.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fc:	e02d      	b.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8ce 	bl	80033a0 <I2C_IsAcknowledgeFailed>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e02d      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d021      	beq.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe f9b9 	bl	800158c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d1ca      	bne.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327e:	e02d      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f88d 	bl	80033a0 <I2C_IsAcknowledgeFailed>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e02d      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d021      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe f978 	bl	800158c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1ca      	bne.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003300:	e042      	b.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d119      	bne.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0210 	mvn.w	r2, #16
 8003318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e029      	b.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fe f922 	bl	800158c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d1b5      	bne.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d11b      	bne.n	80033f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e264      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341e:	4ba3      	ldr	r3, [pc, #652]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00c      	beq.n	8003444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4ba0      	ldr	r3, [pc, #640]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d112      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4b9d      	ldr	r3, [pc, #628]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4b99      	ldr	r3, [pc, #612]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05b      	beq.n	8003508 <HAL_RCC_OscConfig+0x108>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d157      	bne.n	8003508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e23f      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x74>
 8003466:	4b91      	ldr	r3, [pc, #580]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a90      	ldr	r2, [pc, #576]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b8b      	ldr	r3, [pc, #556]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a8a      	ldr	r2, [pc, #552]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a87      	ldr	r2, [pc, #540]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003498:	4b84      	ldr	r3, [pc, #528]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a83      	ldr	r2, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b81      	ldr	r3, [pc, #516]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe f868 	bl	800158c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe f864 	bl	800158c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e204      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe f854 	bl	800158c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe f850 	bl	800158c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1f0      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	4b6c      	ldr	r3, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0xe8>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	4b65      	ldr	r3, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b62      	ldr	r3, [pc, #392]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	4b5c      	ldr	r3, [pc, #368]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1c4      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4952      	ldr	r1, [pc, #328]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	e03a      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003570:	4b4f      	ldr	r3, [pc, #316]	; (80036b0 <HAL_RCC_OscConfig+0x2b0>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fe f809 	bl	800158c <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe f805 	bl	800158c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1a5      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	4b46      	ldr	r3, [pc, #280]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4940      	ldr	r1, [pc, #256]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_RCC_OscConfig+0x2b0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd ffe8 	bl	800158c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fd ffe4 	bl	800158c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e184      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d030      	beq.n	800364c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_RCC_OscConfig+0x2b4>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fd ffc8 	bl	800158c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003600:	f7fd ffc4 	bl	800158c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e164      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x200>
 800361e:	e015      	b.n	800364c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x2b4>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fd ffb1 	bl	800158c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362e:	f7fd ffad 	bl	800158c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e14d      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a0 	beq.w	800379a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_OscConfig+0x2b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d121      	bne.n	80036da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_RCC_OscConfig+0x2b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <HAL_RCC_OscConfig+0x2b8>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fd ff73 	bl	800158c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e011      	b.n	80036ce <HAL_RCC_OscConfig+0x2ce>
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	42470000 	.word	0x42470000
 80036b4:	42470e80 	.word	0x42470e80
 80036b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd ff66 	bl	800158c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e106      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_RCC_OscConfig+0x4e4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2f0>
 80036e2:	4b81      	ldr	r3, [pc, #516]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e01c      	b.n	800372a <HAL_RCC_OscConfig+0x32a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x312>
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a77      	ldr	r2, [pc, #476]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x32a>
 8003712:	4b75      	ldr	r3, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a74      	ldr	r2, [pc, #464]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a71      	ldr	r2, [pc, #452]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd ff2b 	bl	800158c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd ff27 	bl	800158c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0c5      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCC_OscConfig+0x33a>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7fd ff15 	bl	800158c <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fd ff11 	bl	800158c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0af      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a55      	ldr	r2, [pc, #340]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 809b 	beq.w	80038da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d05c      	beq.n	800386a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d141      	bne.n	800383c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fd fee5 	bl	800158c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fd fee1 	bl	800158c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e081      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d8:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	019b      	lsls	r3, r3, #6
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	4937      	ldr	r1, [pc, #220]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fd feba 	bl	800158c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fd feb6 	bl	800158c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e056      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x41c>
 800383a:	e04e      	b.n	80038da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fd fea3 	bl	800158c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384a:	f7fd fe9f 	bl	800158c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e03f      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x44a>
 8003868:	e037      	b.n	80038da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e032      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d028      	beq.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d121      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d11a      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	3b01      	subs	r3, #1
 80038c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40007000 	.word	0x40007000
 80038e8:	40023800 	.word	0x40023800
 80038ec:	42470060 	.word	0x42470060

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cc      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d90c      	bls.n	800392c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b59      	ldr	r3, [pc, #356]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a58      	ldr	r2, [pc, #352]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a52      	ldr	r2, [pc, #328]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	494d      	ldr	r1, [pc, #308]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d044      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e067      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fd fdd4 	bl	800158c <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd fdd0 	bl	800158c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20c      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4916      	ldr	r1, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490e      	ldr	r1, [pc, #56]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f821 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fd34 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023c00 	.word	0x40023c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	080081f8 	.word	0x080081f8
 8003ab4:	20000008 	.word	0x20000008
 8003ab8:	2000000c 	.word	0x2000000c

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	2300      	movs	r3, #0
 8003ace:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad4:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d00d      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x40>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f200 80bd 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aee:	e0b7      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003af2:	60bb      	str	r3, [r7, #8]
       break;
 8003af4:	e0b7      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af6:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003af8:	60bb      	str	r3, [r7, #8]
      break;
 8003afa:	e0b4      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04d      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	ea02 0800 	and.w	r8, r2, r0
 8003b2a:	ea03 0901 	and.w	r9, r3, r1
 8003b2e:	4640      	mov	r0, r8
 8003b30:	4649      	mov	r1, r9
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	014b      	lsls	r3, r1, #5
 8003b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b40:	0142      	lsls	r2, r0, #5
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	ebb0 0008 	subs.w	r0, r0, r8
 8003b4a:	eb61 0109 	sbc.w	r1, r1, r9
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	018b      	lsls	r3, r1, #6
 8003b58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b5c:	0182      	lsls	r2, r0, #6
 8003b5e:	1a12      	subs	r2, r2, r0
 8003b60:	eb63 0301 	sbc.w	r3, r3, r1
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	00d9      	lsls	r1, r3, #3
 8003b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b72:	00d0      	lsls	r0, r2, #3
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	eb12 0208 	adds.w	r2, r2, r8
 8003b7c:	eb43 0309 	adc.w	r3, r3, r9
 8003b80:	f04f 0000 	mov.w	r0, #0
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	0259      	lsls	r1, r3, #9
 8003b8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b8e:	0250      	lsls	r0, r2, #9
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f7fc fb76 	bl	8000290 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e04a      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	ea02 0400 	and.w	r4, r2, r0
 8003bc6:	ea03 0501 	and.w	r5, r3, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	014b      	lsls	r3, r1, #5
 8003bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bdc:	0142      	lsls	r2, r0, #5
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	1b00      	subs	r0, r0, r4
 8003be4:	eb61 0105 	sbc.w	r1, r1, r5
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf6:	0182      	lsls	r2, r0, #6
 8003bf8:	1a12      	subs	r2, r2, r0
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	00d9      	lsls	r1, r3, #3
 8003c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0c:	00d0      	lsls	r0, r2, #3
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	1912      	adds	r2, r2, r4
 8003c14:	eb45 0303 	adc.w	r3, r5, r3
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0299      	lsls	r1, r3, #10
 8003c22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c26:	0290      	lsls	r0, r2, #10
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f7fc fb2a 	bl	8000290 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	60bb      	str	r3, [r7, #8]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c62:	60bb      	str	r3, [r7, #8]
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	68bb      	ldr	r3, [r7, #8]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200

08003c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000008 	.word	0x20000008

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a9b      	lsrs	r3, r3, #10
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08008208 	.word	0x08008208

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cc4:	f7ff ffdc 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0b5b      	lsrs	r3, r3, #13
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	08008208 	.word	0x08008208

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fa60 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f929 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	; 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d17c      	bne.n	8003e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit+0x2c>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e075      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x3e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e06e      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fbd9 	bl	800158c <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e14:	e02a      	b.n	8003e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f840 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e036      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1cf      	bne.n	8003e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f810 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b090      	sub	sp, #64	; 0x40
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e050      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d04c      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	f7fd fb61 	bl	800158c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d241      	bcs.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e00f      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d09f      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3740      	adds	r7, #64	; 0x40
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	b09f      	sub	sp, #124	; 0x7c
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	68d9      	ldr	r1, [r3, #12]
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	ea40 0301 	orr.w	r3, r0, r1
 8003fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fc8:	f021 010c 	bic.w	r1, r1, #12
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	6999      	ldr	r1, [r3, #24]
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	ea40 0301 	orr.w	r3, r0, r1
 8003fec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4bc5      	ldr	r3, [pc, #788]	; (8004308 <UART_SetConfig+0x384>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d004      	beq.n	8004002 <UART_SetConfig+0x7e>
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4bc3      	ldr	r3, [pc, #780]	; (800430c <UART_SetConfig+0x388>)
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d103      	bne.n	800400a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004002:	f7ff fe5d 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 8004006:	6778      	str	r0, [r7, #116]	; 0x74
 8004008:	e002      	b.n	8004010 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7ff fe45 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 800400e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	f040 80b6 	bne.w	8004188 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800401c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401e:	461c      	mov	r4, r3
 8004020:	f04f 0500 	mov.w	r5, #0
 8004024:	4622      	mov	r2, r4
 8004026:	462b      	mov	r3, r5
 8004028:	1891      	adds	r1, r2, r2
 800402a:	6439      	str	r1, [r7, #64]	; 0x40
 800402c:	415b      	adcs	r3, r3
 800402e:	647b      	str	r3, [r7, #68]	; 0x44
 8004030:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004034:	1912      	adds	r2, r2, r4
 8004036:	eb45 0303 	adc.w	r3, r5, r3
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	00d9      	lsls	r1, r3, #3
 8004044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004048:	00d0      	lsls	r0, r2, #3
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	1911      	adds	r1, r2, r4
 8004050:	6639      	str	r1, [r7, #96]	; 0x60
 8004052:	416b      	adcs	r3, r5
 8004054:	667b      	str	r3, [r7, #100]	; 0x64
 8004056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	1891      	adds	r1, r2, r2
 8004062:	63b9      	str	r1, [r7, #56]	; 0x38
 8004064:	415b      	adcs	r3, r3
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800406c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004070:	f7fc f90e 	bl	8000290 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4ba5      	ldr	r3, [pc, #660]	; (8004310 <UART_SetConfig+0x38c>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011e      	lsls	r6, r3, #4
 8004082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004084:	461c      	mov	r4, r3
 8004086:	f04f 0500 	mov.w	r5, #0
 800408a:	4622      	mov	r2, r4
 800408c:	462b      	mov	r3, r5
 800408e:	1891      	adds	r1, r2, r2
 8004090:	6339      	str	r1, [r7, #48]	; 0x30
 8004092:	415b      	adcs	r3, r3
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
 8004096:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800409a:	1912      	adds	r2, r2, r4
 800409c:	eb45 0303 	adc.w	r3, r5, r3
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	00d9      	lsls	r1, r3, #3
 80040aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ae:	00d0      	lsls	r0, r2, #3
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	1911      	adds	r1, r2, r4
 80040b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040b8:	416b      	adcs	r3, r5
 80040ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	461a      	mov	r2, r3
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80040ca:	415b      	adcs	r3, r3
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040d6:	f7fc f8db 	bl	8000290 <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <UART_SetConfig+0x38c>)
 80040e0:	fba3 1302 	umull	r1, r3, r3, r2
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	2164      	movs	r1, #100	; 0x64
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	3332      	adds	r3, #50	; 0x32
 80040f2:	4a87      	ldr	r2, [pc, #540]	; (8004310 <UART_SetConfig+0x38c>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004100:	441e      	add	r6, r3
 8004102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004104:	4618      	mov	r0, r3
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	1894      	adds	r4, r2, r2
 8004110:	623c      	str	r4, [r7, #32]
 8004112:	415b      	adcs	r3, r3
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800411a:	1812      	adds	r2, r2, r0
 800411c:	eb41 0303 	adc.w	r3, r1, r3
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	f04f 0500 	mov.w	r5, #0
 8004128:	00dd      	lsls	r5, r3, #3
 800412a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800412e:	00d4      	lsls	r4, r2, #3
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	1814      	adds	r4, r2, r0
 8004136:	653c      	str	r4, [r7, #80]	; 0x50
 8004138:	414b      	adcs	r3, r1
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
 800413c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	461a      	mov	r2, r3
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	1891      	adds	r1, r2, r2
 8004148:	61b9      	str	r1, [r7, #24]
 800414a:	415b      	adcs	r3, r3
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004152:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004156:	f7fc f89b 	bl	8000290 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <UART_SetConfig+0x38c>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a67      	ldr	r2, [pc, #412]	; (8004310 <UART_SetConfig+0x38c>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 0207 	and.w	r2, r3, #7
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4432      	add	r2, r6
 8004184:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004186:	e0b9      	b.n	80042fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418a:	461c      	mov	r4, r3
 800418c:	f04f 0500 	mov.w	r5, #0
 8004190:	4622      	mov	r2, r4
 8004192:	462b      	mov	r3, r5
 8004194:	1891      	adds	r1, r2, r2
 8004196:	6139      	str	r1, [r7, #16]
 8004198:	415b      	adcs	r3, r3
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041a0:	1912      	adds	r2, r2, r4
 80041a2:	eb45 0303 	adc.w	r3, r5, r3
 80041a6:	f04f 0000 	mov.w	r0, #0
 80041aa:	f04f 0100 	mov.w	r1, #0
 80041ae:	00d9      	lsls	r1, r3, #3
 80041b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041b4:	00d0      	lsls	r0, r2, #3
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	eb12 0804 	adds.w	r8, r2, r4
 80041be:	eb43 0905 	adc.w	r9, r3, r5
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	008b      	lsls	r3, r1, #2
 80041d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041da:	0082      	lsls	r2, r0, #2
 80041dc:	4640      	mov	r0, r8
 80041de:	4649      	mov	r1, r9
 80041e0:	f7fc f856 	bl	8000290 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b49      	ldr	r3, [pc, #292]	; (8004310 <UART_SetConfig+0x38c>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011e      	lsls	r6, r3, #4
 80041f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f4:	4618      	mov	r0, r3
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	1894      	adds	r4, r2, r2
 8004200:	60bc      	str	r4, [r7, #8]
 8004202:	415b      	adcs	r3, r3
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420a:	1812      	adds	r2, r2, r0
 800420c:	eb41 0303 	adc.w	r3, r1, r3
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	f04f 0500 	mov.w	r5, #0
 8004218:	00dd      	lsls	r5, r3, #3
 800421a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800421e:	00d4      	lsls	r4, r2, #3
 8004220:	4622      	mov	r2, r4
 8004222:	462b      	mov	r3, r5
 8004224:	1814      	adds	r4, r2, r0
 8004226:	64bc      	str	r4, [r7, #72]	; 0x48
 8004228:	414b      	adcs	r3, r1
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	008b      	lsls	r3, r1, #2
 8004240:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004244:	0082      	lsls	r2, r0, #2
 8004246:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800424a:	f7fc f821 	bl	8000290 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <UART_SetConfig+0x38c>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <UART_SetConfig+0x38c>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004272:	441e      	add	r6, r3
 8004274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004276:	4618      	mov	r0, r3
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	1894      	adds	r4, r2, r2
 8004282:	603c      	str	r4, [r7, #0]
 8004284:	415b      	adcs	r3, r3
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800428c:	1812      	adds	r2, r2, r0
 800428e:	eb41 0303 	adc.w	r3, r1, r3
 8004292:	f04f 0400 	mov.w	r4, #0
 8004296:	f04f 0500 	mov.w	r5, #0
 800429a:	00dd      	lsls	r5, r3, #3
 800429c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042a0:	00d4      	lsls	r4, r2, #3
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	eb12 0a00 	adds.w	sl, r2, r0
 80042aa:	eb43 0b01 	adc.w	fp, r3, r1
 80042ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	008b      	lsls	r3, r1, #2
 80042c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042c6:	0082      	lsls	r2, r0, #2
 80042c8:	4650      	mov	r0, sl
 80042ca:	4659      	mov	r1, fp
 80042cc:	f7fb ffe0 	bl	8000290 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <UART_SetConfig+0x38c>)
 80042d6:	fba3 1302 	umull	r1, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2164      	movs	r1, #100	; 0x64
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	3332      	adds	r3, #50	; 0x32
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <UART_SetConfig+0x38c>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	f003 020f 	and.w	r2, r3, #15
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4432      	add	r2, r6
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	377c      	adds	r7, #124	; 0x7c
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004306:	bf00      	nop
 8004308:	40011000 	.word	0x40011000
 800430c:	40011400 	.word	0x40011400
 8004310:	51eb851f 	.word	0x51eb851f

08004314 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004326:	2b84      	cmp	r3, #132	; 0x84
 8004328:	d005      	beq.n	8004336 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800432a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	3303      	adds	r3, #3
 8004334:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800434a:	f3ef 8305 	mrs	r3, IPSR
 800434e:	607b      	str	r3, [r7, #4]
  return(result);
 8004350:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800436c:	f001 fb92 	bl	8005a94 <vTaskStartScheduler>
  
  return osOK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	bd80      	pop	{r7, pc}

08004376 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004378:	b089      	sub	sp, #36	; 0x24
 800437a:	af04      	add	r7, sp, #16
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <osThreadCreate+0x54>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01c      	beq.n	80043ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685c      	ldr	r4, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681d      	ldr	r5, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691e      	ldr	r6, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffb6 	bl	8004314 <makeFreeRtosPriority>
 80043a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043b2:	9202      	str	r2, [sp, #8]
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	9100      	str	r1, [sp, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4632      	mov	r2, r6
 80043bc:	4629      	mov	r1, r5
 80043be:	4620      	mov	r0, r4
 80043c0:	f001 f9a0 	bl	8005704 <xTaskCreateStatic>
 80043c4:	4603      	mov	r3, r0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e01c      	b.n	8004404 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685c      	ldr	r4, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043d6:	b29e      	uxth	r6, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff98 	bl	8004314 <makeFreeRtosPriority>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4632      	mov	r2, r6
 80043f2:	4629      	mov	r1, r5
 80043f4:	4620      	mov	r0, r4
 80043f6:	f001 f9e2 	bl	80057be <xTaskCreate>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800440e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <osDelay+0x16>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	e000      	b.n	8004426 <osDelay+0x18>
 8004424:	2301      	movs	r3, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f001 fb00 	bl	8005a2c <vTaskDelay>
  
  return osOK;
 800442c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	460b      	mov	r3, r1
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d013      	beq.n	8004476 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <osTimerCreate+0x20>
 8004454:	2101      	movs	r1, #1
 8004456:	e000      	b.n	800445a <osTimerCreate+0x22>
 8004458:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004462:	9201      	str	r2, [sp, #4]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	460a      	mov	r2, r1
 800446a:	2101      	movs	r1, #1
 800446c:	480b      	ldr	r0, [pc, #44]	; (800449c <osTimerCreate+0x64>)
 800446e:	f002 f9dc 	bl	800682a <xTimerCreateStatic>
 8004472:	4603      	mov	r3, r0
 8004474:	e00e      	b.n	8004494 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004476:	7afb      	ldrb	r3, [r7, #11]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <osTimerCreate+0x48>
 800447c:	2201      	movs	r2, #1
 800447e:	e000      	b.n	8004482 <osTimerCreate+0x4a>
 8004480:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2101      	movs	r1, #1
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <osTimerCreate+0x64>)
 800448e:	f002 f9ab 	bl	80067e8 <xTimerCreate>
 8004492:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	080081dc 	.word	0x080081dc

080044a0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <osTimerStart+0x20>
    ticks = 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80044c0:	f7ff ff40 	bl	8004344 <inHandlerMode>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01a      	beq.n	8004500 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	2200      	movs	r2, #0
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	2109      	movs	r1, #9
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f002 fa20 	bl	800691c <xTimerGenericCommand>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d002      	beq.n	80044e8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80044e2:	23ff      	movs	r3, #255	; 0xff
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e018      	b.n	800451a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d015      	beq.n	800451a <osTimerStart+0x7a>
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <osTimerStart+0x84>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	e00c      	b.n	800451a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	2104      	movs	r1, #4
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f002 fa06 	bl	800691c <xTimerGenericCommand>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d001      	beq.n	800451a <osTimerStart+0x7a>
      result = osErrorOS;
 8004516:	23ff      	movs	r3, #255	; 0xff
 8004518:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4619      	mov	r1, r3
 800453e:	2001      	movs	r0, #1
 8004540:	f000 faad 	bl	8004a9e <xQueueCreateMutexStatic>
 8004544:	4603      	mov	r3, r0
 8004546:	e003      	b.n	8004550 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004548:	2001      	movs	r0, #1
 800454a:	f000 fa90 	bl	8004a6e <xQueueCreateMutex>
 800454e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <osMutexWait+0x18>
    return osErrorParameter;
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	e03a      	b.n	80045e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d103      	bne.n	8004584 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e009      	b.n	8004598 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <osMutexWait+0x40>
      ticks = 1;
 8004594:	2301      	movs	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004598:	f7ff fed4 	bl	8004344 <inHandlerMode>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d017      	beq.n	80045d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	461a      	mov	r2, r3
 80045a8:	2100      	movs	r1, #0
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fea4 	bl	80052f8 <xQueueReceiveFromISR>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d001      	beq.n	80045ba <osMutexWait+0x62>
      return osErrorOS;
 80045b6:	23ff      	movs	r3, #255	; 0xff
 80045b8:	e015      	b.n	80045e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <osMutexWait+0x8c>
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <osMutexWait+0x98>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	e008      	b.n	80045e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fd83 	bl	80050e0 <xQueueSemaphoreTake>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <osMutexWait+0x8c>
    return osErrorOS;
 80045e0:	23ff      	movs	r3, #255	; 0xff
 80045e2:	e000      	b.n	80045e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004604:	f7ff fe9e 	bl	8004344 <inHandlerMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fbf6 	bl	8004e06 <xQueueGiveFromISR>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d001      	beq.n	8004624 <osMutexRelease+0x30>
      return osErrorOS;
 8004620:	23ff      	movs	r3, #255	; 0xff
 8004622:	e017      	b.n	8004654 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d013      	beq.n	8004652 <osMutexRelease+0x5e>
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <osMutexRelease+0x68>)
 800462c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	e00a      	b.n	8004652 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800463c:	2300      	movs	r3, #0
 800463e:	2200      	movs	r2, #0
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa46 	bl	8004ad4 <xQueueGenericSend>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800464e:	23ff      	movs	r3, #255	; 0xff
 8004650:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 0208 	add.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f103 0208 	add.w	r2, r3, #8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f103 0208 	add.w	r2, r3, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d103      	bne.n	8004722 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e00c      	b.n	800473c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3308      	adds	r3, #8
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e002      	b.n	8004730 <vListInsert+0x2e>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	429a      	cmp	r2, r3
 800473a:	d2f6      	bcs.n	800472a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6892      	ldr	r2, [r2, #8]
 800478a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6852      	ldr	r2, [r2, #4]
 8004794:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d103      	bne.n	80047a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	1e5a      	subs	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047f2:	f002 fca7 	bl	8007144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	441a      	add	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	3b01      	subs	r3, #1
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	22ff      	movs	r2, #255	; 0xff
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d114      	bne.n	8004872 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01a      	beq.n	8004886 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3310      	adds	r3, #16
 8004854:	4618      	mov	r0, r3
 8004856:	f001 fba1 	bl	8005f9c <xTaskRemoveFromEventList>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d012      	beq.n	8004886 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <xQueueGenericReset+0xcc>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	e009      	b.n	8004886 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3310      	adds	r3, #16
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fef2 	bl	8004660 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3324      	adds	r3, #36	; 0x24
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff feed 	bl	8004660 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004886:	f002 fc8d 	bl	80071a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800488a:	2301      	movs	r3, #1
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08e      	sub	sp, #56	; 0x38
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <xQueueGenericCreateStatic+0x52>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <xQueueGenericCreateStatic+0x56>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueGenericCreateStatic+0x58>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	623b      	str	r3, [r7, #32]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <xQueueGenericCreateStatic+0x7e>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <xQueueGenericCreateStatic+0x82>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueGenericCreateStatic+0x84>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61fb      	str	r3, [r7, #28]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004936:	2348      	movs	r3, #72	; 0x48
 8004938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b48      	cmp	r3, #72	; 0x48
 800493e:	d00a      	beq.n	8004956 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	61bb      	str	r3, [r7, #24]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004956:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800496a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f83f 	bl	80049fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004980:	4618      	mov	r0, r3
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	613b      	str	r3, [r7, #16]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3348      	adds	r3, #72	; 0x48
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 fce1 	bl	8007388 <pvPortMalloc>
 80049c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d011      	beq.n	80049f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	3348      	adds	r3, #72	; 0x48
 80049d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049e0:	79fa      	ldrb	r2, [r7, #7]
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f805 	bl	80049fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049f2:	69bb      	ldr	r3, [r7, #24]
	}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	69b8      	ldr	r0, [r7, #24]
 8004a2e:	f7ff fecb 	bl	80047c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f837 	bl	8004ad4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	4603      	mov	r3, r0
 8004a76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6939      	ldr	r1, [r7, #16]
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7ff ff7e 	bl	8004988 <xQueueGenericCreate>
 8004a8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7ff ffd3 	bl	8004a3a <prvInitialiseMutex>

		return xNewQueue;
 8004a94:	68fb      	ldr	r3, [r7, #12]
	}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af02      	add	r7, sp, #8
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	6039      	str	r1, [r7, #0]
 8004aa8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	6939      	ldr	r1, [r7, #16]
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f7ff feeb 	bl	8004898 <xQueueGenericCreateStatic>
 8004ac2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff ffb8 	bl	8004a3a <prvInitialiseMutex>

		return xNewQueue;
 8004aca:	68fb      	ldr	r3, [r7, #12]
	}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	; 0x38
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xQueueGenericSend+0x32>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <xQueueGenericSend+0x40>
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <xQueueGenericSend+0x44>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <xQueueGenericSend+0x46>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10a      	bne.n	8004b34 <xQueueGenericSend+0x60>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d103      	bne.n	8004b42 <xQueueGenericSend+0x6e>
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <xQueueGenericSend+0x72>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xQueueGenericSend+0x74>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	623b      	str	r3, [r7, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b62:	f001 fbd7 	bl	8006314 <xTaskGetSchedulerState>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <xQueueGenericSend+0x9e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <xQueueGenericSend+0xa2>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <xQueueGenericSend+0xa4>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	61fb      	str	r3, [r7, #28]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b92:	f002 fad7 	bl	8007144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <xQueueGenericSend+0xd4>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d129      	bne.n	8004bfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bae:	f000 fc3b 	bl	8005428 <prvCopyDataToQueue>
 8004bb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d010      	beq.n	8004bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	3324      	adds	r3, #36	; 0x24
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f9eb 	bl	8005f9c <xTaskRemoveFromEventList>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d013      	beq.n	8004bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <xQueueGenericSend+0x1f8>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	e00a      	b.n	8004bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004be4:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <xQueueGenericSend+0x1f8>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bf4:	f002 fad6 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e063      	b.n	8004cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c02:	f002 facf 	bl	80071a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e05c      	b.n	8004cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fa23 	bl	8006060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c1e:	f002 fac1 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c22:	f000 ff9d 	bl	8005b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c26:	f002 fa8d 	bl	8007144 <vPortEnterCritical>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d103      	bne.n	8004c40 <xQueueGenericSend+0x16c>
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d103      	bne.n	8004c56 <xQueueGenericSend+0x182>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c56:	f002 faa5 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c5a:	1d3a      	adds	r2, r7, #4
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fa12 	bl	800608c <xTaskCheckForTimeOut>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d124      	bne.n	8004cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c70:	f000 fcd2 	bl	8005618 <prvIsQueueFull>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d018      	beq.n	8004cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	3310      	adds	r3, #16
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f93a 	bl	8005efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c8a:	f000 fc5d 	bl	8005548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c8e:	f000 ff75 	bl	8005b7c <xTaskResumeAll>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f47f af7c 	bne.w	8004b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <xQueueGenericSend+0x1f8>)
 8004c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	e772      	b.n	8004b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cae:	f000 fc4b 	bl	8005548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cb2:	f000 ff63 	bl	8005b7c <xTaskResumeAll>
 8004cb6:	e76c      	b.n	8004b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cba:	f000 fc45 	bl	8005548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cbe:	f000 ff5d 	bl	8005b7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3738      	adds	r7, #56	; 0x38
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b090      	sub	sp, #64	; 0x40
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <xQueueGenericSendFromISR+0x3c>
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <xQueueGenericSendFromISR+0x40>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <xQueueGenericSendFromISR+0x42>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSendFromISR+0x6a>
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <xQueueGenericSendFromISR+0x6e>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueGenericSendFromISR+0x70>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	623b      	str	r3, [r7, #32]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d5a:	f002 fad5 	bl	8007308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	61fa      	str	r2, [r7, #28]
 8004d74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <xQueueGenericSendFromISR+0xbc>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d12f      	bne.n	8004dec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004da2:	f000 fb41 	bl	8005428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004da6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d112      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d016      	beq.n	8004de6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 f8ed 	bl	8005f9c <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e007      	b.n	8004de6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dda:	3301      	adds	r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	b25a      	sxtb	r2, r3
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004de6:	2301      	movs	r3, #1
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004dea:	e001      	b.n	8004df0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3740      	adds	r7, #64	; 0x40
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b08e      	sub	sp, #56	; 0x38
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	623b      	str	r3, [r7, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61fb      	str	r3, [r7, #28]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <xQueueGiveFromISR+0x58>
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <xQueueGiveFromISR+0x5c>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <xQueueGiveFromISR+0x5e>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	61bb      	str	r3, [r7, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e7e:	f002 fa43 	bl	8007308 <vPortValidateInterruptPriority>
	__asm volatile
 8004e82:	f3ef 8211 	mrs	r2, BASEPRI
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	617a      	str	r2, [r7, #20]
 8004e98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004e9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d22b      	bcs.n	8004f06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d112      	bne.n	8004ef0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	3324      	adds	r3, #36	; 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 f860 	bl	8005f9c <xTaskRemoveFromEventList>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00e      	beq.n	8004f00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	b25a      	sxtb	r2, r3
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f00:	2301      	movs	r3, #1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	e001      	b.n	8004f0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f383 8811 	msr	BASEPRI, r3
}
 8004f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3738      	adds	r7, #56	; 0x38
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xQueueReceive+0x30>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	623b      	str	r3, [r7, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <xQueueReceive+0x3e>
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <xQueueReceive+0x42>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <xQueueReceive+0x44>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xQueueReceive+0x5e>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	61fb      	str	r3, [r7, #28]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7e:	f001 f9c9 	bl	8006314 <xTaskGetSchedulerState>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xQueueReceive+0x6e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <xQueueReceive+0x72>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <xQueueReceive+0x74>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <xQueueReceive+0x8e>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	61bb      	str	r3, [r7, #24]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fae:	f002 f8c9 	bl	8007144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01f      	beq.n	8004ffe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc2:	f000 fa9b 	bl	80054fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00f      	beq.n	8004ff6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	3310      	adds	r3, #16
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 ffde 	bl	8005f9c <xTaskRemoveFromEventList>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <xQueueReceive+0x1bc>)
 8004fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ff6:	f002 f8d5 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e069      	b.n	80050d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005004:	f002 f8ce 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005008:	2300      	movs	r3, #0
 800500a:	e062      	b.n	80050d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005012:	f107 0310 	add.w	r3, r7, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f822 	bl	8006060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005020:	f002 f8c0 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005024:	f000 fd9c 	bl	8005b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005028:	f002 f88c 	bl	8007144 <vPortEnterCritical>
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005032:	b25b      	sxtb	r3, r3
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d103      	bne.n	8005042 <xQueueReceive+0x122>
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005048:	b25b      	sxtb	r3, r3
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d103      	bne.n	8005058 <xQueueReceive+0x138>
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005058:	f002 f8a4 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800505c:	1d3a      	adds	r2, r7, #4
 800505e:	f107 0310 	add.w	r3, r7, #16
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f001 f811 	bl	800608c <xTaskCheckForTimeOut>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d123      	bne.n	80050b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005072:	f000 fabb 	bl	80055ec <prvIsQueueEmpty>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f000 ff39 	bl	8005efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800508a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800508c:	f000 fa5c 	bl	8005548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005090:	f000 fd74 	bl	8005b7c <xTaskResumeAll>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d189      	bne.n	8004fae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <xQueueReceive+0x1bc>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e780      	b.n	8004fae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ae:	f000 fa4b 	bl	8005548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b2:	f000 fd63 	bl	8005b7c <xTaskResumeAll>
 80050b6:	e77a      	b.n	8004fae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ba:	f000 fa45 	bl	8005548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050be:	f000 fd5d 	bl	8005b7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c4:	f000 fa92 	bl	80055ec <prvIsQueueEmpty>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f43f af6f 	beq.w	8004fae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3730      	adds	r7, #48	; 0x30
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08e      	sub	sp, #56	; 0x38
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	61fb      	str	r3, [r7, #28]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005130:	f001 f8f0 	bl	8006314 <xTaskGetSchedulerState>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <xQueueSemaphoreTake+0x60>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <xQueueSemaphoreTake+0x64>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <xQueueSemaphoreTake+0x66>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	61bb      	str	r3, [r7, #24]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005160:	f001 fff0 	bl	8007144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	d024      	beq.n	80051ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	1e5a      	subs	r2, r3, #1
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005180:	f001 fa70 	bl	8006664 <pvTaskIncrementMutexHeldCount>
 8005184:	4602      	mov	r2, r0
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00f      	beq.n	80051b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	3310      	adds	r3, #16
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ff00 	bl	8005f9c <xTaskRemoveFromEventList>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051a2:	4b54      	ldr	r3, [pc, #336]	; (80052f4 <xQueueSemaphoreTake+0x214>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051b2:	f001 fff7 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e097      	b.n	80052ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d111      	bne.n	80051e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	617b      	str	r3, [r7, #20]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80051dc:	f001 ffe2 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e082      	b.n	80052ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ea:	f107 030c 	add.w	r3, r7, #12
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 ff36 	bl	8006060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051f8:	f001 ffd4 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051fc:	f000 fcb0 	bl	8005b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005200:	f001 ffa0 	bl	8007144 <vPortEnterCritical>
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800520a:	b25b      	sxtb	r3, r3
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d103      	bne.n	800521a <xQueueSemaphoreTake+0x13a>
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005220:	b25b      	sxtb	r3, r3
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d103      	bne.n	8005230 <xQueueSemaphoreTake+0x150>
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005230:	f001 ffb8 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005234:	463a      	mov	r2, r7
 8005236:	f107 030c 	add.w	r3, r7, #12
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 ff25 	bl	800608c <xTaskCheckForTimeOut>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d132      	bne.n	80052ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800524a:	f000 f9cf 	bl	80055ec <prvIsQueueEmpty>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d026      	beq.n	80052a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800525c:	f001 ff72 	bl	8007144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4618      	mov	r0, r3
 8005266:	f001 f873 	bl	8006350 <xTaskPriorityInherit>
 800526a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800526c:	f001 ff9a 	bl	80071a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	3324      	adds	r3, #36	; 0x24
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fe3f 	bl	8005efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800527e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005280:	f000 f962 	bl	8005548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005284:	f000 fc7a 	bl	8005b7c <xTaskResumeAll>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	f47f af68 	bne.w	8005160 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <xQueueSemaphoreTake+0x214>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	e75e      	b.n	8005160 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80052a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052a4:	f000 f950 	bl	8005548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052a8:	f000 fc68 	bl	8005b7c <xTaskResumeAll>
 80052ac:	e758      	b.n	8005160 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80052ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052b0:	f000 f94a 	bl	8005548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052b4:	f000 fc62 	bl	8005b7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052ba:	f000 f997 	bl	80055ec <prvIsQueueEmpty>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f43f af4d 	beq.w	8005160 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80052cc:	f001 ff3a 	bl	8007144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80052d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052d2:	f000 f891 	bl	80053f8 <prvGetDisinheritPriorityAfterTimeout>
 80052d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 f932 	bl	8006548 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80052e4:	f001 ff5e 	bl	80071a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3738      	adds	r7, #56	; 0x38
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	; 0x38
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	623b      	str	r3, [r7, #32]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d103      	bne.n	8005332 <xQueueReceiveFromISR+0x3a>
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <xQueueReceiveFromISR+0x3e>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <xQueueReceiveFromISR+0x40>
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	61fb      	str	r3, [r7, #28]
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005352:	f001 ffd9 	bl	8007308 <vPortValidateInterruptPriority>
	__asm volatile
 8005356:	f3ef 8211 	mrs	r2, BASEPRI
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	61ba      	str	r2, [r7, #24]
 800536c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800536e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d02f      	beq.n	80053de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800538c:	f000 f8b6 	bl	80054fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d112      	bne.n	80053c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d016      	beq.n	80053d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	3310      	adds	r3, #16
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fdf4 	bl	8005f9c <xTaskRemoveFromEventList>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e007      	b.n	80053d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053cc:	3301      	adds	r3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	b25a      	sxtb	r2, r3
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80053d8:	2301      	movs	r3, #1
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
 80053dc:	e001      	b.n	80053e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80053de:	2300      	movs	r3, #0
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f383 8811 	msr	BASEPRI, r3
}
 80053ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3738      	adds	r7, #56	; 0x38
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1c3 0307 	rsb	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e001      	b.n	800541a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800541a:	68fb      	ldr	r3, [r7, #12]
	}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10d      	bne.n	8005462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d14d      	bne.n	80054ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fff2 	bl	800643c <xTaskPriorityDisinherit>
 8005458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	e043      	b.n	80054ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d119      	bne.n	800549c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6858      	ldr	r0, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	461a      	mov	r2, r3
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	f002 f9b6 	bl	80077e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	441a      	add	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d32b      	bcc.n	80054ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	e026      	b.n	80054ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68d8      	ldr	r0, [r3, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	461a      	mov	r2, r3
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	f002 f99c 	bl	80077e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	425b      	negs	r3, r3
 80054b6:	441a      	add	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d207      	bcs.n	80054d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	425b      	negs	r3, r3
 80054d2:	441a      	add	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d105      	bne.n	80054ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054f2:	697b      	ldr	r3, [r7, #20]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d018      	beq.n	8005540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	441a      	add	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d303      	bcc.n	8005530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68d9      	ldr	r1, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	461a      	mov	r2, r3
 800553a:	6838      	ldr	r0, [r7, #0]
 800553c:	f002 f952 	bl	80077e4 <memcpy>
	}
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005550:	f001 fdf8 	bl	8007144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800555c:	e011      	b.n	8005582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	d012      	beq.n	800558c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3324      	adds	r3, #36	; 0x24
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd16 	bl	8005f9c <xTaskRemoveFromEventList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005576:	f000 fdeb 	bl	8006150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	3b01      	subs	r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	dce9      	bgt.n	800555e <prvUnlockQueue+0x16>
 800558a:	e000      	b.n	800558e <prvUnlockQueue+0x46>
					break;
 800558c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005596:	f001 fe05 	bl	80071a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800559a:	f001 fdd3 	bl	8007144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055a6:	e011      	b.n	80055cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d012      	beq.n	80055d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3310      	adds	r3, #16
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fcf1 	bl	8005f9c <xTaskRemoveFromEventList>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055c0:	f000 fdc6 	bl	8006150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055c4:	7bbb      	ldrb	r3, [r7, #14]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dce9      	bgt.n	80055a8 <prvUnlockQueue+0x60>
 80055d4:	e000      	b.n	80055d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	22ff      	movs	r2, #255	; 0xff
 80055dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055e0:	f001 fde0 	bl	80071a4 <vPortExitCritical>
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055f4:	f001 fda6 	bl	8007144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e001      	b.n	800560a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800560a:	f001 fdcb 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005620:	f001 fd90 	bl	8007144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562c:	429a      	cmp	r2, r3
 800562e:	d102      	bne.n	8005636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e001      	b.n	800563a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800563a:	f001 fdb3 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 800563e:	68fb      	ldr	r3, [r7, #12]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e014      	b.n	8005682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <vQueueAddToRegistry+0x50>)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005664:	490c      	ldr	r1, [pc, #48]	; (8005698 <vQueueAddToRegistry+0x50>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <vQueueAddToRegistry+0x50>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4413      	add	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800567a:	e006      	b.n	800568a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b07      	cmp	r3, #7
 8005686:	d9e7      	bls.n	8005658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	200047a8 	.word	0x200047a8

0800569c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056ac:	f001 fd4a 	bl	8007144 <vPortEnterCritical>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b6:	b25b      	sxtb	r3, r3
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d103      	bne.n	80056c6 <vQueueWaitForMessageRestricted+0x2a>
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d103      	bne.n	80056dc <vQueueWaitForMessageRestricted+0x40>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056dc:	f001 fd62 	bl	80071a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc27 	bl	8005f44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f7ff ff26 	bl	8005548 <prvUnlockQueue>
	}
 80056fc:	bf00      	nop
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08e      	sub	sp, #56	; 0x38
 8005708:	af04      	add	r7, sp, #16
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	623b      	str	r3, [r7, #32]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xTaskCreateStatic+0x46>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	61fb      	str	r3, [r7, #28]
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800574a:	2354      	movs	r3, #84	; 0x54
 800574c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b54      	cmp	r3, #84	; 0x54
 8005752:	d00a      	beq.n	800576a <xTaskCreateStatic+0x66>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	61bb      	str	r3, [r7, #24]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800576a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01e      	beq.n	80057b0 <xTaskCreateStatic+0xac>
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005780:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2202      	movs	r2, #2
 8005786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800578a:	2300      	movs	r3, #0
 800578c:	9303      	str	r3, [sp, #12]
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	9302      	str	r3, [sp, #8]
 8005792:	f107 0314 	add.w	r3, r7, #20
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f850 	bl	8005848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057aa:	f000 f8d5 	bl	8005958 <prvAddNewTaskToReadyList>
 80057ae:	e001      	b.n	80057b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057b4:	697b      	ldr	r3, [r7, #20]
	}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	; 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b08c      	sub	sp, #48	; 0x30
 80057c2:	af04      	add	r7, sp, #16
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fdd8 	bl	8007388 <pvPortMalloc>
 80057d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00e      	beq.n	80057fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057e0:	2054      	movs	r0, #84	; 0x54
 80057e2:	f001 fdd1 	bl	8007388 <pvPortMalloc>
 80057e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
 80057f4:	e005      	b.n	8005802 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f001 fe92 	bl	8007520 <vPortFree>
 80057fc:	e001      	b.n	8005802 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	2300      	movs	r3, #0
 8005814:	9303      	str	r3, [sp, #12]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f80e 	bl	8005848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800582c:	69f8      	ldr	r0, [r7, #28]
 800582e:	f000 f893 	bl	8005958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e002      	b.n	800583e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800583e:	69bb      	ldr	r3, [r7, #24]
	}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005860:	3b01      	subs	r3, #1
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f023 0307 	bic.w	r3, r3, #7
 800586e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <prvInitialiseNewTask+0x48>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	617b      	str	r3, [r7, #20]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01f      	beq.n	80058d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	e012      	b.n	80058c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	7819      	ldrb	r1, [r3, #0]
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	3334      	adds	r3, #52	; 0x34
 80058ac:	460a      	mov	r2, r1
 80058ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3301      	adds	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2b0f      	cmp	r3, #15
 80058c6:	d9e9      	bls.n	800589c <prvInitialiseNewTask+0x54>
 80058c8:	e000      	b.n	80058cc <prvInitialiseNewTask+0x84>
			{
				break;
 80058ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d4:	e003      	b.n	80058de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	2b06      	cmp	r3, #6
 80058e2:	d901      	bls.n	80058e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058e4:	2306      	movs	r3, #6
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	2200      	movs	r2, #0
 80058f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	3304      	adds	r3, #4
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fece 	bl	80046a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	3318      	adds	r3, #24
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fec9 	bl	80046a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005912:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	f1c3 0207 	rsb	r2, r3, #7
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	2200      	movs	r2, #0
 8005928:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	69b8      	ldr	r0, [r7, #24]
 8005938:	f001 fada 	bl	8006ef0 <pxPortInitialiseStack>
 800593c:	4602      	mov	r2, r0
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800594e:	bf00      	nop
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005960:	f001 fbf0 	bl	8007144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005964:	4b2a      	ldr	r3, [pc, #168]	; (8005a10 <prvAddNewTaskToReadyList+0xb8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <prvAddNewTaskToReadyList+0xb8>)
 800596c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005976:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <prvAddNewTaskToReadyList+0xb8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d110      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005984:	f000 fc08 	bl	8006198 <prvInitialiseTaskLists>
 8005988:	e00d      	b.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800598a:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <prvAddNewTaskToReadyList+0xc0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005992:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d802      	bhi.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059a0:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 80059ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4313      	orrs	r3, r2
 80059be:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <prvAddNewTaskToReadyList+0xcc>)
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fe fe6e 	bl	80046ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059de:	f001 fbe1 	bl	80071a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvAddNewTaskToReadyList+0xc0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00e      	beq.n	8005a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d207      	bcs.n	8005a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvAddNewTaskToReadyList+0xd0>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000858 	.word	0x20000858
 8005a14:	20000758 	.word	0x20000758
 8005a18:	20000864 	.word	0x20000864
 8005a1c:	20000874 	.word	0x20000874
 8005a20:	20000860 	.word	0x20000860
 8005a24:	2000075c 	.word	0x2000075c
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <vTaskDelay+0x60>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <vTaskDelay+0x30>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60bb      	str	r3, [r7, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a5c:	f000 f880 	bl	8005b60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a60:	2100      	movs	r1, #0
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fe12 	bl	800668c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a68:	f000 f888 	bl	8005b7c <xTaskResumeAll>
 8005a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d107      	bne.n	8005a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <vTaskDelay+0x64>)
 8005a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000880 	.word	0x20000880
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aa2:	463a      	mov	r2, r7
 8005aa4:	1d39      	adds	r1, r7, #4
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fa fd6c 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	4921      	ldr	r1, [pc, #132]	; (8005b48 <vTaskStartScheduler+0xb4>)
 8005ac4:	4821      	ldr	r0, [pc, #132]	; (8005b4c <vTaskStartScheduler+0xb8>)
 8005ac6:	f7ff fe1d 	bl	8005704 <xTaskCreateStatic>
 8005aca:	4603      	mov	r3, r0
 8005acc:	4a20      	ldr	r2, [pc, #128]	; (8005b50 <vTaskStartScheduler+0xbc>)
 8005ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <vTaskStartScheduler+0xbc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e001      	b.n	8005ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ae8:	f000 fe36 	bl	8006758 <xTimerCreateTimerTask>
 8005aec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d116      	bne.n	8005b22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	613b      	str	r3, [r7, #16]
}
 8005b06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b08:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <vTaskStartScheduler+0xc0>)
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <vTaskStartScheduler+0xc4>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <vTaskStartScheduler+0xc8>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b1c:	f001 fa70 	bl	8007000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b20:	e00e      	b.n	8005b40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d10a      	bne.n	8005b40 <vTaskStartScheduler+0xac>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60fb      	str	r3, [r7, #12]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vTaskStartScheduler+0xaa>
}
 8005b40:	bf00      	nop
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	080081e0 	.word	0x080081e0
 8005b4c:	08006169 	.word	0x08006169
 8005b50:	2000087c 	.word	0x2000087c
 8005b54:	20000878 	.word	0x20000878
 8005b58:	20000864 	.word	0x20000864
 8005b5c:	2000085c 	.word	0x2000085c

08005b60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <vTaskSuspendAll+0x18>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a03      	ldr	r2, [pc, #12]	; (8005b78 <vTaskSuspendAll+0x18>)
 8005b6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20000880 	.word	0x20000880

08005b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b8a:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <xTaskResumeAll+0x114>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	603b      	str	r3, [r7, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ba8:	f001 facc 	bl	8007144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <xTaskResumeAll+0x114>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4a37      	ldr	r2, [pc, #220]	; (8005c90 <xTaskResumeAll+0x114>)
 8005bb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <xTaskResumeAll+0x114>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d161      	bne.n	8005c82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bbe:	4b35      	ldr	r3, [pc, #212]	; (8005c94 <xTaskResumeAll+0x118>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d05d      	beq.n	8005c82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bc6:	e02e      	b.n	8005c26 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b33      	ldr	r3, [pc, #204]	; (8005c98 <xTaskResumeAll+0x11c>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3318      	adds	r3, #24
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fdcd 	bl	8004774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fdc8 	bl	8004774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	2201      	movs	r2, #1
 8005bea:	409a      	lsls	r2, r3
 8005bec:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <xTaskResumeAll+0x120>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <xTaskResumeAll+0x120>)
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <xTaskResumeAll+0x124>)
 8005c04:	441a      	add	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f7fe fd54 	bl	80046ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <xTaskResumeAll+0x128>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c20:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <xTaskResumeAll+0x12c>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <xTaskResumeAll+0x11c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1cc      	bne.n	8005bc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c34:	f000 fb4e 	bl	80062d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <xTaskResumeAll+0x130>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d010      	beq.n	8005c66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c44:	f000 f846 	bl	8005cd4 <xTaskIncrementTick>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <xTaskResumeAll+0x12c>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f1      	bne.n	8005c44 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <xTaskResumeAll+0x130>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <xTaskResumeAll+0x12c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <xTaskResumeAll+0x134>)
 8005c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c82:	f001 fa8f 	bl	80071a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c86:	68bb      	ldr	r3, [r7, #8]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000880 	.word	0x20000880
 8005c94:	20000858 	.word	0x20000858
 8005c98:	20000818 	.word	0x20000818
 8005c9c:	20000860 	.word	0x20000860
 8005ca0:	2000075c 	.word	0x2000075c
 8005ca4:	20000758 	.word	0x20000758
 8005ca8:	2000086c 	.word	0x2000086c
 8005cac:	20000868 	.word	0x20000868
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <xTaskGetTickCount+0x1c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cc0:	687b      	ldr	r3, [r7, #4]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2000085c 	.word	0x2000085c

08005cd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cde:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <xTaskIncrementTick+0x144>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 808e 	bne.w	8005e04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ce8:	4b4c      	ldr	r3, [pc, #304]	; (8005e1c <xTaskIncrementTick+0x148>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	; (8005e1c <xTaskIncrementTick+0x148>)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d120      	bne.n	8005d3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cfc:	4b48      	ldr	r3, [pc, #288]	; (8005e20 <xTaskIncrementTick+0x14c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <xTaskIncrementTick+0x48>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	603b      	str	r3, [r7, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <xTaskIncrementTick+0x46>
 8005d1c:	4b40      	ldr	r3, [pc, #256]	; (8005e20 <xTaskIncrementTick+0x14c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	4b40      	ldr	r3, [pc, #256]	; (8005e24 <xTaskIncrementTick+0x150>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a3e      	ldr	r2, [pc, #248]	; (8005e20 <xTaskIncrementTick+0x14c>)
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	4a3e      	ldr	r2, [pc, #248]	; (8005e24 <xTaskIncrementTick+0x150>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <xTaskIncrementTick+0x154>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a3c      	ldr	r2, [pc, #240]	; (8005e28 <xTaskIncrementTick+0x154>)
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	f000 facb 	bl	80062d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d3e:	4b3b      	ldr	r3, [pc, #236]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d348      	bcc.n	8005dda <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d48:	4b35      	ldr	r3, [pc, #212]	; (8005e20 <xTaskIncrementTick+0x14c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d52:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d54:	f04f 32ff 	mov.w	r2, #4294967295
 8005d58:	601a      	str	r2, [r3, #0]
					break;
 8005d5a:	e03e      	b.n	8005dda <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d5c:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <xTaskIncrementTick+0x14c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d203      	bcs.n	8005d7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d74:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d7a:	e02e      	b.n	8005dda <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fcf7 	bl	8004774 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	3318      	adds	r3, #24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fcee 	bl	8004774 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <xTaskIncrementTick+0x15c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <xTaskIncrementTick+0x15c>)
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <xTaskIncrementTick+0x160>)
 8005db8:	441a      	add	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7fe fc7a 	bl	80046ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <xTaskIncrementTick+0x164>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d3b9      	bcc.n	8005d48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd8:	e7b6      	b.n	8005d48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dda:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <xTaskIncrementTick+0x164>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4914      	ldr	r1, [pc, #80]	; (8005e34 <xTaskIncrementTick+0x160>)
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d901      	bls.n	8005df6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <xTaskIncrementTick+0x168>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e004      	b.n	8005e0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e04:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <xTaskIncrementTick+0x16c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <xTaskIncrementTick+0x16c>)
 8005e0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e0e:	697b      	ldr	r3, [r7, #20]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000880 	.word	0x20000880
 8005e1c:	2000085c 	.word	0x2000085c
 8005e20:	20000810 	.word	0x20000810
 8005e24:	20000814 	.word	0x20000814
 8005e28:	20000870 	.word	0x20000870
 8005e2c:	20000878 	.word	0x20000878
 8005e30:	20000860 	.word	0x20000860
 8005e34:	2000075c 	.word	0x2000075c
 8005e38:	20000758 	.word	0x20000758
 8005e3c:	2000086c 	.word	0x2000086c
 8005e40:	20000868 	.word	0x20000868

08005e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <vTaskSwitchContext+0xa4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <vTaskSwitchContext+0xa8>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e58:	e03f      	b.n	8005eda <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <vTaskSwitchContext+0xa8>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <vTaskSwitchContext+0xac>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	fab3 f383 	clz	r3, r3
 8005e6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	f1c3 031f 	rsb	r3, r3, #31
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	491f      	ldr	r1, [pc, #124]	; (8005ef4 <vTaskSwitchContext+0xb0>)
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	607b      	str	r3, [r7, #4]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <vTaskSwitchContext+0x5a>
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <vTaskSwitchContext+0xb0>)
 8005eac:	4413      	add	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d104      	bne.n	8005ed0 <vTaskSwitchContext+0x8c>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <vTaskSwitchContext+0xb4>)
 8005ed8:	6013      	str	r3, [r2, #0]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000880 	.word	0x20000880
 8005eec:	2000086c 	.word	0x2000086c
 8005ef0:	20000860 	.word	0x20000860
 8005ef4:	2000075c 	.word	0x2000075c
 8005ef8:	20000758 	.word	0x20000758

08005efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60fb      	str	r3, [r7, #12]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vTaskPlaceOnEventList+0x44>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3318      	adds	r3, #24
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fe fbe9 	bl	8004702 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f30:	2101      	movs	r1, #1
 8005f32:	6838      	ldr	r0, [r7, #0]
 8005f34:	f000 fbaa 	bl	800668c <prvAddCurrentTaskToDelayedList>
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000758 	.word	0x20000758

08005f44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	617b      	str	r3, [r7, #20]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3318      	adds	r3, #24
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7fe fba0 	bl	80046ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f000 fb7f 	bl	800668c <prvAddCurrentTaskToDelayedList>
	}
 8005f8e:	bf00      	nop
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000758 	.word	0x20000758

08005f9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	60fb      	str	r3, [r7, #12]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3318      	adds	r3, #24
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fbd1 	bl	8004774 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd2:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <xTaskRemoveFromEventList+0xac>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d11c      	bne.n	8006014 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fbc8 	bl	8004774 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	2201      	movs	r2, #1
 8005fea:	409a      	lsls	r2, r3
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <xTaskRemoveFromEventList+0xb0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <xTaskRemoveFromEventList+0xb0>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4a13      	ldr	r2, [pc, #76]	; (8006050 <xTaskRemoveFromEventList+0xb4>)
 8006004:	441a      	add	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fe fb54 	bl	80046ba <vListInsertEnd>
 8006012:	e005      	b.n	8006020 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3318      	adds	r3, #24
 8006018:	4619      	mov	r1, r3
 800601a:	480e      	ldr	r0, [pc, #56]	; (8006054 <xTaskRemoveFromEventList+0xb8>)
 800601c:	f7fe fb4d 	bl	80046ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <xTaskRemoveFromEventList+0xbc>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d905      	bls.n	800603a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800602e:	2301      	movs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006032:	4b0a      	ldr	r3, [pc, #40]	; (800605c <xTaskRemoveFromEventList+0xc0>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e001      	b.n	800603e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800603e:	697b      	ldr	r3, [r7, #20]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000880 	.word	0x20000880
 800604c:	20000860 	.word	0x20000860
 8006050:	2000075c 	.word	0x2000075c
 8006054:	20000818 	.word	0x20000818
 8006058:	20000758 	.word	0x20000758
 800605c:	2000086c 	.word	0x2000086c

08006060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <vTaskInternalSetTimeOutState+0x24>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <vTaskInternalSetTimeOutState+0x28>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	605a      	str	r2, [r3, #4]
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	20000870 	.word	0x20000870
 8006088:	2000085c 	.word	0x2000085c

0800608c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	613b      	str	r3, [r7, #16]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	60fb      	str	r3, [r7, #12]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060ce:	f001 f839 	bl	8007144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060d2:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <xTaskCheckForTimeOut+0xbc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d102      	bne.n	80060f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e023      	b.n	800613a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <xTaskCheckForTimeOut+0xc0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d007      	beq.n	800610e <xTaskCheckForTimeOut+0x82>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	429a      	cmp	r2, r3
 8006106:	d302      	bcc.n	800610e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e015      	b.n	800613a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	429a      	cmp	r2, r3
 8006116:	d20b      	bcs.n	8006130 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff ff9b 	bl	8006060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e004      	b.n	800613a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800613a:	f001 f833 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 800613e:	69fb      	ldr	r3, [r7, #28]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	2000085c 	.word	0x2000085c
 800614c:	20000870 	.word	0x20000870

08006150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006154:	4b03      	ldr	r3, [pc, #12]	; (8006164 <vTaskMissedYield+0x14>)
 8006156:	2201      	movs	r2, #1
 8006158:	601a      	str	r2, [r3, #0]
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	2000086c 	.word	0x2000086c

08006168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006170:	f000 f852 	bl	8006218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <prvIdleTask+0x28>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d9f9      	bls.n	8006170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <prvIdleTask+0x2c>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800618c:	e7f0      	b.n	8006170 <prvIdleTask+0x8>
 800618e:	bf00      	nop
 8006190:	2000075c 	.word	0x2000075c
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	e00c      	b.n	80061be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4a12      	ldr	r2, [pc, #72]	; (80061f8 <prvInitialiseTaskLists+0x60>)
 80061b0:	4413      	add	r3, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fa54 	bl	8004660 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3301      	adds	r3, #1
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b06      	cmp	r3, #6
 80061c2:	d9ef      	bls.n	80061a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061c4:	480d      	ldr	r0, [pc, #52]	; (80061fc <prvInitialiseTaskLists+0x64>)
 80061c6:	f7fe fa4b 	bl	8004660 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061ca:	480d      	ldr	r0, [pc, #52]	; (8006200 <prvInitialiseTaskLists+0x68>)
 80061cc:	f7fe fa48 	bl	8004660 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061d0:	480c      	ldr	r0, [pc, #48]	; (8006204 <prvInitialiseTaskLists+0x6c>)
 80061d2:	f7fe fa45 	bl	8004660 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061d6:	480c      	ldr	r0, [pc, #48]	; (8006208 <prvInitialiseTaskLists+0x70>)
 80061d8:	f7fe fa42 	bl	8004660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061dc:	480b      	ldr	r0, [pc, #44]	; (800620c <prvInitialiseTaskLists+0x74>)
 80061de:	f7fe fa3f 	bl	8004660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <prvInitialiseTaskLists+0x78>)
 80061e4:	4a05      	ldr	r2, [pc, #20]	; (80061fc <prvInitialiseTaskLists+0x64>)
 80061e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <prvInitialiseTaskLists+0x7c>)
 80061ea:	4a05      	ldr	r2, [pc, #20]	; (8006200 <prvInitialiseTaskLists+0x68>)
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	2000075c 	.word	0x2000075c
 80061fc:	200007e8 	.word	0x200007e8
 8006200:	200007fc 	.word	0x200007fc
 8006204:	20000818 	.word	0x20000818
 8006208:	2000082c 	.word	0x2000082c
 800620c:	20000844 	.word	0x20000844
 8006210:	20000810 	.word	0x20000810
 8006214:	20000814 	.word	0x20000814

08006218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800621e:	e019      	b.n	8006254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006220:	f000 ff90 	bl	8007144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006224:	4b10      	ldr	r3, [pc, #64]	; (8006268 <prvCheckTasksWaitingTermination+0x50>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fa9f 	bl	8004774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <prvCheckTasksWaitingTermination+0x54>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	4a0b      	ldr	r2, [pc, #44]	; (800626c <prvCheckTasksWaitingTermination+0x54>)
 800623e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <prvCheckTasksWaitingTermination+0x58>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3b01      	subs	r3, #1
 8006246:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <prvCheckTasksWaitingTermination+0x58>)
 8006248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800624a:	f000 ffab 	bl	80071a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f810 	bl	8006274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <prvCheckTasksWaitingTermination+0x58>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e1      	bne.n	8006220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	2000082c 	.word	0x2000082c
 800626c:	20000858 	.word	0x20000858
 8006270:	20000840 	.word	0x20000840

08006274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006282:	2b00      	cmp	r3, #0
 8006284:	d108      	bne.n	8006298 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f948 	bl	8007520 <vPortFree>
				vPortFree( pxTCB );
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f945 	bl	8007520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006296:	e018      	b.n	80062ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d103      	bne.n	80062aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f93c 	bl	8007520 <vPortFree>
	}
 80062a8:	e00f      	b.n	80062ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d00a      	beq.n	80062ca <prvDeleteTCB+0x56>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60fb      	str	r3, [r7, #12]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <prvDeleteTCB+0x54>
	}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <prvResetNextTaskUnblockTime+0x38>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvResetNextTaskUnblockTime+0x3c>)
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062ec:	e008      	b.n	8006300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <prvResetNextTaskUnblockTime+0x38>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a04      	ldr	r2, [pc, #16]	; (8006310 <prvResetNextTaskUnblockTime+0x3c>)
 80062fe:	6013      	str	r3, [r2, #0]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20000810 	.word	0x20000810
 8006310:	20000878 	.word	0x20000878

08006314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <xTaskGetSchedulerState+0x34>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006322:	2301      	movs	r3, #1
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	e008      	b.n	800633a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006328:	4b08      	ldr	r3, [pc, #32]	; (800634c <xTaskGetSchedulerState+0x38>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006330:	2302      	movs	r3, #2
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	e001      	b.n	800633a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006336:	2300      	movs	r3, #0
 8006338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800633a:	687b      	ldr	r3, [r7, #4]
	}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	20000864 	.word	0x20000864
 800634c:	20000880 	.word	0x20000880

08006350 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d05e      	beq.n	8006424 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <xTaskPriorityInherit+0xe0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	429a      	cmp	r2, r3
 8006372:	d24e      	bcs.n	8006412 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	db06      	blt.n	800638a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637c:	4b2c      	ldr	r3, [pc, #176]	; (8006430 <xTaskPriorityInherit+0xe0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	f1c3 0207 	rsb	r2, r3, #7
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6959      	ldr	r1, [r3, #20]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4a26      	ldr	r2, [pc, #152]	; (8006434 <xTaskPriorityInherit+0xe4>)
 800639c:	4413      	add	r3, r2
 800639e:	4299      	cmp	r1, r3
 80063a0:	d12f      	bne.n	8006402 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe f9e4 	bl	8004774 <uxListRemove>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	2201      	movs	r2, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	43da      	mvns	r2, r3
 80063be:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <xTaskPriorityInherit+0xe8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4013      	ands	r3, r2
 80063c4:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <xTaskPriorityInherit+0xe8>)
 80063c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <xTaskPriorityInherit+0xe0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	2201      	movs	r2, #1
 80063d8:	409a      	lsls	r2, r3
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <xTaskPriorityInherit+0xe8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4313      	orrs	r3, r2
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <xTaskPriorityInherit+0xe8>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4a10      	ldr	r2, [pc, #64]	; (8006434 <xTaskPriorityInherit+0xe4>)
 80063f2:	441a      	add	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe f95d 	bl	80046ba <vListInsertEnd>
 8006400:	e004      	b.n	800640c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <xTaskPriorityInherit+0xe0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e008      	b.n	8006424 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <xTaskPriorityInherit+0xe0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	429a      	cmp	r2, r3
 800641e:	d201      	bcs.n	8006424 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006424:	68fb      	ldr	r3, [r7, #12]
	}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000758 	.word	0x20000758
 8006434:	2000075c 	.word	0x2000075c
 8006438:	20000860 	.word	0x20000860

0800643c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d06e      	beq.n	8006530 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006452:	4b3a      	ldr	r3, [pc, #232]	; (800653c <xTaskPriorityDisinherit+0x100>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d00a      	beq.n	8006472 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	60fb      	str	r3, [r7, #12]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	60bb      	str	r3, [r7, #8]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	1e5a      	subs	r2, r3, #1
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d044      	beq.n	8006530 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d140      	bne.n	8006530 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3304      	adds	r3, #4
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe f95e 	bl	8004774 <uxListRemove>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d115      	bne.n	80064ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	491f      	ldr	r1, [pc, #124]	; (8006540 <xTaskPriorityDisinherit+0x104>)
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTaskPriorityDisinherit+0xae>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	2201      	movs	r2, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43da      	mvns	r2, r3
 80064e0:	4b18      	ldr	r3, [pc, #96]	; (8006544 <xTaskPriorityDisinherit+0x108>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4013      	ands	r3, r2
 80064e6:	4a17      	ldr	r2, [pc, #92]	; (8006544 <xTaskPriorityDisinherit+0x108>)
 80064e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	f1c3 0207 	rsb	r2, r3, #7
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	2201      	movs	r2, #1
 8006504:	409a      	lsls	r2, r3
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <xTaskPriorityDisinherit+0x108>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4313      	orrs	r3, r2
 800650c:	4a0d      	ldr	r2, [pc, #52]	; (8006544 <xTaskPriorityDisinherit+0x108>)
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <xTaskPriorityDisinherit+0x104>)
 800651e:	441a      	add	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe f8c7 	bl	80046ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006530:	697b      	ldr	r3, [r7, #20]
	}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000758 	.word	0x20000758
 8006540:	2000075c 	.word	0x2000075c
 8006544:	20000860 	.word	0x20000860

08006548 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006556:	2301      	movs	r3, #1
 8006558:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d077      	beq.n	8006650 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	60fb      	str	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e002      	b.n	8006594 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	429a      	cmp	r2, r3
 800659c:	d058      	beq.n	8006650 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d153      	bne.n	8006650 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065a8:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10a      	bne.n	80065c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	60bb      	str	r3, [r7, #8]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	db04      	blt.n	80065e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f1c3 0207 	rsb	r2, r3, #7
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4a19      	ldr	r2, [pc, #100]	; (800665c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80065f6:	4413      	add	r3, r2
 80065f8:	4299      	cmp	r1, r3
 80065fa:	d129      	bne.n	8006650 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe f8b7 	bl	8004774 <uxListRemove>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	2201      	movs	r2, #1
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43da      	mvns	r2, r3
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4013      	ands	r3, r2
 800661e:	4a10      	ldr	r2, [pc, #64]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006620:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	2201      	movs	r2, #1
 8006628:	409a      	lsls	r2, r3
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	4a0b      	ldr	r2, [pc, #44]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4a06      	ldr	r2, [pc, #24]	; (800665c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006642:	441a      	add	r2, r3
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe f835 	bl	80046ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006650:	bf00      	nop
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000758 	.word	0x20000758
 800665c:	2000075c 	.word	0x2000075c
 8006660:	20000860 	.word	0x20000860

08006664 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <pvTaskIncrementMutexHeldCount+0x24>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <pvTaskIncrementMutexHeldCount+0x24>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006676:	3201      	adds	r2, #1
 8006678:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <pvTaskIncrementMutexHeldCount+0x24>)
 800667c:	681b      	ldr	r3, [r3, #0]
	}
 800667e:	4618      	mov	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000758 	.word	0x20000758

0800668c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006696:	4b29      	ldr	r3, [pc, #164]	; (800673c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f866 	bl	8004774 <uxListRemove>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43da      	mvns	r2, r3
 80066bc:	4b21      	ldr	r3, [pc, #132]	; (8006744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	4a20      	ldr	r2, [pc, #128]	; (8006744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d10a      	bne.n	80066e4 <prvAddCurrentTaskToDelayedList+0x58>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d4:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	481a      	ldr	r0, [pc, #104]	; (8006748 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066de:	f7fd ffec 	bl	80046ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066e2:	e026      	b.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4413      	add	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d209      	bcs.n	8006710 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066fc:	4b13      	ldr	r3, [pc, #76]	; (800674c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fd fffa 	bl	8004702 <vListInsert>
}
 800670e:	e010      	b.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7fd fff0 	bl	8004702 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d202      	bcs.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000085c 	.word	0x2000085c
 8006740:	20000758 	.word	0x20000758
 8006744:	20000860 	.word	0x20000860
 8006748:	20000844 	.word	0x20000844
 800674c:	20000814 	.word	0x20000814
 8006750:	20000810 	.word	0x20000810
 8006754:	20000878 	.word	0x20000878

08006758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006762:	f000 fb85 	bl	8006e70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <xTimerCreateTimerTask+0x80>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d021      	beq.n	80067b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006776:	1d3a      	adds	r2, r7, #4
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	4618      	mov	r0, r3
 8006782:	f7f9 ff1b 	bl	80005bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	9202      	str	r2, [sp, #8]
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	2302      	movs	r3, #2
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	460a      	mov	r2, r1
 8006798:	4910      	ldr	r1, [pc, #64]	; (80067dc <xTimerCreateTimerTask+0x84>)
 800679a:	4811      	ldr	r0, [pc, #68]	; (80067e0 <xTimerCreateTimerTask+0x88>)
 800679c:	f7fe ffb2 	bl	8005704 <xTaskCreateStatic>
 80067a0:	4603      	mov	r3, r0
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <xTimerCreateTimerTask+0x8c>)
 80067a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <xTimerCreateTimerTask+0x8c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067ae:	2301      	movs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	613b      	str	r3, [r7, #16]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067ce:	697b      	ldr	r3, [r7, #20]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200008b4 	.word	0x200008b4
 80067dc:	080081e8 	.word	0x080081e8
 80067e0:	08006a51 	.word	0x08006a51
 80067e4:	200008b8 	.word	0x200008b8

080067e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80067f6:	2028      	movs	r0, #40	; 0x28
 80067f8:	f000 fdc6 	bl	8007388 <pvPortMalloc>
 80067fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00d      	beq.n	8006820 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f843 	bl	80068a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006820:	697b      	ldr	r3, [r7, #20]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800682a:	b580      	push	{r7, lr}
 800682c:	b08a      	sub	sp, #40	; 0x28
 800682e:	af02      	add	r7, sp, #8
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006838:	2328      	movs	r3, #40	; 0x28
 800683a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b28      	cmp	r3, #40	; 0x28
 8006840:	d00a      	beq.n	8006858 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	61bb      	str	r3, [r7, #24]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xTimerCreateStatic+0x4c>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	617b      	str	r3, [r7, #20]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00d      	beq.n	800689c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f805 	bl	80068a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800689c:	69fb      	ldr	r3, [r7, #28]
	}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	617b      	str	r3, [r7, #20]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01e      	beq.n	8006914 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80068d6:	f000 facb 	bl	8006e70 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	3304      	adds	r3, #4
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd fed2 	bl	80046a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006908:	f043 0304 	orr.w	r3, r3, #4
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006914:	bf00      	nop
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	; 0x28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800692a:	2300      	movs	r3, #0
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	623b      	str	r3, [r7, #32]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800694a:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <xTimerGenericCommand+0x98>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02a      	beq.n	80069a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b05      	cmp	r3, #5
 8006962:	dc18      	bgt.n	8006996 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006964:	f7ff fcd6 	bl	8006314 <xTaskGetSchedulerState>
 8006968:	4603      	mov	r3, r0
 800696a:	2b02      	cmp	r3, #2
 800696c:	d109      	bne.n	8006982 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <xTimerGenericCommand+0x98>)
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	f107 0114 	add.w	r1, r7, #20
 8006976:	2300      	movs	r3, #0
 8006978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697a:	f7fe f8ab 	bl	8004ad4 <xQueueGenericSend>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24
 8006980:	e012      	b.n	80069a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <xTimerGenericCommand+0x98>)
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f107 0114 	add.w	r1, r7, #20
 800698a:	2300      	movs	r3, #0
 800698c:	2200      	movs	r2, #0
 800698e:	f7fe f8a1 	bl	8004ad4 <xQueueGenericSend>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24
 8006994:	e008      	b.n	80069a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <xTimerGenericCommand+0x98>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f107 0114 	add.w	r1, r7, #20
 800699e:	2300      	movs	r3, #0
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	f7fe f995 	bl	8004cd0 <xQueueGenericSendFromISR>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	; 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200008b4 	.word	0x200008b4

080069b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c2:	4b22      	ldr	r3, [pc, #136]	; (8006a4c <prvProcessExpiredTimer+0x94>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd fecf 	bl	8004774 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d022      	beq.n	8006a2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	18d1      	adds	r1, r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	6978      	ldr	r0, [r7, #20]
 80069f2:	f000 f8d1 	bl	8006b98 <prvInsertTimerInActiveList>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01f      	beq.n	8006a3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069fc:	2300      	movs	r3, #0
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	2100      	movs	r1, #0
 8006a06:	6978      	ldr	r0, [r7, #20]
 8006a08:	f7ff ff88 	bl	800691c <xTimerGenericCommand>
 8006a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d113      	bne.n	8006a3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a30:	f023 0301 	bic.w	r3, r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	6978      	ldr	r0, [r7, #20]
 8006a42:	4798      	blx	r3
}
 8006a44:	bf00      	nop
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200008ac 	.word	0x200008ac

08006a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a58:	f107 0308 	add.w	r3, r7, #8
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 f857 	bl	8006b10 <prvGetNextExpireTime>
 8006a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f803 	bl	8006a74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a6e:	f000 f8d5 	bl	8006c1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a72:	e7f1      	b.n	8006a58 <prvTimerTask+0x8>

08006a74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a7e:	f7ff f86f 	bl	8005b60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 f866 	bl	8006b58 <prvSampleTimeNow>
 8006a8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d130      	bne.n	8006af6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <prvProcessTimerOrBlockTask+0x3c>
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d806      	bhi.n	8006ab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aa2:	f7ff f86b 	bl	8005b7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff ff85 	bl	80069b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006aae:	e024      	b.n	8006afa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ab6:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <prvProcessTimerOrBlockTask+0x90>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <prvProcessTimerOrBlockTask+0x50>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <prvProcessTimerOrBlockTask+0x52>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <prvProcessTimerOrBlockTask+0x94>)
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f7fe fde1 	bl	800569c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ada:	f7ff f84f 	bl	8005b7c <xTaskResumeAll>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ae4:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <prvProcessTimerOrBlockTask+0x98>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy
}
 8006af4:	e001      	b.n	8006afa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006af6:	f7ff f841 	bl	8005b7c <xTaskResumeAll>
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	200008b0 	.word	0x200008b0
 8006b08:	200008b4 	.word	0x200008b4
 8006b0c:	e000ed04 	.word	0xe000ed04

08006b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <prvGetNextExpireTime+0x44>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <prvGetNextExpireTime+0x16>
 8006b22:	2201      	movs	r2, #1
 8006b24:	e000      	b.n	8006b28 <prvGetNextExpireTime+0x18>
 8006b26:	2200      	movs	r2, #0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <prvGetNextExpireTime+0x44>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	e001      	b.n	8006b44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b44:	68fb      	ldr	r3, [r7, #12]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	200008ac 	.word	0x200008ac

08006b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b60:	f7ff f8a8 	bl	8005cb4 <xTaskGetTickCount>
 8006b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <prvSampleTimeNow+0x3c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d205      	bcs.n	8006b7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b70:	f000 f91a 	bl	8006da8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b82:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <prvSampleTimeNow+0x3c>)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200008bc 	.word	0x200008bc

08006b98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d812      	bhi.n	8006be4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d302      	bcc.n	8006bd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e01b      	b.n	8006c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <prvInsertTimerInActiveList+0x7c>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7fd fd90 	bl	8004702 <vListInsert>
 8006be2:	e012      	b.n	8006c0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d206      	bcs.n	8006bfa <prvInsertTimerInActiveList+0x62>
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e007      	b.n	8006c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <prvInsertTimerInActiveList+0x80>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fd fd7c 	bl	8004702 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c0a:	697b      	ldr	r3, [r7, #20]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200008b0 	.word	0x200008b0
 8006c18:	200008ac 	.word	0x200008ac

08006c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08c      	sub	sp, #48	; 0x30
 8006c20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c22:	e0ae      	b.n	8006d82 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f2c0 80aa 	blt.w	8006d80 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fd fd99 	bl	8004774 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff ff87 	bl	8006b58 <prvSampleTimeNow>
 8006c4a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	f200 8097 	bhi.w	8006d82 <prvProcessReceivedCommands+0x166>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <prvProcessReceivedCommands+0x40>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c85 	.word	0x08006c85
 8006c68:	08006cf9 	.word	0x08006cf9
 8006c6c:	08006d0d 	.word	0x08006d0d
 8006c70:	08006d57 	.word	0x08006d57
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c85 	.word	0x08006c85
 8006c7c:	08006cf9 	.word	0x08006cf9
 8006c80:	08006d0d 	.word	0x08006d0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	18d1      	adds	r1, r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a3a      	ldr	r2, [r7, #32]
 8006ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ca4:	f7ff ff78 	bl	8006b98 <prvInsertTimerInActiveList>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d069      	beq.n	8006d82 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d05e      	beq.n	8006d82 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	441a      	add	r2, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cd6:	f7ff fe21 	bl	800691c <xTimerGenericCommand>
 8006cda:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d14f      	bne.n	8006d82 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61bb      	str	r3, [r7, #24]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8006d0a:	e03a      	b.n	8006d82 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	617b      	str	r3, [r7, #20]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	18d1      	adds	r1, r2, r3
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d50:	f7ff ff22 	bl	8006b98 <prvInsertTimerInActiveList>
					break;
 8006d54:	e015      	b.n	8006d82 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8006d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d66:	f000 fbdb 	bl	8007520 <vPortFree>
 8006d6a:	e00a      	b.n	8006d82 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d7e:	e000      	b.n	8006d82 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <prvProcessReceivedCommands+0x188>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f107 0108 	add.w	r1, r7, #8
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe f8c7 	bl	8004f20 <xQueueReceive>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f47f af45 	bne.w	8006c24 <prvProcessReceivedCommands+0x8>
	}
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200008b4 	.word	0x200008b4

08006da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dae:	e048      	b.n	8006e42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db0:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <prvSwitchTimerLists+0xc0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dba:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <prvSwitchTimerLists+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd fcd3 	bl	8004774 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02e      	beq.n	8006e42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d90e      	bls.n	8006e14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e02:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <prvSwitchTimerLists+0xc0>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fd fc78 	bl	8004702 <vListInsert>
 8006e12:	e016      	b.n	8006e42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fd7c 	bl	800691c <xTimerGenericCommand>
 8006e24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	603b      	str	r3, [r7, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <prvSwitchTimerLists+0xc0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1b1      	bne.n	8006db0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <prvSwitchTimerLists+0xc0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a04      	ldr	r2, [pc, #16]	; (8006e68 <prvSwitchTimerLists+0xc0>)
 8006e58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e5a:	4a04      	ldr	r2, [pc, #16]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	6013      	str	r3, [r2, #0]
}
 8006e60:	bf00      	nop
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200008ac 	.word	0x200008ac
 8006e6c:	200008b0 	.word	0x200008b0

08006e70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e76:	f000 f965 	bl	8007144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <prvCheckForValidListAndQueue+0x60>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d120      	bne.n	8006ec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e82:	4814      	ldr	r0, [pc, #80]	; (8006ed4 <prvCheckForValidListAndQueue+0x64>)
 8006e84:	f7fd fbec 	bl	8004660 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e88:	4813      	ldr	r0, [pc, #76]	; (8006ed8 <prvCheckForValidListAndQueue+0x68>)
 8006e8a:	f7fd fbe9 	bl	8004660 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <prvCheckForValidListAndQueue+0x6c>)
 8006e90:	4a10      	ldr	r2, [pc, #64]	; (8006ed4 <prvCheckForValidListAndQueue+0x64>)
 8006e92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e94:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <prvCheckForValidListAndQueue+0x70>)
 8006e96:	4a10      	ldr	r2, [pc, #64]	; (8006ed8 <prvCheckForValidListAndQueue+0x68>)
 8006e98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <prvCheckForValidListAndQueue+0x74>)
 8006ea0:	4a11      	ldr	r2, [pc, #68]	; (8006ee8 <prvCheckForValidListAndQueue+0x78>)
 8006ea2:	210c      	movs	r1, #12
 8006ea4:	200a      	movs	r0, #10
 8006ea6:	f7fd fcf7 	bl	8004898 <xQueueGenericCreateStatic>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <prvCheckForValidListAndQueue+0x60>)
 8006eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <prvCheckForValidListAndQueue+0x60>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <prvCheckForValidListAndQueue+0x60>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	490b      	ldr	r1, [pc, #44]	; (8006eec <prvCheckForValidListAndQueue+0x7c>)
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fbc2 	bl	8005648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ec4:	f000 f96e 	bl	80071a4 <vPortExitCritical>
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	200008b4 	.word	0x200008b4
 8006ed4:	20000884 	.word	0x20000884
 8006ed8:	20000898 	.word	0x20000898
 8006edc:	200008ac 	.word	0x200008ac
 8006ee0:	200008b0 	.word	0x200008b0
 8006ee4:	20000938 	.word	0x20000938
 8006ee8:	200008c0 	.word	0x200008c0
 8006eec:	080081f0 	.word	0x080081f0

08006ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3b04      	subs	r3, #4
 8006f00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f023 0201 	bic.w	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f20:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <pxPortInitialiseStack+0x64>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3b14      	subs	r3, #20
 8006f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3b04      	subs	r3, #4
 8006f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f06f 0202 	mvn.w	r2, #2
 8006f3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3b20      	subs	r3, #32
 8006f44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	08006f59 	.word	0x08006f59

08006f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <prvTaskExitError+0x54>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d00a      	beq.n	8006f82 <prvTaskExitError+0x2a>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <prvTaskExitError+0x28>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f96:	bf00      	nop
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0fc      	beq.n	8006f98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20000014 	.word	0x20000014

08006fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	4770      	bx	lr
 8006fcc:	f3af 8000 	nop.w

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fd8:	4808      	ldr	r0, [pc, #32]	; (8006ffc <prvPortStartFirstTask+0x24>)
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f380 8808 	msr	MSP, r0
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8814 	msr	CONTROL, r0
 8006fea:	b662      	cpsie	i
 8006fec:	b661      	cpsie	f
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	df00      	svc	0
 8006ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ffa:	bf00      	nop
 8006ffc:	e000ed08 	.word	0xe000ed08

08007000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007006:	4b46      	ldr	r3, [pc, #280]	; (8007120 <xPortStartScheduler+0x120>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a46      	ldr	r2, [pc, #280]	; (8007124 <xPortStartScheduler+0x124>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10a      	bne.n	8007026 <xPortStartScheduler+0x26>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	613b      	str	r3, [r7, #16]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007026:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <xPortStartScheduler+0x120>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a3f      	ldr	r2, [pc, #252]	; (8007128 <xPortStartScheduler+0x128>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10a      	bne.n	8007046 <xPortStartScheduler+0x46>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007046:	4b39      	ldr	r3, [pc, #228]	; (800712c <xPortStartScheduler+0x12c>)
 8007048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007068:	b2da      	uxtb	r2, r3
 800706a:	4b31      	ldr	r3, [pc, #196]	; (8007130 <xPortStartScheduler+0x130>)
 800706c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800706e:	4b31      	ldr	r3, [pc, #196]	; (8007134 <xPortStartScheduler+0x134>)
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007074:	e009      	b.n	800708a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007076:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <xPortStartScheduler+0x134>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <xPortStartScheduler+0x134>)
 800707e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d0ef      	beq.n	8007076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007096:	4b27      	ldr	r3, [pc, #156]	; (8007134 <xPortStartScheduler+0x134>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1c3 0307 	rsb	r3, r3, #7
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d00a      	beq.n	80070b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60bb      	str	r3, [r7, #8]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070b8:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <xPortStartScheduler+0x134>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <xPortStartScheduler+0x134>)
 80070c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070c2:	4b1c      	ldr	r3, [pc, #112]	; (8007134 <xPortStartScheduler+0x134>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ca:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <xPortStartScheduler+0x134>)
 80070cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070d6:	4b18      	ldr	r3, [pc, #96]	; (8007138 <xPortStartScheduler+0x138>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	; (8007138 <xPortStartScheduler+0x138>)
 80070dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <xPortStartScheduler+0x138>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a14      	ldr	r2, [pc, #80]	; (8007138 <xPortStartScheduler+0x138>)
 80070e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ee:	f000 f8dd 	bl	80072ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <xPortStartScheduler+0x13c>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070f8:	f000 f8fc 	bl	80072f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070fc:	4b10      	ldr	r3, [pc, #64]	; (8007140 <xPortStartScheduler+0x140>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0f      	ldr	r2, [pc, #60]	; (8007140 <xPortStartScheduler+0x140>)
 8007102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007108:	f7ff ff66 	bl	8006fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800710c:	f7fe fe9a 	bl	8005e44 <vTaskSwitchContext>
	prvTaskExitError();
 8007110:	f7ff ff22 	bl	8006f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	e000ed00 	.word	0xe000ed00
 8007124:	410fc271 	.word	0x410fc271
 8007128:	410fc270 	.word	0x410fc270
 800712c:	e000e400 	.word	0xe000e400
 8007130:	20000980 	.word	0x20000980
 8007134:	20000984 	.word	0x20000984
 8007138:	e000ed20 	.word	0xe000ed20
 800713c:	20000014 	.word	0x20000014
 8007140:	e000ef34 	.word	0xe000ef34

08007144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	607b      	str	r3, [r7, #4]
}
 800715c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <vPortEnterCritical+0x58>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	4a0d      	ldr	r2, [pc, #52]	; (800719c <vPortEnterCritical+0x58>)
 8007166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <vPortEnterCritical+0x58>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d10f      	bne.n	8007190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <vPortEnterCritical+0x5c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <vPortEnterCritical+0x4c>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	603b      	str	r3, [r7, #0]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <vPortEnterCritical+0x4a>
	}
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	20000014 	.word	0x20000014
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <vPortExitCritical+0x50>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <vPortExitCritical+0x24>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	607b      	str	r3, [r7, #4]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vPortExitCritical+0x50>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <vPortExitCritical+0x50>)
 80071d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <vPortExitCritical+0x50>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <vPortExitCritical+0x42>
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f383 8811 	msr	BASEPRI, r3
}
 80071e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000014 	.word	0x20000014
	...

08007200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007200:	f3ef 8009 	mrs	r0, PSP
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <pxCurrentTCBConst>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f01e 0f10 	tst.w	lr, #16
 8007210:	bf08      	it	eq
 8007212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	6010      	str	r0, [r2, #0]
 800721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007224:	f380 8811 	msr	BASEPRI, r0
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f7fe fe08 	bl	8005e44 <vTaskSwitchContext>
 8007234:	f04f 0000 	mov.w	r0, #0
 8007238:	f380 8811 	msr	BASEPRI, r0
 800723c:	bc09      	pop	{r0, r3}
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007246:	f01e 0f10 	tst.w	lr, #16
 800724a:	bf08      	it	eq
 800724c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007250:	f380 8809 	msr	PSP, r0
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst>:
 8007260:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
}
 8007280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007282:	f7fe fd27 	bl	8005cd4 <xTaskIncrementTick>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <xPortSysTickHandler+0x40>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortSetupTimerInterrupt+0x34>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <vPortSetupTimerInterrupt+0x38>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <vPortSetupTimerInterrupt+0x3c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <vPortSetupTimerInterrupt+0x40>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	099b      	lsrs	r3, r3, #6
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <vPortSetupTimerInterrupt+0x44>)
 80072ca:	3b01      	subs	r3, #1
 80072cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <vPortSetupTimerInterrupt+0x34>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	e000e010 	.word	0xe000e010
 80072e4:	e000e018 	.word	0xe000e018
 80072e8:	20000008 	.word	0x20000008
 80072ec:	10624dd3 	.word	0x10624dd3
 80072f0:	e000e014 	.word	0xe000e014

080072f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007304 <vPortEnableVFP+0x10>
 80072f8:	6801      	ldr	r1, [r0, #0]
 80072fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072fe:	6001      	str	r1, [r0, #0]
 8007300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007302:	bf00      	nop
 8007304:	e000ed88 	.word	0xe000ed88

08007308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800730e:	f3ef 8305 	mrs	r3, IPSR
 8007312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b0f      	cmp	r3, #15
 8007318:	d914      	bls.n	8007344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <vPortValidateInterruptPriority+0x70>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <vPortValidateInterruptPriority+0x74>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	7afa      	ldrb	r2, [r7, #11]
 800732a:	429a      	cmp	r2, r3
 800732c:	d20a      	bcs.n	8007344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <vPortValidateInterruptPriority+0x78>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <vPortValidateInterruptPriority+0x7c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d90a      	bls.n	800736a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	603b      	str	r3, [r7, #0]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <vPortValidateInterruptPriority+0x60>
	}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e000e3f0 	.word	0xe000e3f0
 800737c:	20000980 	.word	0x20000980
 8007380:	e000ed0c 	.word	0xe000ed0c
 8007384:	20000984 	.word	0x20000984

08007388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007394:	f7fe fbe4 	bl	8005b60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007398:	4b5b      	ldr	r3, [pc, #364]	; (8007508 <pvPortMalloc+0x180>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073a0:	f000 f920 	bl	80075e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073a4:	4b59      	ldr	r3, [pc, #356]	; (800750c <pvPortMalloc+0x184>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8093 	bne.w	80074d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01d      	beq.n	80073f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073b8:	2208      	movs	r2, #8
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d014      	beq.n	80073f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f023 0307 	bic.w	r3, r3, #7
 80073d0:	3308      	adds	r3, #8
 80073d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <pvPortMalloc+0x6c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	617b      	str	r3, [r7, #20]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d06e      	beq.n	80074d8 <pvPortMalloc+0x150>
 80073fa:	4b45      	ldr	r3, [pc, #276]	; (8007510 <pvPortMalloc+0x188>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d869      	bhi.n	80074d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007404:	4b43      	ldr	r3, [pc, #268]	; (8007514 <pvPortMalloc+0x18c>)
 8007406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007408:	4b42      	ldr	r3, [pc, #264]	; (8007514 <pvPortMalloc+0x18c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800740e:	e004      	b.n	800741a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d903      	bls.n	800742c <pvPortMalloc+0xa4>
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f1      	bne.n	8007410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800742c:	4b36      	ldr	r3, [pc, #216]	; (8007508 <pvPortMalloc+0x180>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007432:	429a      	cmp	r2, r3
 8007434:	d050      	beq.n	80074d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2208      	movs	r2, #8
 800743c:	4413      	add	r3, r2
 800743e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	2308      	movs	r3, #8
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	429a      	cmp	r2, r3
 8007456:	d91f      	bls.n	8007498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <pvPortMalloc+0xf8>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	613b      	str	r3, [r7, #16]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007492:	69b8      	ldr	r0, [r7, #24]
 8007494:	f000 f908 	bl	80076a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007498:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <pvPortMalloc+0x188>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <pvPortMalloc+0x188>)
 80074a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074a6:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <pvPortMalloc+0x188>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <pvPortMalloc+0x190>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d203      	bcs.n	80074ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074b2:	4b17      	ldr	r3, [pc, #92]	; (8007510 <pvPortMalloc+0x188>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <pvPortMalloc+0x190>)
 80074b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <pvPortMalloc+0x184>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <pvPortMalloc+0x194>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a11      	ldr	r2, [pc, #68]	; (800751c <pvPortMalloc+0x194>)
 80074d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074d8:	f7fe fb50 	bl	8005b7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <pvPortMalloc+0x174>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	60fb      	str	r3, [r7, #12]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <pvPortMalloc+0x172>
	return pvReturn;
 80074fc:	69fb      	ldr	r3, [r7, #28]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3728      	adds	r7, #40	; 0x28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20004590 	.word	0x20004590
 800750c:	200045a4 	.word	0x200045a4
 8007510:	20004594 	.word	0x20004594
 8007514:	20004588 	.word	0x20004588
 8007518:	20004598 	.word	0x20004598
 800751c:	2000459c 	.word	0x2000459c

08007520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04d      	beq.n	80075ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007532:	2308      	movs	r3, #8
 8007534:	425b      	negs	r3, r3
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <vPortFree+0xb8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <vPortFree+0x44>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60fb      	str	r3, [r7, #12]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <vPortFree+0x62>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60bb      	str	r3, [r7, #8]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <vPortFree+0xb8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01e      	beq.n	80075ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11a      	bne.n	80075ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <vPortFree+0xb8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075a8:	f7fe fada 	bl	8005b60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <vPortFree+0xbc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4413      	add	r3, r2
 80075b6:	4a09      	ldr	r2, [pc, #36]	; (80075dc <vPortFree+0xbc>)
 80075b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ba:	6938      	ldr	r0, [r7, #16]
 80075bc:	f000 f874 	bl	80076a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <vPortFree+0xc0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a06      	ldr	r2, [pc, #24]	; (80075e0 <vPortFree+0xc0>)
 80075c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ca:	f7fe fad7 	bl	8005b7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	200045a4 	.word	0x200045a4
 80075dc:	20004594 	.word	0x20004594
 80075e0:	200045a0 	.word	0x200045a0

080075e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075f0:	4b27      	ldr	r3, [pc, #156]	; (8007690 <prvHeapInit+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3307      	adds	r3, #7
 8007602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <prvHeapInit+0xac>)
 8007614:	4413      	add	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <prvHeapInit+0xb0>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <prvHeapInit+0xb0>)
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007630:	2208      	movs	r2, #8
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0307 	bic.w	r3, r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <prvHeapInit+0xb4>)
 8007644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <prvHeapInit+0xb4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <prvHeapInit+0xb4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvHeapInit+0xb4>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <prvHeapInit+0xb8>)
 8007672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <prvHeapInit+0xbc>)
 800767a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvHeapInit+0xc0>)
 800767e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	20000988 	.word	0x20000988
 8007694:	20004588 	.word	0x20004588
 8007698:	20004590 	.word	0x20004590
 800769c:	20004598 	.word	0x20004598
 80076a0:	20004594 	.word	0x20004594
 80076a4:	200045a4 	.word	0x200045a4

080076a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076b0:	4b28      	ldr	r3, [pc, #160]	; (8007754 <prvInsertBlockIntoFreeList+0xac>)
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e002      	b.n	80076bc <prvInsertBlockIntoFreeList+0x14>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d8f7      	bhi.n	80076b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d108      	bne.n	80076ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d118      	bne.n	8007730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d00d      	beq.n	8007726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e008      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e003      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d002      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20004588 	.word	0x20004588
 8007758:	20004590 	.word	0x20004590

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	; (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20000018 	.word	0x20000018

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	; (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	; (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	; (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	; (80077ac <__libc_init_array+0x44>)
 800777c:	f000 fcaa 	bl	80080d4 <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	08008270 	.word	0x08008270
 80077a4:	08008270 	.word	0x08008270
 80077a8:	08008270 	.word	0x08008270
 80077ac:	08008274 	.word	0x08008274

080077b0 <__itoa>:
 80077b0:	1e93      	subs	r3, r2, #2
 80077b2:	2b22      	cmp	r3, #34	; 0x22
 80077b4:	b510      	push	{r4, lr}
 80077b6:	460c      	mov	r4, r1
 80077b8:	d904      	bls.n	80077c4 <__itoa+0x14>
 80077ba:	2300      	movs	r3, #0
 80077bc:	700b      	strb	r3, [r1, #0]
 80077be:	461c      	mov	r4, r3
 80077c0:	4620      	mov	r0, r4
 80077c2:	bd10      	pop	{r4, pc}
 80077c4:	2a0a      	cmp	r2, #10
 80077c6:	d109      	bne.n	80077dc <__itoa+0x2c>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	da07      	bge.n	80077dc <__itoa+0x2c>
 80077cc:	232d      	movs	r3, #45	; 0x2d
 80077ce:	700b      	strb	r3, [r1, #0]
 80077d0:	4240      	negs	r0, r0
 80077d2:	2101      	movs	r1, #1
 80077d4:	4421      	add	r1, r4
 80077d6:	f000 f83b 	bl	8007850 <__utoa>
 80077da:	e7f1      	b.n	80077c0 <__itoa+0x10>
 80077dc:	2100      	movs	r1, #0
 80077de:	e7f9      	b.n	80077d4 <__itoa+0x24>

080077e0 <itoa>:
 80077e0:	f7ff bfe6 	b.w	80077b0 <__itoa>

080077e4 <memcpy>:
 80077e4:	440a      	add	r2, r1
 80077e6:	4291      	cmp	r1, r2
 80077e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ec:	d100      	bne.n	80077f0 <memcpy+0xc>
 80077ee:	4770      	bx	lr
 80077f0:	b510      	push	{r4, lr}
 80077f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fa:	4291      	cmp	r1, r2
 80077fc:	d1f9      	bne.n	80077f2 <memcpy+0xe>
 80077fe:	bd10      	pop	{r4, pc}

08007800 <memset>:
 8007800:	4402      	add	r2, r0
 8007802:	4603      	mov	r3, r0
 8007804:	4293      	cmp	r3, r2
 8007806:	d100      	bne.n	800780a <memset+0xa>
 8007808:	4770      	bx	lr
 800780a:	f803 1b01 	strb.w	r1, [r3], #1
 800780e:	e7f9      	b.n	8007804 <memset+0x4>

08007810 <siprintf>:
 8007810:	b40e      	push	{r1, r2, r3}
 8007812:	b500      	push	{lr}
 8007814:	b09c      	sub	sp, #112	; 0x70
 8007816:	ab1d      	add	r3, sp, #116	; 0x74
 8007818:	9002      	str	r0, [sp, #8]
 800781a:	9006      	str	r0, [sp, #24]
 800781c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007820:	4809      	ldr	r0, [pc, #36]	; (8007848 <siprintf+0x38>)
 8007822:	9107      	str	r1, [sp, #28]
 8007824:	9104      	str	r1, [sp, #16]
 8007826:	4909      	ldr	r1, [pc, #36]	; (800784c <siprintf+0x3c>)
 8007828:	f853 2b04 	ldr.w	r2, [r3], #4
 800782c:	9105      	str	r1, [sp, #20]
 800782e:	6800      	ldr	r0, [r0, #0]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	a902      	add	r1, sp, #8
 8007834:	f000 f8aa 	bl	800798c <_svfiprintf_r>
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	b01c      	add	sp, #112	; 0x70
 8007840:	f85d eb04 	ldr.w	lr, [sp], #4
 8007844:	b003      	add	sp, #12
 8007846:	4770      	bx	lr
 8007848:	20000018 	.word	0x20000018
 800784c:	ffff0208 	.word	0xffff0208

08007850 <__utoa>:
 8007850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007852:	4c1f      	ldr	r4, [pc, #124]	; (80078d0 <__utoa+0x80>)
 8007854:	b08b      	sub	sp, #44	; 0x2c
 8007856:	4605      	mov	r5, r0
 8007858:	460b      	mov	r3, r1
 800785a:	466e      	mov	r6, sp
 800785c:	f104 0c20 	add.w	ip, r4, #32
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	6861      	ldr	r1, [r4, #4]
 8007864:	4637      	mov	r7, r6
 8007866:	c703      	stmia	r7!, {r0, r1}
 8007868:	3408      	adds	r4, #8
 800786a:	4564      	cmp	r4, ip
 800786c:	463e      	mov	r6, r7
 800786e:	d1f7      	bne.n	8007860 <__utoa+0x10>
 8007870:	7921      	ldrb	r1, [r4, #4]
 8007872:	7139      	strb	r1, [r7, #4]
 8007874:	1e91      	subs	r1, r2, #2
 8007876:	6820      	ldr	r0, [r4, #0]
 8007878:	6038      	str	r0, [r7, #0]
 800787a:	2922      	cmp	r1, #34	; 0x22
 800787c:	f04f 0100 	mov.w	r1, #0
 8007880:	d904      	bls.n	800788c <__utoa+0x3c>
 8007882:	7019      	strb	r1, [r3, #0]
 8007884:	460b      	mov	r3, r1
 8007886:	4618      	mov	r0, r3
 8007888:	b00b      	add	sp, #44	; 0x2c
 800788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788c:	1e58      	subs	r0, r3, #1
 800788e:	4684      	mov	ip, r0
 8007890:	fbb5 f7f2 	udiv	r7, r5, r2
 8007894:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007898:	fb02 5617 	mls	r6, r2, r7, r5
 800789c:	4476      	add	r6, lr
 800789e:	460c      	mov	r4, r1
 80078a0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80078a4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80078a8:	462e      	mov	r6, r5
 80078aa:	42b2      	cmp	r2, r6
 80078ac:	f101 0101 	add.w	r1, r1, #1
 80078b0:	463d      	mov	r5, r7
 80078b2:	d9ed      	bls.n	8007890 <__utoa+0x40>
 80078b4:	2200      	movs	r2, #0
 80078b6:	545a      	strb	r2, [r3, r1]
 80078b8:	1919      	adds	r1, r3, r4
 80078ba:	1aa5      	subs	r5, r4, r2
 80078bc:	42aa      	cmp	r2, r5
 80078be:	dae2      	bge.n	8007886 <__utoa+0x36>
 80078c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80078c4:	780e      	ldrb	r6, [r1, #0]
 80078c6:	7006      	strb	r6, [r0, #0]
 80078c8:	3201      	adds	r2, #1
 80078ca:	f801 5901 	strb.w	r5, [r1], #-1
 80078ce:	e7f4      	b.n	80078ba <__utoa+0x6a>
 80078d0:	08008210 	.word	0x08008210

080078d4 <__ssputs_r>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	688e      	ldr	r6, [r1, #8]
 80078da:	429e      	cmp	r6, r3
 80078dc:	4682      	mov	sl, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	4690      	mov	r8, r2
 80078e2:	461f      	mov	r7, r3
 80078e4:	d838      	bhi.n	8007958 <__ssputs_r+0x84>
 80078e6:	898a      	ldrh	r2, [r1, #12]
 80078e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078ec:	d032      	beq.n	8007954 <__ssputs_r+0x80>
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	6909      	ldr	r1, [r1, #16]
 80078f2:	eba5 0901 	sub.w	r9, r5, r1
 80078f6:	6965      	ldr	r5, [r4, #20]
 80078f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007900:	3301      	adds	r3, #1
 8007902:	444b      	add	r3, r9
 8007904:	106d      	asrs	r5, r5, #1
 8007906:	429d      	cmp	r5, r3
 8007908:	bf38      	it	cc
 800790a:	461d      	movcc	r5, r3
 800790c:	0553      	lsls	r3, r2, #21
 800790e:	d531      	bpl.n	8007974 <__ssputs_r+0xa0>
 8007910:	4629      	mov	r1, r5
 8007912:	f000 fb39 	bl	8007f88 <_malloc_r>
 8007916:	4606      	mov	r6, r0
 8007918:	b950      	cbnz	r0, 8007930 <__ssputs_r+0x5c>
 800791a:	230c      	movs	r3, #12
 800791c:	f8ca 3000 	str.w	r3, [sl]
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007930:	6921      	ldr	r1, [r4, #16]
 8007932:	464a      	mov	r2, r9
 8007934:	f7ff ff56 	bl	80077e4 <memcpy>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	6126      	str	r6, [r4, #16]
 8007946:	6165      	str	r5, [r4, #20]
 8007948:	444e      	add	r6, r9
 800794a:	eba5 0509 	sub.w	r5, r5, r9
 800794e:	6026      	str	r6, [r4, #0]
 8007950:	60a5      	str	r5, [r4, #8]
 8007952:	463e      	mov	r6, r7
 8007954:	42be      	cmp	r6, r7
 8007956:	d900      	bls.n	800795a <__ssputs_r+0x86>
 8007958:	463e      	mov	r6, r7
 800795a:	4632      	mov	r2, r6
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	4641      	mov	r1, r8
 8007960:	f000 faa8 	bl	8007eb4 <memmove>
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	1b9b      	subs	r3, r3, r6
 800796a:	4432      	add	r2, r6
 800796c:	60a3      	str	r3, [r4, #8]
 800796e:	6022      	str	r2, [r4, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e7db      	b.n	800792c <__ssputs_r+0x58>
 8007974:	462a      	mov	r2, r5
 8007976:	f000 fb61 	bl	800803c <_realloc_r>
 800797a:	4606      	mov	r6, r0
 800797c:	2800      	cmp	r0, #0
 800797e:	d1e1      	bne.n	8007944 <__ssputs_r+0x70>
 8007980:	6921      	ldr	r1, [r4, #16]
 8007982:	4650      	mov	r0, sl
 8007984:	f000 fab0 	bl	8007ee8 <_free_r>
 8007988:	e7c7      	b.n	800791a <__ssputs_r+0x46>
	...

0800798c <_svfiprintf_r>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	4698      	mov	r8, r3
 8007992:	898b      	ldrh	r3, [r1, #12]
 8007994:	061b      	lsls	r3, r3, #24
 8007996:	b09d      	sub	sp, #116	; 0x74
 8007998:	4607      	mov	r7, r0
 800799a:	460d      	mov	r5, r1
 800799c:	4614      	mov	r4, r2
 800799e:	d50e      	bpl.n	80079be <_svfiprintf_r+0x32>
 80079a0:	690b      	ldr	r3, [r1, #16]
 80079a2:	b963      	cbnz	r3, 80079be <_svfiprintf_r+0x32>
 80079a4:	2140      	movs	r1, #64	; 0x40
 80079a6:	f000 faef 	bl	8007f88 <_malloc_r>
 80079aa:	6028      	str	r0, [r5, #0]
 80079ac:	6128      	str	r0, [r5, #16]
 80079ae:	b920      	cbnz	r0, 80079ba <_svfiprintf_r+0x2e>
 80079b0:	230c      	movs	r3, #12
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	e0d1      	b.n	8007b5e <_svfiprintf_r+0x1d2>
 80079ba:	2340      	movs	r3, #64	; 0x40
 80079bc:	616b      	str	r3, [r5, #20]
 80079be:	2300      	movs	r3, #0
 80079c0:	9309      	str	r3, [sp, #36]	; 0x24
 80079c2:	2320      	movs	r3, #32
 80079c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079cc:	2330      	movs	r3, #48	; 0x30
 80079ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b78 <_svfiprintf_r+0x1ec>
 80079d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d6:	f04f 0901 	mov.w	r9, #1
 80079da:	4623      	mov	r3, r4
 80079dc:	469a      	mov	sl, r3
 80079de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079e2:	b10a      	cbz	r2, 80079e8 <_svfiprintf_r+0x5c>
 80079e4:	2a25      	cmp	r2, #37	; 0x25
 80079e6:	d1f9      	bne.n	80079dc <_svfiprintf_r+0x50>
 80079e8:	ebba 0b04 	subs.w	fp, sl, r4
 80079ec:	d00b      	beq.n	8007a06 <_svfiprintf_r+0x7a>
 80079ee:	465b      	mov	r3, fp
 80079f0:	4622      	mov	r2, r4
 80079f2:	4629      	mov	r1, r5
 80079f4:	4638      	mov	r0, r7
 80079f6:	f7ff ff6d 	bl	80078d4 <__ssputs_r>
 80079fa:	3001      	adds	r0, #1
 80079fc:	f000 80aa 	beq.w	8007b54 <_svfiprintf_r+0x1c8>
 8007a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a02:	445a      	add	r2, fp
 8007a04:	9209      	str	r2, [sp, #36]	; 0x24
 8007a06:	f89a 3000 	ldrb.w	r3, [sl]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80a2 	beq.w	8007b54 <_svfiprintf_r+0x1c8>
 8007a10:	2300      	movs	r3, #0
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a1a:	f10a 0a01 	add.w	sl, sl, #1
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	9307      	str	r3, [sp, #28]
 8007a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a26:	931a      	str	r3, [sp, #104]	; 0x68
 8007a28:	4654      	mov	r4, sl
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a30:	4851      	ldr	r0, [pc, #324]	; (8007b78 <_svfiprintf_r+0x1ec>)
 8007a32:	f7f8 fbdd 	bl	80001f0 <memchr>
 8007a36:	9a04      	ldr	r2, [sp, #16]
 8007a38:	b9d8      	cbnz	r0, 8007a72 <_svfiprintf_r+0xe6>
 8007a3a:	06d0      	lsls	r0, r2, #27
 8007a3c:	bf44      	itt	mi
 8007a3e:	2320      	movmi	r3, #32
 8007a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a44:	0711      	lsls	r1, r2, #28
 8007a46:	bf44      	itt	mi
 8007a48:	232b      	movmi	r3, #43	; 0x2b
 8007a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a52:	2b2a      	cmp	r3, #42	; 0x2a
 8007a54:	d015      	beq.n	8007a82 <_svfiprintf_r+0xf6>
 8007a56:	9a07      	ldr	r2, [sp, #28]
 8007a58:	4654      	mov	r4, sl
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f04f 0c0a 	mov.w	ip, #10
 8007a60:	4621      	mov	r1, r4
 8007a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a66:	3b30      	subs	r3, #48	; 0x30
 8007a68:	2b09      	cmp	r3, #9
 8007a6a:	d94e      	bls.n	8007b0a <_svfiprintf_r+0x17e>
 8007a6c:	b1b0      	cbz	r0, 8007a9c <_svfiprintf_r+0x110>
 8007a6e:	9207      	str	r2, [sp, #28]
 8007a70:	e014      	b.n	8007a9c <_svfiprintf_r+0x110>
 8007a72:	eba0 0308 	sub.w	r3, r0, r8
 8007a76:	fa09 f303 	lsl.w	r3, r9, r3
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	46a2      	mov	sl, r4
 8007a80:	e7d2      	b.n	8007a28 <_svfiprintf_r+0x9c>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	1d19      	adds	r1, r3, #4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	9103      	str	r1, [sp, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfbb      	ittet	lt
 8007a8e:	425b      	neglt	r3, r3
 8007a90:	f042 0202 	orrlt.w	r2, r2, #2
 8007a94:	9307      	strge	r3, [sp, #28]
 8007a96:	9307      	strlt	r3, [sp, #28]
 8007a98:	bfb8      	it	lt
 8007a9a:	9204      	strlt	r2, [sp, #16]
 8007a9c:	7823      	ldrb	r3, [r4, #0]
 8007a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8007aa0:	d10c      	bne.n	8007abc <_svfiprintf_r+0x130>
 8007aa2:	7863      	ldrb	r3, [r4, #1]
 8007aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa6:	d135      	bne.n	8007b14 <_svfiprintf_r+0x188>
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	1d1a      	adds	r2, r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	9203      	str	r2, [sp, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bfb8      	it	lt
 8007ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab8:	3402      	adds	r4, #2
 8007aba:	9305      	str	r3, [sp, #20]
 8007abc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b88 <_svfiprintf_r+0x1fc>
 8007ac0:	7821      	ldrb	r1, [r4, #0]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	f7f8 fb93 	bl	80001f0 <memchr>
 8007aca:	b140      	cbz	r0, 8007ade <_svfiprintf_r+0x152>
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	eba0 000a 	sub.w	r0, r0, sl
 8007ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	4303      	orrs	r3, r0
 8007ada:	3401      	adds	r4, #1
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae2:	4826      	ldr	r0, [pc, #152]	; (8007b7c <_svfiprintf_r+0x1f0>)
 8007ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae8:	2206      	movs	r2, #6
 8007aea:	f7f8 fb81 	bl	80001f0 <memchr>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d038      	beq.n	8007b64 <_svfiprintf_r+0x1d8>
 8007af2:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <_svfiprintf_r+0x1f4>)
 8007af4:	bb1b      	cbnz	r3, 8007b3e <_svfiprintf_r+0x1b2>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	3307      	adds	r3, #7
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	3308      	adds	r3, #8
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b04:	4433      	add	r3, r6
 8007b06:	9309      	str	r3, [sp, #36]	; 0x24
 8007b08:	e767      	b.n	80079da <_svfiprintf_r+0x4e>
 8007b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b0e:	460c      	mov	r4, r1
 8007b10:	2001      	movs	r0, #1
 8007b12:	e7a5      	b.n	8007a60 <_svfiprintf_r+0xd4>
 8007b14:	2300      	movs	r3, #0
 8007b16:	3401      	adds	r4, #1
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f04f 0c0a 	mov.w	ip, #10
 8007b20:	4620      	mov	r0, r4
 8007b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b26:	3a30      	subs	r2, #48	; 0x30
 8007b28:	2a09      	cmp	r2, #9
 8007b2a:	d903      	bls.n	8007b34 <_svfiprintf_r+0x1a8>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0c5      	beq.n	8007abc <_svfiprintf_r+0x130>
 8007b30:	9105      	str	r1, [sp, #20]
 8007b32:	e7c3      	b.n	8007abc <_svfiprintf_r+0x130>
 8007b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b38:	4604      	mov	r4, r0
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e7f0      	b.n	8007b20 <_svfiprintf_r+0x194>
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	462a      	mov	r2, r5
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <_svfiprintf_r+0x1f8>)
 8007b46:	a904      	add	r1, sp, #16
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f3af 8000 	nop.w
 8007b4e:	1c42      	adds	r2, r0, #1
 8007b50:	4606      	mov	r6, r0
 8007b52:	d1d6      	bne.n	8007b02 <_svfiprintf_r+0x176>
 8007b54:	89ab      	ldrh	r3, [r5, #12]
 8007b56:	065b      	lsls	r3, r3, #25
 8007b58:	f53f af2c 	bmi.w	80079b4 <_svfiprintf_r+0x28>
 8007b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b5e:	b01d      	add	sp, #116	; 0x74
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <_svfiprintf_r+0x1f8>)
 8007b6c:	a904      	add	r1, sp, #16
 8007b6e:	4638      	mov	r0, r7
 8007b70:	f000 f87a 	bl	8007c68 <_printf_i>
 8007b74:	e7eb      	b.n	8007b4e <_svfiprintf_r+0x1c2>
 8007b76:	bf00      	nop
 8007b78:	08008235 	.word	0x08008235
 8007b7c:	0800823f 	.word	0x0800823f
 8007b80:	00000000 	.word	0x00000000
 8007b84:	080078d5 	.word	0x080078d5
 8007b88:	0800823b 	.word	0x0800823b

08007b8c <_printf_common>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	4616      	mov	r6, r2
 8007b92:	4699      	mov	r9, r3
 8007b94:	688a      	ldr	r2, [r1, #8]
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	bfb8      	it	lt
 8007ba0:	4613      	movlt	r3, r2
 8007ba2:	6033      	str	r3, [r6, #0]
 8007ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba8:	4607      	mov	r7, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	b10a      	cbz	r2, 8007bb2 <_printf_common+0x26>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	0699      	lsls	r1, r3, #26
 8007bb6:	bf42      	ittt	mi
 8007bb8:	6833      	ldrmi	r3, [r6, #0]
 8007bba:	3302      	addmi	r3, #2
 8007bbc:	6033      	strmi	r3, [r6, #0]
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	f015 0506 	ands.w	r5, r5, #6
 8007bc4:	d106      	bne.n	8007bd4 <_printf_common+0x48>
 8007bc6:	f104 0a19 	add.w	sl, r4, #25
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	6832      	ldr	r2, [r6, #0]
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dc26      	bgt.n	8007c22 <_printf_common+0x96>
 8007bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bd8:	1e13      	subs	r3, r2, #0
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	2301      	movne	r3, #1
 8007be0:	0692      	lsls	r2, r2, #26
 8007be2:	d42b      	bmi.n	8007c3c <_printf_common+0xb0>
 8007be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007be8:	4649      	mov	r1, r9
 8007bea:	4638      	mov	r0, r7
 8007bec:	47c0      	blx	r8
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d01e      	beq.n	8007c30 <_printf_common+0xa4>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	68e5      	ldr	r5, [r4, #12]
 8007bf6:	6832      	ldr	r2, [r6, #0]
 8007bf8:	f003 0306 	and.w	r3, r3, #6
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	bf08      	it	eq
 8007c00:	1aad      	subeq	r5, r5, r2
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	bf0c      	ite	eq
 8007c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c0c:	2500      	movne	r5, #0
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	bfc4      	itt	gt
 8007c12:	1a9b      	subgt	r3, r3, r2
 8007c14:	18ed      	addgt	r5, r5, r3
 8007c16:	2600      	movs	r6, #0
 8007c18:	341a      	adds	r4, #26
 8007c1a:	42b5      	cmp	r5, r6
 8007c1c:	d11a      	bne.n	8007c54 <_printf_common+0xc8>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e008      	b.n	8007c34 <_printf_common+0xa8>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4652      	mov	r2, sl
 8007c26:	4649      	mov	r1, r9
 8007c28:	4638      	mov	r0, r7
 8007c2a:	47c0      	blx	r8
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d103      	bne.n	8007c38 <_printf_common+0xac>
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c38:	3501      	adds	r5, #1
 8007c3a:	e7c6      	b.n	8007bca <_printf_common+0x3e>
 8007c3c:	18e1      	adds	r1, r4, r3
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	2030      	movs	r0, #48	; 0x30
 8007c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c46:	4422      	add	r2, r4
 8007c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c50:	3302      	adds	r3, #2
 8007c52:	e7c7      	b.n	8007be4 <_printf_common+0x58>
 8007c54:	2301      	movs	r3, #1
 8007c56:	4622      	mov	r2, r4
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	47c0      	blx	r8
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d0e6      	beq.n	8007c30 <_printf_common+0xa4>
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7d9      	b.n	8007c1a <_printf_common+0x8e>
	...

08007c68 <_printf_i>:
 8007c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	4691      	mov	r9, r2
 8007c70:	7e27      	ldrb	r7, [r4, #24]
 8007c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c74:	2f78      	cmp	r7, #120	; 0x78
 8007c76:	4680      	mov	r8, r0
 8007c78:	469a      	mov	sl, r3
 8007c7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c7e:	d807      	bhi.n	8007c90 <_printf_i+0x28>
 8007c80:	2f62      	cmp	r7, #98	; 0x62
 8007c82:	d80a      	bhi.n	8007c9a <_printf_i+0x32>
 8007c84:	2f00      	cmp	r7, #0
 8007c86:	f000 80d8 	beq.w	8007e3a <_printf_i+0x1d2>
 8007c8a:	2f58      	cmp	r7, #88	; 0x58
 8007c8c:	f000 80a3 	beq.w	8007dd6 <_printf_i+0x16e>
 8007c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c98:	e03a      	b.n	8007d10 <_printf_i+0xa8>
 8007c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c9e:	2b15      	cmp	r3, #21
 8007ca0:	d8f6      	bhi.n	8007c90 <_printf_i+0x28>
 8007ca2:	a001      	add	r0, pc, #4	; (adr r0, 8007ca8 <_printf_i+0x40>)
 8007ca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ca8:	08007d01 	.word	0x08007d01
 8007cac:	08007d15 	.word	0x08007d15
 8007cb0:	08007c91 	.word	0x08007c91
 8007cb4:	08007c91 	.word	0x08007c91
 8007cb8:	08007c91 	.word	0x08007c91
 8007cbc:	08007c91 	.word	0x08007c91
 8007cc0:	08007d15 	.word	0x08007d15
 8007cc4:	08007c91 	.word	0x08007c91
 8007cc8:	08007c91 	.word	0x08007c91
 8007ccc:	08007c91 	.word	0x08007c91
 8007cd0:	08007c91 	.word	0x08007c91
 8007cd4:	08007e21 	.word	0x08007e21
 8007cd8:	08007d45 	.word	0x08007d45
 8007cdc:	08007e03 	.word	0x08007e03
 8007ce0:	08007c91 	.word	0x08007c91
 8007ce4:	08007c91 	.word	0x08007c91
 8007ce8:	08007e43 	.word	0x08007e43
 8007cec:	08007c91 	.word	0x08007c91
 8007cf0:	08007d45 	.word	0x08007d45
 8007cf4:	08007c91 	.word	0x08007c91
 8007cf8:	08007c91 	.word	0x08007c91
 8007cfc:	08007e0b 	.word	0x08007e0b
 8007d00:	680b      	ldr	r3, [r1, #0]
 8007d02:	1d1a      	adds	r2, r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	600a      	str	r2, [r1, #0]
 8007d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d10:	2301      	movs	r3, #1
 8007d12:	e0a3      	b.n	8007e5c <_printf_i+0x1f4>
 8007d14:	6825      	ldr	r5, [r4, #0]
 8007d16:	6808      	ldr	r0, [r1, #0]
 8007d18:	062e      	lsls	r6, r5, #24
 8007d1a:	f100 0304 	add.w	r3, r0, #4
 8007d1e:	d50a      	bpl.n	8007d36 <_printf_i+0xce>
 8007d20:	6805      	ldr	r5, [r0, #0]
 8007d22:	600b      	str	r3, [r1, #0]
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	da03      	bge.n	8007d30 <_printf_i+0xc8>
 8007d28:	232d      	movs	r3, #45	; 0x2d
 8007d2a:	426d      	negs	r5, r5
 8007d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d30:	485e      	ldr	r0, [pc, #376]	; (8007eac <_printf_i+0x244>)
 8007d32:	230a      	movs	r3, #10
 8007d34:	e019      	b.n	8007d6a <_printf_i+0x102>
 8007d36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d3a:	6805      	ldr	r5, [r0, #0]
 8007d3c:	600b      	str	r3, [r1, #0]
 8007d3e:	bf18      	it	ne
 8007d40:	b22d      	sxthne	r5, r5
 8007d42:	e7ef      	b.n	8007d24 <_printf_i+0xbc>
 8007d44:	680b      	ldr	r3, [r1, #0]
 8007d46:	6825      	ldr	r5, [r4, #0]
 8007d48:	1d18      	adds	r0, r3, #4
 8007d4a:	6008      	str	r0, [r1, #0]
 8007d4c:	0628      	lsls	r0, r5, #24
 8007d4e:	d501      	bpl.n	8007d54 <_printf_i+0xec>
 8007d50:	681d      	ldr	r5, [r3, #0]
 8007d52:	e002      	b.n	8007d5a <_printf_i+0xf2>
 8007d54:	0669      	lsls	r1, r5, #25
 8007d56:	d5fb      	bpl.n	8007d50 <_printf_i+0xe8>
 8007d58:	881d      	ldrh	r5, [r3, #0]
 8007d5a:	4854      	ldr	r0, [pc, #336]	; (8007eac <_printf_i+0x244>)
 8007d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d5e:	bf0c      	ite	eq
 8007d60:	2308      	moveq	r3, #8
 8007d62:	230a      	movne	r3, #10
 8007d64:	2100      	movs	r1, #0
 8007d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d6a:	6866      	ldr	r6, [r4, #4]
 8007d6c:	60a6      	str	r6, [r4, #8]
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	bfa2      	ittt	ge
 8007d72:	6821      	ldrge	r1, [r4, #0]
 8007d74:	f021 0104 	bicge.w	r1, r1, #4
 8007d78:	6021      	strge	r1, [r4, #0]
 8007d7a:	b90d      	cbnz	r5, 8007d80 <_printf_i+0x118>
 8007d7c:	2e00      	cmp	r6, #0
 8007d7e:	d04d      	beq.n	8007e1c <_printf_i+0x1b4>
 8007d80:	4616      	mov	r6, r2
 8007d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d86:	fb03 5711 	mls	r7, r3, r1, r5
 8007d8a:	5dc7      	ldrb	r7, [r0, r7]
 8007d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d90:	462f      	mov	r7, r5
 8007d92:	42bb      	cmp	r3, r7
 8007d94:	460d      	mov	r5, r1
 8007d96:	d9f4      	bls.n	8007d82 <_printf_i+0x11a>
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d10b      	bne.n	8007db4 <_printf_i+0x14c>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	07df      	lsls	r7, r3, #31
 8007da0:	d508      	bpl.n	8007db4 <_printf_i+0x14c>
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	6861      	ldr	r1, [r4, #4]
 8007da6:	4299      	cmp	r1, r3
 8007da8:	bfde      	ittt	le
 8007daa:	2330      	movle	r3, #48	; 0x30
 8007dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007db4:	1b92      	subs	r2, r2, r6
 8007db6:	6122      	str	r2, [r4, #16]
 8007db8:	f8cd a000 	str.w	sl, [sp]
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	aa03      	add	r2, sp, #12
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7ff fee2 	bl	8007b8c <_printf_common>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d14c      	bne.n	8007e66 <_printf_i+0x1fe>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	b004      	add	sp, #16
 8007dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd6:	4835      	ldr	r0, [pc, #212]	; (8007eac <_printf_i+0x244>)
 8007dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	680e      	ldr	r6, [r1, #0]
 8007de0:	061f      	lsls	r7, r3, #24
 8007de2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007de6:	600e      	str	r6, [r1, #0]
 8007de8:	d514      	bpl.n	8007e14 <_printf_i+0x1ac>
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	bf44      	itt	mi
 8007dee:	f043 0320 	orrmi.w	r3, r3, #32
 8007df2:	6023      	strmi	r3, [r4, #0]
 8007df4:	b91d      	cbnz	r5, 8007dfe <_printf_i+0x196>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	f023 0320 	bic.w	r3, r3, #32
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	2310      	movs	r3, #16
 8007e00:	e7b0      	b.n	8007d64 <_printf_i+0xfc>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	f043 0320 	orr.w	r3, r3, #32
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	2378      	movs	r3, #120	; 0x78
 8007e0c:	4828      	ldr	r0, [pc, #160]	; (8007eb0 <_printf_i+0x248>)
 8007e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e12:	e7e3      	b.n	8007ddc <_printf_i+0x174>
 8007e14:	065e      	lsls	r6, r3, #25
 8007e16:	bf48      	it	mi
 8007e18:	b2ad      	uxthmi	r5, r5
 8007e1a:	e7e6      	b.n	8007dea <_printf_i+0x182>
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	e7bb      	b.n	8007d98 <_printf_i+0x130>
 8007e20:	680b      	ldr	r3, [r1, #0]
 8007e22:	6826      	ldr	r6, [r4, #0]
 8007e24:	6960      	ldr	r0, [r4, #20]
 8007e26:	1d1d      	adds	r5, r3, #4
 8007e28:	600d      	str	r5, [r1, #0]
 8007e2a:	0635      	lsls	r5, r6, #24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	d501      	bpl.n	8007e34 <_printf_i+0x1cc>
 8007e30:	6018      	str	r0, [r3, #0]
 8007e32:	e002      	b.n	8007e3a <_printf_i+0x1d2>
 8007e34:	0671      	lsls	r1, r6, #25
 8007e36:	d5fb      	bpl.n	8007e30 <_printf_i+0x1c8>
 8007e38:	8018      	strh	r0, [r3, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	4616      	mov	r6, r2
 8007e40:	e7ba      	b.n	8007db8 <_printf_i+0x150>
 8007e42:	680b      	ldr	r3, [r1, #0]
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	600a      	str	r2, [r1, #0]
 8007e48:	681e      	ldr	r6, [r3, #0]
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7f8 f9ce 	bl	80001f0 <memchr>
 8007e54:	b108      	cbz	r0, 8007e5a <_printf_i+0x1f2>
 8007e56:	1b80      	subs	r0, r0, r6
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	6863      	ldr	r3, [r4, #4]
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e64:	e7a8      	b.n	8007db8 <_printf_i+0x150>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0ab      	beq.n	8007dcc <_printf_i+0x164>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	d413      	bmi.n	8007ea2 <_printf_i+0x23a>
 8007e7a:	68e0      	ldr	r0, [r4, #12]
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	bfb8      	it	lt
 8007e82:	4618      	movlt	r0, r3
 8007e84:	e7a4      	b.n	8007dd0 <_printf_i+0x168>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d09b      	beq.n	8007dcc <_printf_i+0x164>
 8007e94:	3501      	adds	r5, #1
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	9903      	ldr	r1, [sp, #12]
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dcf2      	bgt.n	8007e86 <_printf_i+0x21e>
 8007ea0:	e7eb      	b.n	8007e7a <_printf_i+0x212>
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	f104 0619 	add.w	r6, r4, #25
 8007ea8:	e7f5      	b.n	8007e96 <_printf_i+0x22e>
 8007eaa:	bf00      	nop
 8007eac:	08008246 	.word	0x08008246
 8007eb0:	08008257 	.word	0x08008257

08007eb4 <memmove>:
 8007eb4:	4288      	cmp	r0, r1
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	eb01 0402 	add.w	r4, r1, r2
 8007ebc:	d902      	bls.n	8007ec4 <memmove+0x10>
 8007ebe:	4284      	cmp	r4, r0
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	d807      	bhi.n	8007ed4 <memmove+0x20>
 8007ec4:	1e43      	subs	r3, r0, #1
 8007ec6:	42a1      	cmp	r1, r4
 8007ec8:	d008      	beq.n	8007edc <memmove+0x28>
 8007eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ed2:	e7f8      	b.n	8007ec6 <memmove+0x12>
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	d100      	bne.n	8007ede <memmove+0x2a>
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ee6:	e7f7      	b.n	8007ed8 <memmove+0x24>

08007ee8 <_free_r>:
 8007ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eea:	2900      	cmp	r1, #0
 8007eec:	d048      	beq.n	8007f80 <_free_r+0x98>
 8007eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef2:	9001      	str	r0, [sp, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8007efa:	bfb8      	it	lt
 8007efc:	18e4      	addlt	r4, r4, r3
 8007efe:	f000 f8d3 	bl	80080a8 <__malloc_lock>
 8007f02:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <_free_r+0x9c>)
 8007f04:	9801      	ldr	r0, [sp, #4]
 8007f06:	6813      	ldr	r3, [r2, #0]
 8007f08:	4615      	mov	r5, r2
 8007f0a:	b933      	cbnz	r3, 8007f1a <_free_r+0x32>
 8007f0c:	6063      	str	r3, [r4, #4]
 8007f0e:	6014      	str	r4, [r2, #0]
 8007f10:	b003      	add	sp, #12
 8007f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f16:	f000 b8cd 	b.w	80080b4 <__malloc_unlock>
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	d90b      	bls.n	8007f36 <_free_r+0x4e>
 8007f1e:	6821      	ldr	r1, [r4, #0]
 8007f20:	1862      	adds	r2, r4, r1
 8007f22:	4293      	cmp	r3, r2
 8007f24:	bf04      	itt	eq
 8007f26:	681a      	ldreq	r2, [r3, #0]
 8007f28:	685b      	ldreq	r3, [r3, #4]
 8007f2a:	6063      	str	r3, [r4, #4]
 8007f2c:	bf04      	itt	eq
 8007f2e:	1852      	addeq	r2, r2, r1
 8007f30:	6022      	streq	r2, [r4, #0]
 8007f32:	602c      	str	r4, [r5, #0]
 8007f34:	e7ec      	b.n	8007f10 <_free_r+0x28>
 8007f36:	461a      	mov	r2, r3
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	b10b      	cbz	r3, 8007f40 <_free_r+0x58>
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d9fa      	bls.n	8007f36 <_free_r+0x4e>
 8007f40:	6811      	ldr	r1, [r2, #0]
 8007f42:	1855      	adds	r5, r2, r1
 8007f44:	42a5      	cmp	r5, r4
 8007f46:	d10b      	bne.n	8007f60 <_free_r+0x78>
 8007f48:	6824      	ldr	r4, [r4, #0]
 8007f4a:	4421      	add	r1, r4
 8007f4c:	1854      	adds	r4, r2, r1
 8007f4e:	42a3      	cmp	r3, r4
 8007f50:	6011      	str	r1, [r2, #0]
 8007f52:	d1dd      	bne.n	8007f10 <_free_r+0x28>
 8007f54:	681c      	ldr	r4, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	6053      	str	r3, [r2, #4]
 8007f5a:	4421      	add	r1, r4
 8007f5c:	6011      	str	r1, [r2, #0]
 8007f5e:	e7d7      	b.n	8007f10 <_free_r+0x28>
 8007f60:	d902      	bls.n	8007f68 <_free_r+0x80>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	e7d3      	b.n	8007f10 <_free_r+0x28>
 8007f68:	6825      	ldr	r5, [r4, #0]
 8007f6a:	1961      	adds	r1, r4, r5
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	bf04      	itt	eq
 8007f70:	6819      	ldreq	r1, [r3, #0]
 8007f72:	685b      	ldreq	r3, [r3, #4]
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	bf04      	itt	eq
 8007f78:	1949      	addeq	r1, r1, r5
 8007f7a:	6021      	streq	r1, [r4, #0]
 8007f7c:	6054      	str	r4, [r2, #4]
 8007f7e:	e7c7      	b.n	8007f10 <_free_r+0x28>
 8007f80:	b003      	add	sp, #12
 8007f82:	bd30      	pop	{r4, r5, pc}
 8007f84:	200045a8 	.word	0x200045a8

08007f88 <_malloc_r>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	1ccd      	adds	r5, r1, #3
 8007f8c:	f025 0503 	bic.w	r5, r5, #3
 8007f90:	3508      	adds	r5, #8
 8007f92:	2d0c      	cmp	r5, #12
 8007f94:	bf38      	it	cc
 8007f96:	250c      	movcc	r5, #12
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	db01      	blt.n	8007fa2 <_malloc_r+0x1a>
 8007f9e:	42a9      	cmp	r1, r5
 8007fa0:	d903      	bls.n	8007faa <_malloc_r+0x22>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6033      	str	r3, [r6, #0]
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007faa:	f000 f87d 	bl	80080a8 <__malloc_lock>
 8007fae:	4921      	ldr	r1, [pc, #132]	; (8008034 <_malloc_r+0xac>)
 8007fb0:	680a      	ldr	r2, [r1, #0]
 8007fb2:	4614      	mov	r4, r2
 8007fb4:	b99c      	cbnz	r4, 8007fde <_malloc_r+0x56>
 8007fb6:	4f20      	ldr	r7, [pc, #128]	; (8008038 <_malloc_r+0xb0>)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	b923      	cbnz	r3, 8007fc6 <_malloc_r+0x3e>
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f000 f862 	bl	8008088 <_sbrk_r>
 8007fc4:	6038      	str	r0, [r7, #0]
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 f85d 	bl	8008088 <_sbrk_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d123      	bne.n	800801a <_malloc_r+0x92>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f86c 	bl	80080b4 <__malloc_unlock>
 8007fdc:	e7e3      	b.n	8007fa6 <_malloc_r+0x1e>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	1b5b      	subs	r3, r3, r5
 8007fe2:	d417      	bmi.n	8008014 <_malloc_r+0x8c>
 8007fe4:	2b0b      	cmp	r3, #11
 8007fe6:	d903      	bls.n	8007ff0 <_malloc_r+0x68>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	441c      	add	r4, r3
 8007fec:	6025      	str	r5, [r4, #0]
 8007fee:	e004      	b.n	8007ffa <_malloc_r+0x72>
 8007ff0:	6863      	ldr	r3, [r4, #4]
 8007ff2:	42a2      	cmp	r2, r4
 8007ff4:	bf0c      	ite	eq
 8007ff6:	600b      	streq	r3, [r1, #0]
 8007ff8:	6053      	strne	r3, [r2, #4]
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f000 f85a 	bl	80080b4 <__malloc_unlock>
 8008000:	f104 000b 	add.w	r0, r4, #11
 8008004:	1d23      	adds	r3, r4, #4
 8008006:	f020 0007 	bic.w	r0, r0, #7
 800800a:	1ac2      	subs	r2, r0, r3
 800800c:	d0cc      	beq.n	8007fa8 <_malloc_r+0x20>
 800800e:	1a1b      	subs	r3, r3, r0
 8008010:	50a3      	str	r3, [r4, r2]
 8008012:	e7c9      	b.n	8007fa8 <_malloc_r+0x20>
 8008014:	4622      	mov	r2, r4
 8008016:	6864      	ldr	r4, [r4, #4]
 8008018:	e7cc      	b.n	8007fb4 <_malloc_r+0x2c>
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d0e3      	beq.n	8007fec <_malloc_r+0x64>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f82e 	bl	8008088 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d1dd      	bne.n	8007fec <_malloc_r+0x64>
 8008030:	e7cf      	b.n	8007fd2 <_malloc_r+0x4a>
 8008032:	bf00      	nop
 8008034:	200045a8 	.word	0x200045a8
 8008038:	200045ac 	.word	0x200045ac

0800803c <_realloc_r>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	4607      	mov	r7, r0
 8008040:	4614      	mov	r4, r2
 8008042:	460e      	mov	r6, r1
 8008044:	b921      	cbnz	r1, 8008050 <_realloc_r+0x14>
 8008046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800804a:	4611      	mov	r1, r2
 800804c:	f7ff bf9c 	b.w	8007f88 <_malloc_r>
 8008050:	b922      	cbnz	r2, 800805c <_realloc_r+0x20>
 8008052:	f7ff ff49 	bl	8007ee8 <_free_r>
 8008056:	4625      	mov	r5, r4
 8008058:	4628      	mov	r0, r5
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805c:	f000 f830 	bl	80080c0 <_malloc_usable_size_r>
 8008060:	42a0      	cmp	r0, r4
 8008062:	d20f      	bcs.n	8008084 <_realloc_r+0x48>
 8008064:	4621      	mov	r1, r4
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff ff8e 	bl	8007f88 <_malloc_r>
 800806c:	4605      	mov	r5, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d0f2      	beq.n	8008058 <_realloc_r+0x1c>
 8008072:	4631      	mov	r1, r6
 8008074:	4622      	mov	r2, r4
 8008076:	f7ff fbb5 	bl	80077e4 <memcpy>
 800807a:	4631      	mov	r1, r6
 800807c:	4638      	mov	r0, r7
 800807e:	f7ff ff33 	bl	8007ee8 <_free_r>
 8008082:	e7e9      	b.n	8008058 <_realloc_r+0x1c>
 8008084:	4635      	mov	r5, r6
 8008086:	e7e7      	b.n	8008058 <_realloc_r+0x1c>

08008088 <_sbrk_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_sbrk_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7f9 f9a2 	bl	80013dc <_sbrk>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_sbrk_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_sbrk_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	200047e8 	.word	0x200047e8

080080a8 <__malloc_lock>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__malloc_lock+0x8>)
 80080aa:	f000 b811 	b.w	80080d0 <__retarget_lock_acquire_recursive>
 80080ae:	bf00      	nop
 80080b0:	200047f0 	.word	0x200047f0

080080b4 <__malloc_unlock>:
 80080b4:	4801      	ldr	r0, [pc, #4]	; (80080bc <__malloc_unlock+0x8>)
 80080b6:	f000 b80c 	b.w	80080d2 <__retarget_lock_release_recursive>
 80080ba:	bf00      	nop
 80080bc:	200047f0 	.word	0x200047f0

080080c0 <_malloc_usable_size_r>:
 80080c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c4:	1f18      	subs	r0, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfbc      	itt	lt
 80080ca:	580b      	ldrlt	r3, [r1, r0]
 80080cc:	18c0      	addlt	r0, r0, r3
 80080ce:	4770      	bx	lr

080080d0 <__retarget_lock_acquire_recursive>:
 80080d0:	4770      	bx	lr

080080d2 <__retarget_lock_release_recursive>:
 80080d2:	4770      	bx	lr

080080d4 <_init>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr

080080e0 <_fini>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr
