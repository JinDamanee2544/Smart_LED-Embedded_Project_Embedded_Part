
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000637c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006520  08006520  00016520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d8  080066d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000078  08006758  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08006758  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011000  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002032  00000000  00000000  000310a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000330e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00033ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f9a  00000000  00000000  00034e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118e4  00000000  00000000  0004ae22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfbf  00000000  00000000  0005c706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea6c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d4  00000000  00000000  000ea718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006504 	.word	0x08006504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006504 	.word	0x08006504

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <set_rgbByPercentage>:
uint8_t UART6_byte;
uint8_t UART6_data[4];
uint8_t UART6_indx = 0;

void set_rgbByPercentage(uint8_t red, uint8_t green, uint8_t blue,
		uint8_t percentage) {
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	717b      	strb	r3, [r7, #5]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	713b      	strb	r3, [r7, #4]
	// LED SET UP depending on given Setting
	htim4.Instance->CCR1 = red * percentage / 100;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	793a      	ldrb	r2, [r7, #4]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <set_rgbByPercentage+0x78>)
 8000ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8000edc:	1152      	asrs	r2, r2, #5
 8000ede:	17db      	asrs	r3, r3, #31
 8000ee0:	1ad2      	subs	r2, r2, r3
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <set_rgbByPercentage+0x7c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = blue * percentage / 100;
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	793a      	ldrb	r2, [r7, #4]
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <set_rgbByPercentage+0x78>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1152      	asrs	r2, r2, #5
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad2      	subs	r2, r2, r3
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <set_rgbByPercentage+0x7c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = green * percentage / 100;
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	793a      	ldrb	r2, [r7, #4]
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <set_rgbByPercentage+0x78>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1152      	asrs	r2, r2, #5
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <set_rgbByPercentage+0x7c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc90      	pop	{r4, r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	51eb851f 	.word	0x51eb851f
 8000f2c:	20000104 	.word	0x20000104

08000f30 <hexToDec>:
uint8_t hexToDec(char *hexstring) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	// Convert Hexadecinal to Decimal Int
	return (uint8_t) strtol(hexstring, NULL, 16);
 8000f38:	2210      	movs	r2, #16
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f003 ff13 	bl	8004d68 <strtol>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <convertColor>:
void convertColor() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	// Turn HEX String in buffer to Int and assign to its correct color buffer (Circular Buffer)
	for (int i = 0; i < 7; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	e013      	b.n	8000f84 <convertColor+0x34>
		if (hexString[i] == '#' || hexString[i] == '"') {
 8000f5c:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <convertColor+0x150>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b23      	cmp	r3, #35	; 0x23
 8000f66:	d005      	beq.n	8000f74 <convertColor+0x24>
 8000f68:	4a4d      	ldr	r2, [pc, #308]	; (80010a0 <convertColor+0x150>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b22      	cmp	r3, #34	; 0x22
 8000f72:	d104      	bne.n	8000f7e <convertColor+0x2e>
			hastTagIdx = i;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <convertColor+0x154>)
 8000f7a:	701a      	strb	r2, [r3, #0]
			break;
 8000f7c:	e005      	b.n	8000f8a <convertColor+0x3a>
	for (int i = 0; i < 7; i++) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	dde8      	ble.n	8000f5c <convertColor+0xc>
		}
	}
	sprintf(redHEX, "%c%c", hexString[(hastTagIdx + 1) % 7],
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <convertColor+0x154>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <convertColor+0x158>)
 8000f92:	fb83 1302 	smull	r1, r3, r3, r2
 8000f96:	4413      	add	r3, r2
 8000f98:	1099      	asrs	r1, r3, #2
 8000f9a:	17d3      	asrs	r3, r2, #31
 8000f9c:	1ac9      	subs	r1, r1, r3
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	1a5b      	subs	r3, r3, r1
 8000fa4:	1ad1      	subs	r1, r2, r3
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <convertColor+0x150>)
 8000fa8:	5c5b      	ldrb	r3, [r3, r1]
 8000faa:	4618      	mov	r0, r3
			hexString[(hastTagIdx + 2) % 7]);
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <convertColor+0x154>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	1c9a      	adds	r2, r3, #2
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <convertColor+0x158>)
 8000fb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb8:	4413      	add	r3, r2
 8000fba:	1099      	asrs	r1, r3, #2
 8000fbc:	17d3      	asrs	r3, r2, #31
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	1ad1      	subs	r1, r2, r3
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <convertColor+0x150>)
 8000fca:	5c5b      	ldrb	r3, [r3, r1]
	sprintf(redHEX, "%c%c", hexString[(hastTagIdx + 1) % 7],
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4937      	ldr	r1, [pc, #220]	; (80010ac <convertColor+0x15c>)
 8000fd0:	4837      	ldr	r0, [pc, #220]	; (80010b0 <convertColor+0x160>)
 8000fd2:	f003 fe25 	bl	8004c20 <siprintf>
	sprintf(greenHEX, "%c%c", hexString[(hastTagIdx + 3) % 7],
 8000fd6:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <convertColor+0x154>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	1cda      	adds	r2, r3, #3
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <convertColor+0x158>)
 8000fde:	fb83 1302 	smull	r1, r3, r3, r2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	1099      	asrs	r1, r3, #2
 8000fe6:	17d3      	asrs	r3, r2, #31
 8000fe8:	1ac9      	subs	r1, r1, r3
 8000fea:	460b      	mov	r3, r1
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	1ad1      	subs	r1, r2, r3
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <convertColor+0x150>)
 8000ff4:	5c5b      	ldrb	r3, [r3, r1]
 8000ff6:	4618      	mov	r0, r3
			hexString[(hastTagIdx + 4) % 7]);
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <convertColor+0x154>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	1d1a      	adds	r2, r3, #4
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <convertColor+0x158>)
 8001000:	fb83 1302 	smull	r1, r3, r3, r2
 8001004:	4413      	add	r3, r2
 8001006:	1099      	asrs	r1, r3, #2
 8001008:	17d3      	asrs	r3, r2, #31
 800100a:	1ac9      	subs	r1, r1, r3
 800100c:	460b      	mov	r3, r1
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	1ad1      	subs	r1, r2, r3
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <convertColor+0x150>)
 8001016:	5c5b      	ldrb	r3, [r3, r1]
	sprintf(greenHEX, "%c%c", hexString[(hastTagIdx + 3) % 7],
 8001018:	4602      	mov	r2, r0
 800101a:	4924      	ldr	r1, [pc, #144]	; (80010ac <convertColor+0x15c>)
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <convertColor+0x164>)
 800101e:	f003 fdff 	bl	8004c20 <siprintf>
	sprintf(blueHEX, "%c%c", hexString[(hastTagIdx + 5) % 7],
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <convertColor+0x154>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	1d5a      	adds	r2, r3, #5
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <convertColor+0x158>)
 800102a:	fb83 1302 	smull	r1, r3, r3, r2
 800102e:	4413      	add	r3, r2
 8001030:	1099      	asrs	r1, r3, #2
 8001032:	17d3      	asrs	r3, r2, #31
 8001034:	1ac9      	subs	r1, r1, r3
 8001036:	460b      	mov	r3, r1
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a5b      	subs	r3, r3, r1
 800103c:	1ad1      	subs	r1, r2, r3
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <convertColor+0x150>)
 8001040:	5c5b      	ldrb	r3, [r3, r1]
 8001042:	4618      	mov	r0, r3
			hexString[(hastTagIdx + 6) % 7]);
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <convertColor+0x154>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	1d9a      	adds	r2, r3, #6
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <convertColor+0x158>)
 800104c:	fb83 1302 	smull	r1, r3, r3, r2
 8001050:	4413      	add	r3, r2
 8001052:	1099      	asrs	r1, r3, #2
 8001054:	17d3      	asrs	r3, r2, #31
 8001056:	1ac9      	subs	r1, r1, r3
 8001058:	460b      	mov	r3, r1
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a5b      	subs	r3, r3, r1
 800105e:	1ad1      	subs	r1, r2, r3
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <convertColor+0x150>)
 8001062:	5c5b      	ldrb	r3, [r3, r1]
	sprintf(blueHEX, "%c%c", hexString[(hastTagIdx + 5) % 7],
 8001064:	4602      	mov	r2, r0
 8001066:	4911      	ldr	r1, [pc, #68]	; (80010ac <convertColor+0x15c>)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <convertColor+0x168>)
 800106a:	f003 fdd9 	bl	8004c20 <siprintf>

	red = hexToDec(redHEX);
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <convertColor+0x160>)
 8001070:	f7ff ff5e 	bl	8000f30 <hexToDec>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <convertColor+0x16c>)
 800107a:	701a      	strb	r2, [r3, #0]
	green = hexToDec(greenHEX);
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <convertColor+0x164>)
 800107e:	f7ff ff57 	bl	8000f30 <hexToDec>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <convertColor+0x170>)
 8001088:	701a      	strb	r2, [r3, #0]
	blue = hexToDec(blueHEX);
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <convertColor+0x168>)
 800108c:	f7ff ff50 	bl	8000f30 <hexToDec>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <convertColor+0x174>)
 8001096:	701a      	strb	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000218 	.word	0x20000218
 80010a4:	20000000 	.word	0x20000000
 80010a8:	92492493 	.word	0x92492493
 80010ac:	08006520 	.word	0x08006520
 80010b0:	200000ac 	.word	0x200000ac
 80010b4:	20000150 	.word	0x20000150
 80010b8:	20000268 	.word	0x20000268
 80010bc:	20000094 	.word	0x20000094
 80010c0:	20000095 	.word	0x20000095
 80010c4:	20000096 	.word	0x20000096

080010c8 <convertPercentage>:
uint8_t convertPercentage(uint8_t *buffer) {
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	// Turn string in buffer to Int (Circular Buffer)
	bool isFind = false;
 80010d0:	2300      	movs	r3, #0
 80010d2:	72fb      	strb	r3, [r7, #11]
	bool behind = false;
 80010d4:	2300      	movs	r3, #0
 80010d6:	77fb      	strb	r3, [r7, #31]
	start = 0;
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <convertPercentage+0x148>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	e018      	b.n	8001116 <convertPercentage+0x4e>
		if (buffer[i] == '-')
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b2d      	cmp	r3, #45	; 0x2d
 80010ee:	d101      	bne.n	80010f4 <convertPercentage+0x2c>
			behind = true;
 80010f0:	2301      	movs	r3, #1
 80010f2:	77fb      	strb	r3, [r7, #31]
		if (behind && buffer[i] != '-') {
 80010f4:	7ffb      	ldrb	r3, [r7, #31]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <convertPercentage+0x48>
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b2d      	cmp	r3, #45	; 0x2d
 8001104:	d004      	beq.n	8001110 <convertPercentage+0x48>
			start = i;
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <convertPercentage+0x148>)
 800110c:	701a      	strb	r2, [r3, #0]
			break;
 800110e:	e005      	b.n	800111c <convertPercentage+0x54>
	for (int i = 0; i < 4; i++) {
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	3301      	adds	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b03      	cmp	r3, #3
 800111a:	dde3      	ble.n	80010e4 <convertPercentage+0x1c>
		}
	}
	int len = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	e00b      	b.n	800113e <convertPercentage+0x76>
		if (buffer[i] != '-')
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b2d      	cmp	r3, #45	; 0x2d
 8001130:	d002      	beq.n	8001138 <convertPercentage+0x70>
			len += 1;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; i++) {
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	3301      	adds	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b03      	cmp	r3, #3
 8001142:	ddf0      	ble.n	8001126 <convertPercentage+0x5e>
	}
	bool isEnd = false;
 8001144:	2300      	movs	r3, #0
 8001146:	72bb      	strb	r3, [r7, #10]
	int idx = start;
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <convertPercentage+0x148>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
	sum = 0;
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <convertPercentage+0x14c>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
	while (!isEnd) {
 8001154:	e049      	b.n	80011ea <convertPercentage+0x122>
		if (buffer[idx] == '-')
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b2d      	cmp	r3, #45	; 0x2d
 8001160:	d04a      	beq.n	80011f8 <convertPercentage+0x130>
			break;
		sum += (buffer[idx] - '0') * pow(10, len - 1);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3b30      	subs	r3, #48	; 0x30
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9e1 	bl	8000534 <__aeabi_i2d>
 8001172:	4604      	mov	r4, r0
 8001174:	460d      	mov	r5, r1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3b01      	subs	r3, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9da 	bl	8000534 <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	ec43 2b11 	vmov	d1, r2, r3
 8001188:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001208 <convertPercentage+0x140>
 800118c:	f004 fa04 	bl	8005598 <pow>
 8001190:	ec53 2b10 	vmov	r2, r3, d0
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff fa36 	bl	8000608 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4614      	mov	r4, r2
 80011a2:	461d      	mov	r5, r3
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <convertPercentage+0x14c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9c3 	bl	8000534 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f871 	bl	800029c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fcd1 	bl	8000b68 <__aeabi_d2iz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <convertPercentage+0x14c>)
 80011ca:	6013      	str	r3, [r2, #0]
		idx += 1;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
		idx %= 4;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	425a      	negs	r2, r3
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	bf58      	it	pl
 80011e0:	4253      	negpl	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
		len -= 1;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
	while (!isEnd) {
 80011ea:	7abb      	ldrb	r3, [r7, #10]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1af      	bne.n	8001156 <convertPercentage+0x8e>
 80011f6:	e000      	b.n	80011fa <convertPercentage+0x132>
			break;
 80011f8:	bf00      	nop
	}
	return sum;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <convertPercentage+0x14c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
}
 8001200:	4618      	mov	r0, r3
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bdb0      	pop	{r4, r5, r7, pc}
 8001208:	00000000 	.word	0x00000000
 800120c:	40240000 	.word	0x40240000
 8001210:	2000009c 	.word	0x2000009c
 8001214:	20000098 	.word	0x20000098

08001218 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	// UART1 Interrupt Receive -> HEX Color
	// UART6 Interrupt Receive -> Brightness Percentage
	if (huart->Instance == USART1) {		// RECEIVE HEX COLOR (#FF00FF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <HAL_UART_RxCpltCallback+0xa8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d11b      	bne.n	8001262 <HAL_UART_RxCpltCallback+0x4a>
		if (UART1_indx == 7) {
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_UART_RxCpltCallback+0xac>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d102      	bne.n	8001238 <HAL_UART_RxCpltCallback+0x20>
			UART1_indx = 0;
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_UART_RxCpltCallback+0xac>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
		}
		UART1_data[UART1_indx] = UART1_byte;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_UART_RxCpltCallback+0xac>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_UART_RxCpltCallback+0xb0>)
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_UART_RxCpltCallback+0xb4>)
 8001244:	5499      	strb	r1, [r3, r2]
		hexString[UART1_indx] = UART1_byte;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_UART_RxCpltCallback+0xac>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_UART_RxCpltCallback+0xb0>)
 800124e:	7819      	ldrb	r1, [r3, #0]
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_UART_RxCpltCallback+0xb8>)
 8001252:	5499      	strb	r1, [r3, r2]
		UART1_indx++;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_UART_RxCpltCallback+0xac>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_UART_RxCpltCallback+0xac>)
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e01f      	b.n	80012a2 <HAL_UART_RxCpltCallback+0x8a>

	} else if (huart->Instance == USART6) { // RECEIVE BRIGHNESS (0-100)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <HAL_UART_RxCpltCallback+0xbc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d11a      	bne.n	80012a2 <HAL_UART_RxCpltCallback+0x8a>
		if (UART6_indx == 4) {
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_UART_RxCpltCallback+0xc0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d102      	bne.n	800127a <HAL_UART_RxCpltCallback+0x62>
			UART6_indx = 0;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_UART_RxCpltCallback+0xc0>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
		}
		UART6_data[UART6_indx] = UART6_byte;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_UART_RxCpltCallback+0xc0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_UART_RxCpltCallback+0xc4>)
 8001282:	7819      	ldrb	r1, [r3, #0]
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_UART_RxCpltCallback+0xc8>)
 8001286:	5499      	strb	r1, [r3, r2]
		brightness[UART6_indx] = UART6_byte;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_UART_RxCpltCallback+0xc0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_UART_RxCpltCallback+0xc4>)
 8001290:	7819      	ldrb	r1, [r3, #0]
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_UART_RxCpltCallback+0xcc>)
 8001294:	5499      	strb	r1, [r3, r2]
		UART6_indx++;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_UART_RxCpltCallback+0xc0>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_UART_RxCpltCallback+0xc0>)
 80012a0:	701a      	strb	r2, [r3, #0]
	}
	// Receive next Interrupt
	HAL_UART_Receive_IT(&huart1, &UART1_byte, 1);
 80012a2:	2201      	movs	r2, #1
 80012a4:	4908      	ldr	r1, [pc, #32]	; (80012c8 <HAL_UART_RxCpltCallback+0xb0>)
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_UART_RxCpltCallback+0xd0>)
 80012a8:	f002 fd9f 	bl	8003dea <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &UART6_byte, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	490b      	ldr	r1, [pc, #44]	; (80012dc <HAL_UART_RxCpltCallback+0xc4>)
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <HAL_UART_RxCpltCallback+0xd4>)
 80012b2:	f002 fd9a 	bl	8003dea <HAL_UART_Receive_IT>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40011000 	.word	0x40011000
 80012c4:	2000009d 	.word	0x2000009d
 80012c8:	2000014d 	.word	0x2000014d
 80012cc:	200001cc 	.word	0x200001cc
 80012d0:	20000218 	.word	0x20000218
 80012d4:	40011400 	.word	0x40011400
 80012d8:	2000009e 	.word	0x2000009e
 80012dc:	2000014c 	.word	0x2000014c
 80012e0:	2000026c 	.word	0x2000026c
 80012e4:	20000264 	.word	0x20000264
 80012e8:	20000188 	.word	0x20000188
 80012ec:	200001d4 	.word	0x200001d4

080012f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012f6:	f000 fced 	bl	8001cd4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012fa:	f000 f873 	bl	80013e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012fe:	f000 fa15 	bl	800172c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001302:	f000 f9bf 	bl	8001684 <MX_USART2_UART_Init>
	MX_TIM4_Init();
 8001306:	f000 f907 	bl	8001518 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 800130a:	f000 f991 	bl	8001630 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800130e:	f000 f9e3 	bl	80016d8 <MX_USART6_UART_Init>
	MX_I2C3_Init();
 8001312:	f000 f8d3 	bl	80014bc <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	// TIMER FOR BLINKING LED

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// RED
 8001316:	2100      	movs	r1, #0
 8001318:	4825      	ldr	r0, [pc, #148]	; (80013b0 <main+0xc0>)
 800131a:	f001 ff13 	bl	8003144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// GREEN
 800131e:	2108      	movs	r1, #8
 8001320:	4823      	ldr	r0, [pc, #140]	; (80013b0 <main+0xc0>)
 8001322:	f001 ff0f 	bl	8003144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	// BLUE
 8001326:	2104      	movs	r1, #4
 8001328:	4821      	ldr	r0, [pc, #132]	; (80013b0 <main+0xc0>)
 800132a:	f001 ff0b 	bl	8003144 <HAL_TIM_PWM_Start>

	// Receive next UART Interrupt
	HAL_UART_Receive_IT(&huart1, &UART1_byte, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	4920      	ldr	r1, [pc, #128]	; (80013b4 <main+0xc4>)
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <main+0xc8>)
 8001334:	f002 fd59 	bl	8003dea <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &UART6_byte, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	4920      	ldr	r1, [pc, #128]	; (80013bc <main+0xcc>)
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <main+0xd0>)
 800133e:	f002 fd54 	bl	8003dea <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		// PREP FOR COLOR (it'll set up red/green/blue parameter that you see below)
		convertColor();
 8001342:	f7ff fe05 	bl	8000f50 <convertColor>

		// PREP FOR PERCENTAGE
		percentage = convertPercentage(brightness);
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <main+0xd4>)
 8001348:	f7ff febe 	bl	80010c8 <convertPercentage>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <main+0xd8>)
 8001352:	701a      	strb	r2, [r3, #0]

		// TERMINAL CHECKING
		sprintf(termainalBuffer, "R : %d G: %d B: %d P : %d\r\n", red, green,
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <main+0xdc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <main+0xe0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <main+0xe4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <main+0xd8>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	4919      	ldr	r1, [pc, #100]	; (80013d8 <main+0xe8>)
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <main+0xec>)
 8001376:	f003 fc53 	bl	8004c20 <siprintf>
				blue, percentage);
		HAL_UART_Transmit(&huart2, termainalBuffer, strlen(termainalBuffer),
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <main+0xec>)
 800137c:	f7fe ff30 	bl	80001e0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001388:	4914      	ldr	r1, [pc, #80]	; (80013dc <main+0xec>)
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <main+0xf0>)
 800138c:	f002 fc9b 	bl	8003cc6 <HAL_UART_Transmit>
				1000);

		// SET UP LED BY FOLLOWING VALUE
		set_rgbByPercentage(red, green, blue, percentage);
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <main+0xdc>)
 8001392:	7818      	ldrb	r0, [r3, #0]
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <main+0xe0>)
 8001396:	7819      	ldrb	r1, [r3, #0]
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <main+0xe4>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <main+0xd8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f7ff fd86 	bl	8000eb0 <set_rgbByPercentage>

		HAL_Delay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a8:	f000 fd06 	bl	8001db8 <HAL_Delay>
	while (1) {
 80013ac:	e7c9      	b.n	8001342 <main+0x52>
 80013ae:	bf00      	nop
 80013b0:	20000104 	.word	0x20000104
 80013b4:	2000014d 	.word	0x2000014d
 80013b8:	20000188 	.word	0x20000188
 80013bc:	2000014c 	.word	0x2000014c
 80013c0:	200001d4 	.word	0x200001d4
 80013c4:	20000264 	.word	0x20000264
 80013c8:	20000097 	.word	0x20000097
 80013cc:	20000094 	.word	0x20000094
 80013d0:	20000095 	.word	0x20000095
 80013d4:	20000096 	.word	0x20000096
 80013d8:	08006528 	.word	0x08006528
 80013dc:	20000154 	.word	0x20000154
 80013e0:	20000220 	.word	0x20000220

080013e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	; 0x50
 80013e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	2230      	movs	r2, #48	; 0x30
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fc0c 	bl	8004c10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <SystemClock_Config+0xd0>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <SystemClock_Config+0xd0>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <SystemClock_Config+0xd0>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <SystemClock_Config+0xd4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <SystemClock_Config+0xd4>)
 8001432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <SystemClock_Config+0xd4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	2301      	movs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144c:	2310      	movs	r3, #16
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001450:	2302      	movs	r3, #2
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001454:	2300      	movs	r3, #0
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001458:	2310      	movs	r3, #16
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800145c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001462:	2304      	movs	r3, #4
 8001464:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001466:	2307      	movs	r3, #7
 8001468:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f94c 	bl	800270c <HAL_RCC_OscConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x9a>
		Error_Handler();
 800147a:	f000 f9c5 	bl	8001808 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2102      	movs	r1, #2
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fbae 	bl	8002bfc <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xc6>
		Error_Handler();
 80014a6:	f000 f9af 	bl	8001808 <Error_Handler>
	}
}
 80014aa:	bf00      	nop
 80014ac:	3750      	adds	r7, #80	; 0x50
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000

080014bc <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C3_Init+0x50>)
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <MX_I2C3_Init+0x54>)
 80014c4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_I2C3_Init+0x50>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_I2C3_Init+0x58>)
 80014ca:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C3_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 200;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C3_Init+0x50>)
 80014d4:	22c8      	movs	r2, #200	; 0xc8
 80014d6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_I2C3_Init+0x50>)
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_I2C3_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C3_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_I2C3_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C3_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C3_Init+0x50>)
 80014fa:	f000 ffc3 	bl	8002484 <HAL_I2C_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8001504:	f000 f980 	bl	8001808 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200000b0 	.word	0x200000b0
 8001510:	40005c00 	.word	0x40005c00
 8001514:	000186a0 	.word	0x000186a0

08001518 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	; 0x38
 800151c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800151e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <MX_TIM4_Init+0x110>)
 800154a:	4a38      	ldr	r2, [pc, #224]	; (800162c <MX_TIM4_Init+0x114>)
 800154c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84;
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <MX_TIM4_Init+0x110>)
 8001550:	2254      	movs	r2, #84	; 0x54
 8001552:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b34      	ldr	r3, [pc, #208]	; (8001628 <MX_TIM4_Init+0x110>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 3906;
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <MX_TIM4_Init+0x110>)
 800155c:	f640 7242 	movw	r2, #3906	; 0xf42
 8001560:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <MX_TIM4_Init+0x110>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <MX_TIM4_Init+0x110>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800156e:	482e      	ldr	r0, [pc, #184]	; (8001628 <MX_TIM4_Init+0x110>)
 8001570:	f001 fd40 	bl	8002ff4 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM4_Init+0x66>
		Error_Handler();
 800157a:	f000 f945 	bl	8001808 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001588:	4619      	mov	r1, r3
 800158a:	4827      	ldr	r0, [pc, #156]	; (8001628 <MX_TIM4_Init+0x110>)
 800158c:	f001 ff4c 	bl	8003428 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x82>
		Error_Handler();
 8001596:	f000 f937 	bl	8001808 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800159a:	4823      	ldr	r0, [pc, #140]	; (8001628 <MX_TIM4_Init+0x110>)
 800159c:	f001 fd79 	bl	8003092 <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0x92>
		Error_Handler();
 80015a6:	f000 f92f 	bl	8001808 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	481b      	ldr	r0, [pc, #108]	; (8001628 <MX_TIM4_Init+0x110>)
 80015ba:	f002 fac9 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80015c4:	f000 f920 	bl	8001808 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2360      	movs	r3, #96	; 0x60
 80015ca:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4812      	ldr	r0, [pc, #72]	; (8001628 <MX_TIM4_Init+0x110>)
 80015e0:	f001 fe60 	bl	80032a4 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80015ea:	f000 f90d 	bl	8001808 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2204      	movs	r2, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <MX_TIM4_Init+0x110>)
 80015f6:	f001 fe55 	bl	80032a4 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001600:	f000 f902 	bl	8001808 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2208      	movs	r2, #8
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <MX_TIM4_Init+0x110>)
 800160c:	f001 fe4a 	bl	80032a4 <HAL_TIM_PWM_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM4_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8001616:	f000 f8f7 	bl	8001808 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <MX_TIM4_Init+0x110>)
 800161c:	f000 f9ae 	bl	800197c <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000104 	.word	0x20000104
 800162c:	40000800 	.word	0x40000800

08001630 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_USART1_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USART1_UART_Init+0x4c>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART1_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001668:	f002 fae0 	bl	8003c2c <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001672:	f000 f8c9 	bl	8001808 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000188 	.word	0x20000188
 8001680:	40011000 	.word	0x40011000

08001684 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f002 fab6 	bl	8003c2c <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80016c6:	f000 f89f 	bl	8001808 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000220 	.word	0x20000220
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_USART6_UART_Init+0x50>)
 80016e0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART6_UART_Init+0x4c>)
 8001710:	f002 fa8c 	bl	8003c2c <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800171a:	f000 f875 	bl	8001808 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001d4 	.word	0x200001d4
 8001728:	40011400 	.word	0x40011400

0800172c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_GPIO_Init+0xd0>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a25      	ldr	r2, [pc, #148]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4812      	ldr	r0, [pc, #72]	; (8001800 <MX_GPIO_Init+0xd4>)
 80017b8:	f000 fe4a 	bl	8002450 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_GPIO_Init+0xd8>)
 80017d4:	f000 fcb8 	bl	8002148 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80017d8:	2320      	movs	r3, #32
 80017da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_GPIO_Init+0xd4>)
 80017f0:	f000 fcaa 	bl	8002148 <HAL_GPIO_Init>

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020800 	.word	0x40020800

08001808 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001852:	2006      	movs	r0, #6
 8001854:	f000 fba4 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a29      	ldr	r2, [pc, #164]	; (8001928 <HAL_I2C_MspInit+0xc4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d14b      	bne.n	800191e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_I2C_MspInit+0xc8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a27      	ldr	r2, [pc, #156]	; (800192c <HAL_I2C_MspInit+0xc8>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_I2C_MspInit+0xc8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_I2C_MspInit+0xc8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_I2C_MspInit+0xc8>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_I2C_MspInit+0xc8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c4:	2312      	movs	r3, #18
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018d0:	2304      	movs	r3, #4
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <HAL_I2C_MspInit+0xcc>)
 80018dc:	f000 fc34 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018f2:	2304      	movs	r3, #4
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <HAL_I2C_MspInit+0xd0>)
 80018fe:	f000 fc23 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_I2C_MspInit+0xc8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_I2C_MspInit+0xc8>)
 800190c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_I2C_MspInit+0xc8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40005c00 	.word	0x40005c00
 800192c:	40023800 	.word	0x40023800
 8001930:	40020800 	.word	0x40020800
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10d      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_TIM_Base_MspInit+0x40>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_TIM_Base_MspInit+0x40>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_TIM_Base_MspInit+0x40>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40000800 	.word	0x40000800
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_TIM_MspPostInit+0x68>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d11e      	bne.n	80019dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_TIM_MspPostInit+0x6c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_TIM_MspPostInit+0x6c>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_TIM_MspPostInit+0x6c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80019ba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_TIM_MspPostInit+0x70>)
 80019d8:	f000 fbb6 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40000800 	.word	0x40000800
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_UART_MspInit+0x16c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d135      	bne.n	8001a7e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	483f      	ldr	r0, [pc, #252]	; (8001b64 <HAL_UART_MspInit+0x174>)
 8001a68:	f000 fb6e 	bl	8002148 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2025      	movs	r0, #37	; 0x25
 8001a72:	f000 faa0 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a76:	2025      	movs	r0, #37	; 0x25
 8001a78:	f000 fab9 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a7c:	e06a      	b.n	8001b54 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a39      	ldr	r2, [pc, #228]	; (8001b68 <HAL_UART_MspInit+0x178>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d12c      	bne.n	8001ae2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a2c      	ldr	r2, [pc, #176]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4822      	ldr	r0, [pc, #136]	; (8001b64 <HAL_UART_MspInit+0x174>)
 8001adc:	f000 fb34 	bl	8002148 <HAL_GPIO_Init>
}
 8001ae0:	e038      	b.n	8001b54 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_UART_MspInit+0x17c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d133      	bne.n	8001b54 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	6453      	str	r3, [r2, #68]	; 0x44
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_MspInit+0x170>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b34:	2308      	movs	r3, #8
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <HAL_UART_MspInit+0x180>)
 8001b40:	f000 fb02 	bl	8002148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	2047      	movs	r0, #71	; 0x47
 8001b4a:	f000 fa34 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b4e:	2047      	movs	r0, #71	; 0x47
 8001b50:	f000 fa4d 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40011400 	.word	0x40011400
 8001b70:	40020800 	.word	0x40020800

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 f8da 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <USART1_IRQHandler+0x10>)
 8001bce:	f002 f93d 	bl	8003e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000188 	.word	0x20000188

08001bdc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <USART6_IRQHandler+0x10>)
 8001be2:	f002 f933 	bl	8003e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200001d4 	.word	0x200001d4

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f002 ffcc 	bl	8004bbc <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20018000 	.word	0x20018000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	200000a0 	.word	0x200000a0
 8001c58:	20000288 	.word	0x20000288

08001c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c86:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c9c:	4c0b      	ldr	r4, [pc, #44]	; (8001ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001caa:	f7ff ffd7 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f002 ff8b 	bl	8004bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff fb1d 	bl	80012f0 <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cc4:	080066e0 	.word	0x080066e0
  ldr r2, =_sbss
 8001cc8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ccc:	20000284 	.word	0x20000284

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_Init+0x40>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_Init+0x40>)
 8001cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_Init+0x40>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f94f 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f808 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff fd84 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_InitTick+0x54>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x58>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f967 	bl	800200a <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 f92f 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_InitTick+0x5c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	20000008 	.word	0x20000008

08001d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_IncTick+0x20>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x24>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_IncTick+0x24>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000000c 	.word	0x2000000c
 8001d9c:	20000270 	.word	0x20000270

08001da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_GetTick+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000270 	.word	0x20000270

08001db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff ffee 	bl	8001da0 <HAL_GetTick>
 8001dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d005      	beq.n	8001dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_Delay+0x44>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dde:	bf00      	nop
 8001de0:	f7ff ffde 	bl	8001da0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d8f7      	bhi.n	8001de0 <HAL_Delay+0x28>
  {
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000000c 	.word	0x2000000c

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff8e 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff29 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff3e 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff8e 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff31 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff feb6 	bl	8001da0 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d008      	beq.n	8002054 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e052      	b.n	80020fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0216 	bic.w	r2, r2, #22
 8002062:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002072:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <HAL_DMA_Abort+0x62>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0208 	bic.w	r2, r2, #8
 8002092:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a4:	e013      	b.n	80020ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a6:	f7ff fe7b 	bl	8001da0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d90c      	bls.n	80020ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2203      	movs	r2, #3
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e015      	b.n	80020fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e4      	bne.n	80020a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	223f      	movs	r2, #63	; 0x3f
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e00c      	b.n	800213a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2205      	movs	r2, #5
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e159      	b.n	8002418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8148 	bne.w	8002412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a2 	beq.w	8002412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b57      	ldr	r3, [pc, #348]	; (8002430 <HAL_GPIO_Init+0x2e8>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a56      	ldr	r2, [pc, #344]	; (8002430 <HAL_GPIO_Init+0x2e8>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b54      	ldr	r3, [pc, #336]	; (8002430 <HAL_GPIO_Init+0x2e8>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_GPIO_Init+0x2ec>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a49      	ldr	r2, [pc, #292]	; (8002438 <HAL_GPIO_Init+0x2f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x202>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_GPIO_Init+0x2f4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x1fe>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a47      	ldr	r2, [pc, #284]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x1fa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a46      	ldr	r2, [pc, #280]	; (8002444 <HAL_GPIO_Init+0x2fc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x1f6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a45      	ldr	r2, [pc, #276]	; (8002448 <HAL_GPIO_Init+0x300>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x1f2>
 8002336:	2304      	movs	r3, #4
 8002338:	e008      	b.n	800234c <HAL_GPIO_Init+0x204>
 800233a:	2307      	movs	r3, #7
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x204>
 800233e:	2303      	movs	r3, #3
 8002340:	e004      	b.n	800234c <HAL_GPIO_Init+0x204>
 8002342:	2302      	movs	r3, #2
 8002344:	e002      	b.n	800234c <HAL_GPIO_Init+0x204>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_GPIO_Init+0x204>
 800234a:	2300      	movs	r3, #0
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	f002 0203 	and.w	r2, r2, #3
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4093      	lsls	r3, r2
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235c:	4935      	ldr	r1, [pc, #212]	; (8002434 <HAL_GPIO_Init+0x2ec>)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	3302      	adds	r3, #2
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_GPIO_Init+0x304>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <HAL_GPIO_Init+0x304>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_GPIO_Init+0x304>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b8:	4a24      	ldr	r2, [pc, #144]	; (800244c <HAL_GPIO_Init+0x304>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_GPIO_Init+0x304>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a1a      	ldr	r2, [pc, #104]	; (800244c <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_GPIO_Init+0x304>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	f67f aea2 	bls.w	8002164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40013800 	.word	0x40013800
 8002438:	40020000 	.word	0x40020000
 800243c:	40020400 	.word	0x40020400
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00
 8002448:	40021000 	.word	0x40021000
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e12b      	b.n	80026ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff f9da 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024e8:	f000 fd5c 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a81      	ldr	r2, [pc, #516]	; (80026f8 <HAL_I2C_Init+0x274>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d807      	bhi.n	8002508 <HAL_I2C_Init+0x84>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a80      	ldr	r2, [pc, #512]	; (80026fc <HAL_I2C_Init+0x278>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e006      	b.n	8002516 <HAL_I2C_Init+0x92>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a7d      	ldr	r2, [pc, #500]	; (8002700 <HAL_I2C_Init+0x27c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0e7      	b.n	80026ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a78      	ldr	r2, [pc, #480]	; (8002704 <HAL_I2C_Init+0x280>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_I2C_Init+0x274>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d802      	bhi.n	8002558 <HAL_I2C_Init+0xd4>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	e009      	b.n	800256c <HAL_I2C_Init+0xe8>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	4a69      	ldr	r2, [pc, #420]	; (8002708 <HAL_I2C_Init+0x284>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	3301      	adds	r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800257e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	495c      	ldr	r1, [pc, #368]	; (80026f8 <HAL_I2C_Init+0x274>)
 8002588:	428b      	cmp	r3, r1
 800258a:	d819      	bhi.n	80025c0 <HAL_I2C_Init+0x13c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1e59      	subs	r1, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fbb1 f3f3 	udiv	r3, r1, r3
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025a0:	400b      	ands	r3, r1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_I2C_Init+0x138>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1e59      	subs	r1, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	e051      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 80025bc:	2304      	movs	r3, #4
 80025be:	e04f      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_I2C_Init+0x168>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	440b      	add	r3, r1
 80025d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025da:	3301      	adds	r3, #1
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e012      	b.n	8002612 <HAL_I2C_Init+0x18e>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Init+0x196>
 8002616:	2301      	movs	r3, #1
 8002618:	e022      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10e      	bne.n	8002640 <HAL_I2C_Init+0x1bc>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e58      	subs	r0, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	440b      	add	r3, r1
 8002630:	fbb0 f3f3 	udiv	r3, r0, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263e:	e00f      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	6809      	ldr	r1, [r1, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800268e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6911      	ldr	r1, [r2, #16]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	000186a0 	.word	0x000186a0
 80026fc:	001e847f 	.word	0x001e847f
 8002700:	003d08ff 	.word	0x003d08ff
 8002704:	431bde83 	.word	0x431bde83
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e264      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d075      	beq.n	8002816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800272a:	4ba3      	ldr	r3, [pc, #652]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d00c      	beq.n	8002750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	4ba0      	ldr	r3, [pc, #640]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800273e:	2b08      	cmp	r3, #8
 8002740:	d112      	bne.n	8002768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b9d      	ldr	r3, [pc, #628]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800274e:	d10b      	bne.n	8002768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	4b99      	ldr	r3, [pc, #612]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05b      	beq.n	8002814 <HAL_RCC_OscConfig+0x108>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d157      	bne.n	8002814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e23f      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d106      	bne.n	8002780 <HAL_RCC_OscConfig+0x74>
 8002772:	4b91      	ldr	r3, [pc, #580]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a90      	ldr	r2, [pc, #576]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e01d      	b.n	80027bc <HAL_RCC_OscConfig+0xb0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x98>
 800278a:	4b8b      	ldr	r3, [pc, #556]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a8a      	ldr	r2, [pc, #552]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a87      	ldr	r2, [pc, #540]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xb0>
 80027a4:	4b84      	ldr	r3, [pc, #528]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a83      	ldr	r2, [pc, #524]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b81      	ldr	r3, [pc, #516]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a80      	ldr	r2, [pc, #512]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff faec 	bl	8001da0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff fae8 	bl	8001da0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e204      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xc0>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fad8 	bl	8001da0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff fad4 	bl	8001da0 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e1f0      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0xe8>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d063      	beq.n	80028ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002836:	2b08      	cmp	r3, #8
 8002838:	d11c      	bne.n	8002874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d116      	bne.n	8002874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x152>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1c4      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4952      	ldr	r1, [pc, #328]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	e03a      	b.n	80028ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCC_OscConfig+0x2b0>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7ff fa8d 	bl	8001da0 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288a:	f7ff fa89 	bl	8001da0 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1a5      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4940      	ldr	r1, [pc, #256]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e015      	b.n	80028ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x2b0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff fa6c 	bl	8001da0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028cc:	f7ff fa68 	bl	8001da0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e184      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d030      	beq.n	8002958 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_RCC_OscConfig+0x2b4>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7ff fa4c 	bl	8001da0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290c:	f7ff fa48 	bl	8001da0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e164      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x200>
 800292a:	e015      	b.n	8002958 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x2b4>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7ff fa35 	bl	8001da0 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293a:	f7ff fa31 	bl	8001da0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e14d      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a0 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_OscConfig+0x2b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d121      	bne.n	80029e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_RCC_OscConfig+0x2b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <HAL_RCC_OscConfig+0x2b8>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7ff f9f7 	bl	8001da0 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e011      	b.n	80029da <HAL_RCC_OscConfig+0x2ce>
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	42470000 	.word	0x42470000
 80029c0:	42470e80 	.word	0x42470e80
 80029c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c8:	f7ff f9ea 	bl	8001da0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e106      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b85      	ldr	r3, [pc, #532]	; (8002bf0 <HAL_RCC_OscConfig+0x4e4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x2f0>
 80029ee:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	e01c      	b.n	8002a36 <HAL_RCC_OscConfig+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x312>
 8002a04:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4a7a      	ldr	r2, [pc, #488]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a10:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a77      	ldr	r2, [pc, #476]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	e00b      	b.n	8002a36 <HAL_RCC_OscConfig+0x32a>
 8002a1e:	4b75      	ldr	r3, [pc, #468]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a74      	ldr	r2, [pc, #464]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a71      	ldr	r2, [pc, #452]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d015      	beq.n	8002a6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7ff f9af 	bl	8001da0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7ff f9ab 	bl	8001da0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0c5      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ee      	beq.n	8002a46 <HAL_RCC_OscConfig+0x33a>
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f999 	bl	8001da0 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7ff f995 	bl	8001da0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0af      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a55      	ldr	r2, [pc, #340]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 809b 	beq.w	8002be6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d05c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d141      	bne.n	8002b48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff f969 	bl	8001da0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7ff f965 	bl	8001da0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e081      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	019b      	lsls	r3, r3, #6
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
 8002b14:	4937      	ldr	r1, [pc, #220]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1a:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7ff f93e 	bl	8001da0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7ff f93a 	bl	8001da0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e056      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x41c>
 8002b46:	e04e      	b.n	8002be6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff f927 	bl	8001da0 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7ff f923 	bl	8001da0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e03f      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x44a>
 8002b74:	e037      	b.n	8002be6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e032      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d028      	beq.n	8002be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d121      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d11a      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d111      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470060 	.word	0x42470060

08002bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0cc      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b68      	ldr	r3, [pc, #416]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d90c      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b8      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c50:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c68:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	494d      	ldr	r1, [pc, #308]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d044      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d119      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e07f      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06f      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e067      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cda:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f023 0203 	bic.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4934      	ldr	r1, [pc, #208]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cec:	f7ff f858 	bl	8001da0 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7ff f854 	bl	8001da0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e04f      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 020c 	and.w	r2, r3, #12
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1eb      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d20c      	bcs.n	8002d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e032      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4916      	ldr	r1, [pc, #88]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	490e      	ldr	r1, [pc, #56]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d82:	f000 f821 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002d86:	4602      	mov	r2, r0
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	490a      	ldr	r1, [pc, #40]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	5ccb      	ldrb	r3, [r1, r3]
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe ffb8 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	08006544 	.word	0x08006544
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	20000008 	.word	0x20000008

08002dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de0:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d00d      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x40>
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	f200 80bd 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x34>
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dfa:	e0b7      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dfe:	60bb      	str	r3, [r7, #8]
       break;
 8002e00:	e0b7      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e04:	60bb      	str	r3, [r7, #8]
      break;
 8002e06:	e0b4      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e08:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e12:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04d      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1e:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	461a      	mov	r2, r3
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	ea02 0800 	and.w	r8, r2, r0
 8002e36:	ea03 0901 	and.w	r9, r3, r1
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	014b      	lsls	r3, r1, #5
 8002e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e4c:	0142      	lsls	r2, r0, #5
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	ebb0 0008 	subs.w	r0, r0, r8
 8002e56:	eb61 0109 	sbc.w	r1, r1, r9
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e68:	0182      	lsls	r2, r0, #6
 8002e6a:	1a12      	subs	r2, r2, r0
 8002e6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	00d9      	lsls	r1, r3, #3
 8002e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e7e:	00d0      	lsls	r0, r2, #3
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	eb12 0208 	adds.w	r2, r2, r8
 8002e88:	eb43 0309 	adc.w	r3, r3, r9
 8002e8c:	f04f 0000 	mov.w	r0, #0
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	0259      	lsls	r1, r3, #9
 8002e96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e9a:	0250      	lsls	r0, r2, #9
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f7fd fe84 	bl	8000bb8 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e04a      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	ea02 0400 	and.w	r4, r2, r0
 8002ed2:	ea03 0501 	and.w	r5, r3, r1
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	014b      	lsls	r3, r1, #5
 8002ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ee8:	0142      	lsls	r2, r0, #5
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	1b00      	subs	r0, r0, r4
 8002ef0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	018b      	lsls	r3, r1, #6
 8002efe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f02:	0182      	lsls	r2, r0, #6
 8002f04:	1a12      	subs	r2, r2, r0
 8002f06:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	00d9      	lsls	r1, r3, #3
 8002f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f18:	00d0      	lsls	r0, r2, #3
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	1912      	adds	r2, r2, r4
 8002f20:	eb45 0303 	adc.w	r3, r5, r3
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	0299      	lsls	r1, r3, #10
 8002f2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f32:	0290      	lsls	r0, r2, #10
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	f7fd fe38 	bl	8000bb8 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	60bb      	str	r3, [r7, #8]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f6e:	60bb      	str	r3, [r7, #8]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	68bb      	ldr	r3, [r7, #8]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	08006554 	.word	0x08006554

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffdc 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0b5b      	lsrs	r3, r3, #13
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08006554 	.word	0x08006554

08002ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e041      	b.n	800308a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe fc8c 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fac0 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e041      	b.n	8003128 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f839 	bl	8003130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f000 fa71 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_TIM_PWM_Start+0x24>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e022      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d109      	bne.n	8003182 <HAL_TIM_PWM_Start+0x3e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e015      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x58>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e068      	b.n	8003288 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x82>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c4:	e013      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x92>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e4:	e003      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fc84 	bl	8003b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_TIM_PWM_Start+0x14c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <HAL_TIM_PWM_Start+0x14c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d013      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_TIM_PWM_Start+0x150>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a17      	ldr	r2, [pc, #92]	; (8003298 <HAL_TIM_PWM_Start+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a16      	ldr	r2, [pc, #88]	; (800329c <HAL_TIM_PWM_Start+0x158>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_TIM_PWM_Start+0x15c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d010      	beq.n	8003286 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e007      	b.n	8003286 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0ae      	b.n	8003420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	f200 809f 	bhi.w	8003410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	08003411 	.word	0x08003411
 80032e0:	08003411 	.word	0x08003411
 80032e4:	08003411 	.word	0x08003411
 80032e8:	0800334d 	.word	0x0800334d
 80032ec:	08003411 	.word	0x08003411
 80032f0:	08003411 	.word	0x08003411
 80032f4:	08003411 	.word	0x08003411
 80032f8:	0800338f 	.word	0x0800338f
 80032fc:	08003411 	.word	0x08003411
 8003300:	08003411 	.word	0x08003411
 8003304:	08003411 	.word	0x08003411
 8003308:	080033cf 	.word	0x080033cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f9d0 	bl	80036b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6999      	ldr	r1, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	619a      	str	r2, [r3, #24]
      break;
 800334a:	e064      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa16 	bl	8003784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	619a      	str	r2, [r3, #24]
      break;
 800338c:	e043      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fa61 	bl	800385c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0204 	bic.w	r2, r2, #4
 80033b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
      break;
 80033cc:	e023      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 faab 	bl	8003930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	61da      	str	r2, [r3, #28]
      break;
 800340e:	e002      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x1c>
 8003440:	2302      	movs	r3, #2
 8003442:	e0b4      	b.n	80035ae <HAL_TIM_ConfigClockSource+0x186>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800346a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347c:	d03e      	beq.n	80034fc <HAL_TIM_ConfigClockSource+0xd4>
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	f200 8087 	bhi.w	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 8003486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348a:	f000 8086 	beq.w	800359a <HAL_TIM_ConfigClockSource+0x172>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	d87f      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b70      	cmp	r3, #112	; 0x70
 8003496:	d01a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xa6>
 8003498:	2b70      	cmp	r3, #112	; 0x70
 800349a:	d87b      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b60      	cmp	r3, #96	; 0x60
 800349e:	d050      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x11a>
 80034a0:	2b60      	cmp	r3, #96	; 0x60
 80034a2:	d877      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b50      	cmp	r3, #80	; 0x50
 80034a6:	d03c      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0xfa>
 80034a8:	2b50      	cmp	r3, #80	; 0x50
 80034aa:	d873      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d058      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x13a>
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d86f      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b30      	cmp	r3, #48	; 0x30
 80034b6:	d064      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034b8:	2b30      	cmp	r3, #48	; 0x30
 80034ba:	d86b      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d060      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d867      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05c      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d05a      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	e062      	b.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f000 faf1 	bl	8003ac4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	609a      	str	r2, [r3, #8]
      break;
 80034fa:	e04f      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6899      	ldr	r1, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f000 fada 	bl	8003ac4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351e:	609a      	str	r2, [r3, #8]
      break;
 8003520:	e03c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	461a      	mov	r2, r3
 8003530:	f000 fa4e 	bl	80039d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2150      	movs	r1, #80	; 0x50
 800353a:	4618      	mov	r0, r3
 800353c:	f000 faa7 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 8003540:	e02c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 fa6d 	bl	8003a2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2160      	movs	r1, #96	; 0x60
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa97 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 8003560:	e01c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 fa2e 	bl	80039d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa87 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 8003580:	e00c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f000 fa7e 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 8003592:	e003      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      break;
 8003598:	e000      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800359a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a34      	ldr	r2, [pc, #208]	; (800369c <TIM_Base_SetConfig+0xe4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00f      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d00b      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <TIM_Base_SetConfig+0xe8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a30      	ldr	r2, [pc, #192]	; (80036a4 <TIM_Base_SetConfig+0xec>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a2f      	ldr	r2, [pc, #188]	; (80036a8 <TIM_Base_SetConfig+0xf0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a25      	ldr	r2, [pc, #148]	; (800369c <TIM_Base_SetConfig+0xe4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <TIM_Base_SetConfig+0xe8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <TIM_Base_SetConfig+0xec>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <TIM_Base_SetConfig+0xf0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <TIM_Base_SetConfig+0xf4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <TIM_Base_SetConfig+0xf8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_Base_SetConfig+0xfc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <TIM_Base_SetConfig+0xe4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800

080036b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f023 0302 	bic.w	r3, r3, #2
 8003700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <TIM_OC1_SetConfig+0xc8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10c      	bne.n	800372e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0308 	bic.w	r3, r3, #8
 800371a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <TIM_OC1_SetConfig+0xc8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800373c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40010000 	.word	0x40010000

08003784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0210 	bic.w	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0320 	bic.w	r3, r3, #32
 80037ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <TIM_OC2_SetConfig+0xd4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10d      	bne.n	8003800 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <TIM_OC2_SetConfig+0xd4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d113      	bne.n	8003830 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800380e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000

0800385c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <TIM_OC3_SetConfig+0xd0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10d      	bne.n	80038d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_OC3_SetConfig+0xd0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d113      	bne.n	8003906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40010000 	.word	0x40010000

08003930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800397a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	031b      	lsls	r3, r3, #12
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <TIM_OC4_SetConfig+0x9c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d109      	bne.n	80039a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	019b      	lsls	r3, r3, #6
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000

080039d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 030a 	bic.w	r3, r3, #10
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b087      	sub	sp, #28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0210 	bic.w	r2, r3, #16
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f043 0307 	orr.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2201      	movs	r2, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e050      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d013      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40014000 	.word	0x40014000

08003c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e03f      	b.n	8003cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fecc 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fddb 	bl	800482c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af02      	add	r7, sp, #8
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d17c      	bne.n	8003de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_Transmit+0x2c>
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e075      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Transmit+0x3e>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e06e      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	; 0x21
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1a:	f7fe f841 	bl	8001da0 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d108      	bne.n	8003d48 <HAL_UART_Transmit+0x82>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e003      	b.n	8003d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d58:	e02a      	b.n	8003db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2180      	movs	r1, #128	; 0x80
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fb1f 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e036      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e007      	b.n	8003da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cf      	bne.n	8003d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 faef 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d11d      	bne.n	8003e40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Receive_IT+0x26>
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e016      	b.n	8003e42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Receive_IT+0x38>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e00f      	b.n	8003e42 <HAL_UART_Receive_IT+0x58>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fb24 	bl	8004484 <UART_Start_Receive_IT>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b0ba      	sub	sp, #232	; 0xe8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x66>
 8003e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fc03 	bl	80046b6 <UART_Receive_IT>
      return;
 8003eb0:	e256      	b.n	8004360 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80de 	beq.w	8004078 <HAL_UART_IRQHandler+0x22c>
 8003ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ecc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80d1 	beq.w	8004078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_UART_IRQHandler+0xae>
 8003ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f043 0201 	orr.w	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_UART_IRQHandler+0xd2>
 8003f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0202 	orr.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_UART_IRQHandler+0xf6>
 8003f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d011      	beq.n	8003f72 <HAL_UART_IRQHandler+0x126>
 8003f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 81ed 	beq.w	8004356 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_UART_IRQHandler+0x14e>
 8003f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fb8e 	bl	80046b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x17a>
 8003fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04f      	beq.n	8004066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa96 	bl	80044f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d141      	bne.n	800405e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800400a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800401e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1d9      	bne.n	8003fda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d013      	beq.n	8004056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	4a7d      	ldr	r2, [pc, #500]	; (8004228 <HAL_UART_IRQHandler+0x3dc>)
 8004034:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe f861 	bl	8002102 <HAL_DMA_Abort_IT>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004050:	4610      	mov	r0, r2
 8004052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	e00e      	b.n	8004074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f990 	bl	800437c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e00a      	b.n	8004074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f98c 	bl	800437c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e006      	b.n	8004074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f988 	bl	800437c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004072:	e170      	b.n	8004356 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	bf00      	nop
    return;
 8004076:	e16e      	b.n	8004356 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	2b01      	cmp	r3, #1
 800407e:	f040 814a 	bne.w	8004316 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8143 	beq.w	8004316 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 813c 	beq.w	8004316 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	f040 80b4 	bne.w	800422c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8140 	beq.w	800435a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e2:	429a      	cmp	r2, r3
 80040e4:	f080 8139 	bcs.w	800435a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fa:	f000 8088 	beq.w	800420e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800411c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800412a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800412e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004136:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1d9      	bne.n	80040fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800415a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800416e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004172:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004176:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e1      	bne.n	800414a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3314      	adds	r3, #20
 80041a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e3      	bne.n	8004186 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e3      	bne.n	80041cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd ff0a 	bl	8002022 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004216:	b29b      	uxth	r3, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8b6 	bl	8004390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004224:	e099      	b.n	800435a <HAL_UART_IRQHandler+0x50e>
 8004226:	bf00      	nop
 8004228:	080045bf 	.word	0x080045bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 808b 	beq.w	800435e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8086 	beq.w	800435e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004276:	647a      	str	r2, [r7, #68]	; 0x44
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800427c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e3      	bne.n	8004252 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	623b      	str	r3, [r7, #32]
   return(result);
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042ae:	633a      	str	r2, [r7, #48]	; 0x30
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042f4:	61fa      	str	r2, [r7, #28]
 80042f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	69b9      	ldr	r1, [r7, #24]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	617b      	str	r3, [r7, #20]
   return(result);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e3      	bne.n	80042d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f83e 	bl	8004390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004314:	e023      	b.n	800435e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_UART_IRQHandler+0x4ea>
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f959 	bl	80045e6 <UART_Transmit_IT>
    return;
 8004334:	e014      	b.n	8004360 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00e      	beq.n	8004360 <HAL_UART_IRQHandler+0x514>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f999 	bl	8004686 <UART_EndTransmit_IT>
    return;
 8004354:	e004      	b.n	8004360 <HAL_UART_IRQHandler+0x514>
    return;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_UART_IRQHandler+0x514>
      return;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_UART_IRQHandler+0x514>
      return;
 800435e:	bf00      	nop
  }
}
 8004360:	37e8      	adds	r7, #232	; 0xe8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop

08004368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b090      	sub	sp, #64	; 0x40
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	e050      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d04c      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c8:	f7fd fcea 	bl	8001da0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d241      	bcs.n	800445c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f8:	637a      	str	r2, [r7, #52]	; 0x34
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	613b      	str	r3, [r7, #16]
   return(result);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442c:	623a      	str	r2, [r7, #32]
 800442e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69f9      	ldr	r1, [r7, #28]
 8004432:	6a3a      	ldr	r2, [r7, #32]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	61bb      	str	r3, [r7, #24]
   return(result);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e00f      	b.n	800447c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	d09f      	beq.n	80043ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3740      	adds	r7, #64	; 0x40
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2222      	movs	r2, #34	; 0x22
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0220 	orr.w	r2, r2, #32
 80044e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b095      	sub	sp, #84	; 0x54
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004520:	643a      	str	r2, [r7, #64]	; 0x40
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	61fb      	str	r3, [r7, #28]
   return(result);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	d119      	bne.n	80045a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004590:	61ba      	str	r2, [r7, #24]
 8004592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045b2:	bf00      	nop
 80045b4:	3754      	adds	r7, #84	; 0x54
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fecf 	bl	800437c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	d13e      	bne.n	8004678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d114      	bne.n	800462e <UART_Transmit_IT+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]
 800462c:	e008      	b.n	8004640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6211      	str	r1, [r2, #32]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10f      	bne.n	8004674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fe5e 	bl	8004368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08c      	sub	sp, #48	; 0x30
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b22      	cmp	r3, #34	; 0x22
 80046c8:	f040 80ab 	bne.w	8004822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d117      	bne.n	8004706 <UART_Receive_IT+0x50>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
 8004704:	e026      	b.n	8004754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d007      	beq.n	800472a <UART_Receive_IT+0x74>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <UART_Receive_IT+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e008      	b.n	800474a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4619      	mov	r1, r3
 8004762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15a      	bne.n	800481e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0220 	bic.w	r2, r2, #32
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d135      	bne.n	8004814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	613b      	str	r3, [r7, #16]
   return(result);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	623a      	str	r2, [r7, #32]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	61bb      	str	r3, [r7, #24]
   return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d10a      	bne.n	8004806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fdbf 	bl	8004390 <HAL_UARTEx_RxEventCallback>
 8004812:	e002      	b.n	800481a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc fcff 	bl	8001218 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	b09f      	sub	sp, #124	; 0x7c
 8004832:	af00      	add	r7, sp, #0
 8004834:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	ea40 0301 	orr.w	r3, r0, r1
 800484c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	431a      	orrs	r2, r3
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	431a      	orrs	r2, r3
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004870:	f021 010c 	bic.w	r1, r1, #12
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800487a:	430b      	orrs	r3, r1
 800487c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	6999      	ldr	r1, [r3, #24]
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	ea40 0301 	orr.w	r3, r0, r1
 8004894:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4bc5      	ldr	r3, [pc, #788]	; (8004bb0 <UART_SetConfig+0x384>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d004      	beq.n	80048aa <UART_SetConfig+0x7e>
 80048a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4bc3      	ldr	r3, [pc, #780]	; (8004bb4 <UART_SetConfig+0x388>)
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d103      	bne.n	80048b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048aa:	f7fe fb8f 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 80048ae:	6778      	str	r0, [r7, #116]	; 0x74
 80048b0:	e002      	b.n	80048b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048b2:	f7fe fb77 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80048b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c0:	f040 80b6 	bne.w	8004a30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c6:	461c      	mov	r4, r3
 80048c8:	f04f 0500 	mov.w	r5, #0
 80048cc:	4622      	mov	r2, r4
 80048ce:	462b      	mov	r3, r5
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	6439      	str	r1, [r7, #64]	; 0x40
 80048d4:	415b      	adcs	r3, r3
 80048d6:	647b      	str	r3, [r7, #68]	; 0x44
 80048d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048dc:	1912      	adds	r2, r2, r4
 80048de:	eb45 0303 	adc.w	r3, r5, r3
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	00d9      	lsls	r1, r3, #3
 80048ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f0:	00d0      	lsls	r0, r2, #3
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	1911      	adds	r1, r2, r4
 80048f8:	6639      	str	r1, [r7, #96]	; 0x60
 80048fa:	416b      	adcs	r3, r5
 80048fc:	667b      	str	r3, [r7, #100]	; 0x64
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	1891      	adds	r1, r2, r2
 800490a:	63b9      	str	r1, [r7, #56]	; 0x38
 800490c:	415b      	adcs	r3, r3
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004918:	f7fc f94e 	bl	8000bb8 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4ba5      	ldr	r3, [pc, #660]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011e      	lsls	r6, r3, #4
 800492a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492c:	461c      	mov	r4, r3
 800492e:	f04f 0500 	mov.w	r5, #0
 8004932:	4622      	mov	r2, r4
 8004934:	462b      	mov	r3, r5
 8004936:	1891      	adds	r1, r2, r2
 8004938:	6339      	str	r1, [r7, #48]	; 0x30
 800493a:	415b      	adcs	r3, r3
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
 800493e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004942:	1912      	adds	r2, r2, r4
 8004944:	eb45 0303 	adc.w	r3, r5, r3
 8004948:	f04f 0000 	mov.w	r0, #0
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	00d9      	lsls	r1, r3, #3
 8004952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004956:	00d0      	lsls	r0, r2, #3
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	1911      	adds	r1, r2, r4
 800495e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004960:	416b      	adcs	r3, r5
 8004962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	461a      	mov	r2, r3
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	1891      	adds	r1, r2, r2
 8004970:	62b9      	str	r1, [r7, #40]	; 0x28
 8004972:	415b      	adcs	r3, r3
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800497a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800497e:	f7fc f91b 	bl	8000bb8 <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4b8c      	ldr	r3, [pc, #560]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004988:	fba3 1302 	umull	r1, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	2164      	movs	r1, #100	; 0x64
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	3332      	adds	r3, #50	; 0x32
 800499a:	4a87      	ldr	r2, [pc, #540]	; (8004bb8 <UART_SetConfig+0x38c>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a8:	441e      	add	r6, r3
 80049aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ac:	4618      	mov	r0, r3
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	1894      	adds	r4, r2, r2
 80049b8:	623c      	str	r4, [r7, #32]
 80049ba:	415b      	adcs	r3, r3
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
 80049be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049c2:	1812      	adds	r2, r2, r0
 80049c4:	eb41 0303 	adc.w	r3, r1, r3
 80049c8:	f04f 0400 	mov.w	r4, #0
 80049cc:	f04f 0500 	mov.w	r5, #0
 80049d0:	00dd      	lsls	r5, r3, #3
 80049d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049d6:	00d4      	lsls	r4, r2, #3
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	1814      	adds	r4, r2, r0
 80049de:	653c      	str	r4, [r7, #80]	; 0x50
 80049e0:	414b      	adcs	r3, r1
 80049e2:	657b      	str	r3, [r7, #84]	; 0x54
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	1891      	adds	r1, r2, r2
 80049f0:	61b9      	str	r1, [r7, #24]
 80049f2:	415b      	adcs	r3, r3
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049fe:	f7fc f8db 	bl	8000bb8 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a67      	ldr	r2, [pc, #412]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4432      	add	r2, r6
 8004a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a2e:	e0b9      	b.n	8004ba4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a32:	461c      	mov	r4, r3
 8004a34:	f04f 0500 	mov.w	r5, #0
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	6139      	str	r1, [r7, #16]
 8004a40:	415b      	adcs	r3, r3
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a48:	1912      	adds	r2, r2, r4
 8004a4a:	eb45 0303 	adc.w	r3, r5, r3
 8004a4e:	f04f 0000 	mov.w	r0, #0
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	00d9      	lsls	r1, r3, #3
 8004a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a5c:	00d0      	lsls	r0, r2, #3
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	eb12 0804 	adds.w	r8, r2, r4
 8004a66:	eb43 0905 	adc.w	r9, r3, r5
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	008b      	lsls	r3, r1, #2
 8004a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a82:	0082      	lsls	r2, r0, #2
 8004a84:	4640      	mov	r0, r8
 8004a86:	4649      	mov	r1, r9
 8004a88:	f7fc f896 	bl	8000bb8 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4b49      	ldr	r3, [pc, #292]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004a92:	fba3 2302 	umull	r2, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	011e      	lsls	r6, r3, #4
 8004a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	1894      	adds	r4, r2, r2
 8004aa8:	60bc      	str	r4, [r7, #8]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab2:	1812      	adds	r2, r2, r0
 8004ab4:	eb41 0303 	adc.w	r3, r1, r3
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	f04f 0500 	mov.w	r5, #0
 8004ac0:	00dd      	lsls	r5, r3, #3
 8004ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ac6:	00d4      	lsls	r4, r2, #3
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	1814      	adds	r4, r2, r0
 8004ace:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	008b      	lsls	r3, r1, #2
 8004ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aec:	0082      	lsls	r2, r0, #2
 8004aee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004af2:	f7fc f861 	bl	8000bb8 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	; 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	3332      	adds	r3, #50	; 0x32
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b1a:	441e      	add	r6, r3
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	1894      	adds	r4, r2, r2
 8004b2a:	603c      	str	r4, [r7, #0]
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b34:	1812      	adds	r2, r2, r0
 8004b36:	eb41 0303 	adc.w	r3, r1, r3
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	f04f 0500 	mov.w	r5, #0
 8004b42:	00dd      	lsls	r5, r3, #3
 8004b44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b48:	00d4      	lsls	r4, r2, #3
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb12 0a00 	adds.w	sl, r2, r0
 8004b52:	eb43 0b01 	adc.w	fp, r3, r1
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	008b      	lsls	r3, r1, #2
 8004b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b6e:	0082      	lsls	r2, r0, #2
 8004b70:	4650      	mov	r0, sl
 8004b72:	4659      	mov	r1, fp
 8004b74:	f7fc f820 	bl	8000bb8 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2164      	movs	r1, #100	; 0x64
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4432      	add	r2, r6
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	377c      	adds	r7, #124	; 0x7c
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	bf00      	nop
 8004bb0:	40011000 	.word	0x40011000
 8004bb4:	40011400 	.word	0x40011400
 8004bb8:	51eb851f 	.word	0x51eb851f

08004bbc <__errno>:
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <__errno+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000010 	.word	0x20000010

08004bc8 <__libc_init_array>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4d0d      	ldr	r5, [pc, #52]	; (8004c00 <__libc_init_array+0x38>)
 8004bcc:	4c0d      	ldr	r4, [pc, #52]	; (8004c04 <__libc_init_array+0x3c>)
 8004bce:	1b64      	subs	r4, r4, r5
 8004bd0:	10a4      	asrs	r4, r4, #2
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	42a6      	cmp	r6, r4
 8004bd6:	d109      	bne.n	8004bec <__libc_init_array+0x24>
 8004bd8:	4d0b      	ldr	r5, [pc, #44]	; (8004c08 <__libc_init_array+0x40>)
 8004bda:	4c0c      	ldr	r4, [pc, #48]	; (8004c0c <__libc_init_array+0x44>)
 8004bdc:	f001 fc92 	bl	8006504 <_init>
 8004be0:	1b64      	subs	r4, r4, r5
 8004be2:	10a4      	asrs	r4, r4, #2
 8004be4:	2600      	movs	r6, #0
 8004be6:	42a6      	cmp	r6, r4
 8004be8:	d105      	bne.n	8004bf6 <__libc_init_array+0x2e>
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf0:	4798      	blx	r3
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	e7ee      	b.n	8004bd4 <__libc_init_array+0xc>
 8004bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfa:	4798      	blx	r3
 8004bfc:	3601      	adds	r6, #1
 8004bfe:	e7f2      	b.n	8004be6 <__libc_init_array+0x1e>
 8004c00:	080066d8 	.word	0x080066d8
 8004c04:	080066d8 	.word	0x080066d8
 8004c08:	080066d8 	.word	0x080066d8
 8004c0c:	080066dc 	.word	0x080066dc

08004c10 <memset>:
 8004c10:	4402      	add	r2, r0
 8004c12:	4603      	mov	r3, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <memset+0xa>
 8004c18:	4770      	bx	lr
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <memset+0x4>

08004c20 <siprintf>:
 8004c20:	b40e      	push	{r1, r2, r3}
 8004c22:	b500      	push	{lr}
 8004c24:	b09c      	sub	sp, #112	; 0x70
 8004c26:	ab1d      	add	r3, sp, #116	; 0x74
 8004c28:	9002      	str	r0, [sp, #8]
 8004c2a:	9006      	str	r0, [sp, #24]
 8004c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c30:	4809      	ldr	r0, [pc, #36]	; (8004c58 <siprintf+0x38>)
 8004c32:	9107      	str	r1, [sp, #28]
 8004c34:	9104      	str	r1, [sp, #16]
 8004c36:	4909      	ldr	r1, [pc, #36]	; (8004c5c <siprintf+0x3c>)
 8004c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3c:	9105      	str	r1, [sp, #20]
 8004c3e:	6800      	ldr	r0, [r0, #0]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	a902      	add	r1, sp, #8
 8004c44:	f000 f8f6 	bl	8004e34 <_svfiprintf_r>
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	b01c      	add	sp, #112	; 0x70
 8004c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c54:	b003      	add	sp, #12
 8004c56:	4770      	bx	lr
 8004c58:	20000010 	.word	0x20000010
 8004c5c:	ffff0208 	.word	0xffff0208

08004c60 <_strtol_l.isra.0>:
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c66:	d001      	beq.n	8004c6c <_strtol_l.isra.0+0xc>
 8004c68:	2b24      	cmp	r3, #36	; 0x24
 8004c6a:	d906      	bls.n	8004c7a <_strtol_l.isra.0+0x1a>
 8004c6c:	f7ff ffa6 	bl	8004bbc <__errno>
 8004c70:	2316      	movs	r3, #22
 8004c72:	6003      	str	r3, [r0, #0]
 8004c74:	2000      	movs	r0, #0
 8004c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7a:	4f3a      	ldr	r7, [pc, #232]	; (8004d64 <_strtol_l.isra.0+0x104>)
 8004c7c:	468e      	mov	lr, r1
 8004c7e:	4676      	mov	r6, lr
 8004c80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004c84:	5de5      	ldrb	r5, [r4, r7]
 8004c86:	f015 0508 	ands.w	r5, r5, #8
 8004c8a:	d1f8      	bne.n	8004c7e <_strtol_l.isra.0+0x1e>
 8004c8c:	2c2d      	cmp	r4, #45	; 0x2d
 8004c8e:	d134      	bne.n	8004cfa <_strtol_l.isra.0+0x9a>
 8004c90:	f89e 4000 	ldrb.w	r4, [lr]
 8004c94:	f04f 0801 	mov.w	r8, #1
 8004c98:	f106 0e02 	add.w	lr, r6, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d05c      	beq.n	8004d5a <_strtol_l.isra.0+0xfa>
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d10c      	bne.n	8004cbe <_strtol_l.isra.0+0x5e>
 8004ca4:	2c30      	cmp	r4, #48	; 0x30
 8004ca6:	d10a      	bne.n	8004cbe <_strtol_l.isra.0+0x5e>
 8004ca8:	f89e 4000 	ldrb.w	r4, [lr]
 8004cac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004cb0:	2c58      	cmp	r4, #88	; 0x58
 8004cb2:	d14d      	bne.n	8004d50 <_strtol_l.isra.0+0xf0>
 8004cb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f10e 0e02 	add.w	lr, lr, #2
 8004cbe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004cc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	fbbc f9f3 	udiv	r9, ip, r3
 8004ccc:	4635      	mov	r5, r6
 8004cce:	fb03 ca19 	mls	sl, r3, r9, ip
 8004cd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004cd6:	2f09      	cmp	r7, #9
 8004cd8:	d818      	bhi.n	8004d0c <_strtol_l.isra.0+0xac>
 8004cda:	463c      	mov	r4, r7
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	dd24      	ble.n	8004d2a <_strtol_l.isra.0+0xca>
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	db1f      	blt.n	8004d24 <_strtol_l.isra.0+0xc4>
 8004ce4:	45a9      	cmp	r9, r5
 8004ce6:	d31d      	bcc.n	8004d24 <_strtol_l.isra.0+0xc4>
 8004ce8:	d101      	bne.n	8004cee <_strtol_l.isra.0+0x8e>
 8004cea:	45a2      	cmp	sl, r4
 8004cec:	db1a      	blt.n	8004d24 <_strtol_l.isra.0+0xc4>
 8004cee:	fb05 4503 	mla	r5, r5, r3, r4
 8004cf2:	2601      	movs	r6, #1
 8004cf4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004cf8:	e7eb      	b.n	8004cd2 <_strtol_l.isra.0+0x72>
 8004cfa:	2c2b      	cmp	r4, #43	; 0x2b
 8004cfc:	bf08      	it	eq
 8004cfe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004d02:	46a8      	mov	r8, r5
 8004d04:	bf08      	it	eq
 8004d06:	f106 0e02 	addeq.w	lr, r6, #2
 8004d0a:	e7c7      	b.n	8004c9c <_strtol_l.isra.0+0x3c>
 8004d0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004d10:	2f19      	cmp	r7, #25
 8004d12:	d801      	bhi.n	8004d18 <_strtol_l.isra.0+0xb8>
 8004d14:	3c37      	subs	r4, #55	; 0x37
 8004d16:	e7e1      	b.n	8004cdc <_strtol_l.isra.0+0x7c>
 8004d18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004d1c:	2f19      	cmp	r7, #25
 8004d1e:	d804      	bhi.n	8004d2a <_strtol_l.isra.0+0xca>
 8004d20:	3c57      	subs	r4, #87	; 0x57
 8004d22:	e7db      	b.n	8004cdc <_strtol_l.isra.0+0x7c>
 8004d24:	f04f 36ff 	mov.w	r6, #4294967295
 8004d28:	e7e4      	b.n	8004cf4 <_strtol_l.isra.0+0x94>
 8004d2a:	2e00      	cmp	r6, #0
 8004d2c:	da05      	bge.n	8004d3a <_strtol_l.isra.0+0xda>
 8004d2e:	2322      	movs	r3, #34	; 0x22
 8004d30:	6003      	str	r3, [r0, #0]
 8004d32:	4665      	mov	r5, ip
 8004d34:	b942      	cbnz	r2, 8004d48 <_strtol_l.isra.0+0xe8>
 8004d36:	4628      	mov	r0, r5
 8004d38:	e79d      	b.n	8004c76 <_strtol_l.isra.0+0x16>
 8004d3a:	f1b8 0f00 	cmp.w	r8, #0
 8004d3e:	d000      	beq.n	8004d42 <_strtol_l.isra.0+0xe2>
 8004d40:	426d      	negs	r5, r5
 8004d42:	2a00      	cmp	r2, #0
 8004d44:	d0f7      	beq.n	8004d36 <_strtol_l.isra.0+0xd6>
 8004d46:	b10e      	cbz	r6, 8004d4c <_strtol_l.isra.0+0xec>
 8004d48:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004d4c:	6011      	str	r1, [r2, #0]
 8004d4e:	e7f2      	b.n	8004d36 <_strtol_l.isra.0+0xd6>
 8004d50:	2430      	movs	r4, #48	; 0x30
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1b3      	bne.n	8004cbe <_strtol_l.isra.0+0x5e>
 8004d56:	2308      	movs	r3, #8
 8004d58:	e7b1      	b.n	8004cbe <_strtol_l.isra.0+0x5e>
 8004d5a:	2c30      	cmp	r4, #48	; 0x30
 8004d5c:	d0a4      	beq.n	8004ca8 <_strtol_l.isra.0+0x48>
 8004d5e:	230a      	movs	r3, #10
 8004d60:	e7ad      	b.n	8004cbe <_strtol_l.isra.0+0x5e>
 8004d62:	bf00      	nop
 8004d64:	0800655d 	.word	0x0800655d

08004d68 <strtol>:
 8004d68:	4613      	mov	r3, r2
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	4802      	ldr	r0, [pc, #8]	; (8004d78 <strtol+0x10>)
 8004d70:	6800      	ldr	r0, [r0, #0]
 8004d72:	f7ff bf75 	b.w	8004c60 <_strtol_l.isra.0>
 8004d76:	bf00      	nop
 8004d78:	20000010 	.word	0x20000010

08004d7c <__ssputs_r>:
 8004d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d80:	688e      	ldr	r6, [r1, #8]
 8004d82:	429e      	cmp	r6, r3
 8004d84:	4682      	mov	sl, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	4690      	mov	r8, r2
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	d838      	bhi.n	8004e00 <__ssputs_r+0x84>
 8004d8e:	898a      	ldrh	r2, [r1, #12]
 8004d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d94:	d032      	beq.n	8004dfc <__ssputs_r+0x80>
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	6909      	ldr	r1, [r1, #16]
 8004d9a:	eba5 0901 	sub.w	r9, r5, r1
 8004d9e:	6965      	ldr	r5, [r4, #20]
 8004da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004da8:	3301      	adds	r3, #1
 8004daa:	444b      	add	r3, r9
 8004dac:	106d      	asrs	r5, r5, #1
 8004dae:	429d      	cmp	r5, r3
 8004db0:	bf38      	it	cc
 8004db2:	461d      	movcc	r5, r3
 8004db4:	0553      	lsls	r3, r2, #21
 8004db6:	d531      	bpl.n	8004e1c <__ssputs_r+0xa0>
 8004db8:	4629      	mov	r1, r5
 8004dba:	f000 fb47 	bl	800544c <_malloc_r>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	b950      	cbnz	r0, 8004dd8 <__ssputs_r+0x5c>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	f8ca 3000 	str.w	r3, [sl]
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd8:	6921      	ldr	r1, [r4, #16]
 8004dda:	464a      	mov	r2, r9
 8004ddc:	f000 fabe 	bl	800535c <memcpy>
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	6126      	str	r6, [r4, #16]
 8004dee:	6165      	str	r5, [r4, #20]
 8004df0:	444e      	add	r6, r9
 8004df2:	eba5 0509 	sub.w	r5, r5, r9
 8004df6:	6026      	str	r6, [r4, #0]
 8004df8:	60a5      	str	r5, [r4, #8]
 8004dfa:	463e      	mov	r6, r7
 8004dfc:	42be      	cmp	r6, r7
 8004dfe:	d900      	bls.n	8004e02 <__ssputs_r+0x86>
 8004e00:	463e      	mov	r6, r7
 8004e02:	4632      	mov	r2, r6
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	4641      	mov	r1, r8
 8004e08:	f000 fab6 	bl	8005378 <memmove>
 8004e0c:	68a3      	ldr	r3, [r4, #8]
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	1b9b      	subs	r3, r3, r6
 8004e12:	4432      	add	r2, r6
 8004e14:	60a3      	str	r3, [r4, #8]
 8004e16:	6022      	str	r2, [r4, #0]
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e7db      	b.n	8004dd4 <__ssputs_r+0x58>
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	f000 fb6f 	bl	8005500 <_realloc_r>
 8004e22:	4606      	mov	r6, r0
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d1e1      	bne.n	8004dec <__ssputs_r+0x70>
 8004e28:	6921      	ldr	r1, [r4, #16]
 8004e2a:	4650      	mov	r0, sl
 8004e2c:	f000 fabe 	bl	80053ac <_free_r>
 8004e30:	e7c7      	b.n	8004dc2 <__ssputs_r+0x46>
	...

08004e34 <_svfiprintf_r>:
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	4698      	mov	r8, r3
 8004e3a:	898b      	ldrh	r3, [r1, #12]
 8004e3c:	061b      	lsls	r3, r3, #24
 8004e3e:	b09d      	sub	sp, #116	; 0x74
 8004e40:	4607      	mov	r7, r0
 8004e42:	460d      	mov	r5, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	d50e      	bpl.n	8004e66 <_svfiprintf_r+0x32>
 8004e48:	690b      	ldr	r3, [r1, #16]
 8004e4a:	b963      	cbnz	r3, 8004e66 <_svfiprintf_r+0x32>
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	f000 fafd 	bl	800544c <_malloc_r>
 8004e52:	6028      	str	r0, [r5, #0]
 8004e54:	6128      	str	r0, [r5, #16]
 8004e56:	b920      	cbnz	r0, 8004e62 <_svfiprintf_r+0x2e>
 8004e58:	230c      	movs	r3, #12
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	e0d1      	b.n	8005006 <_svfiprintf_r+0x1d2>
 8004e62:	2340      	movs	r3, #64	; 0x40
 8004e64:	616b      	str	r3, [r5, #20]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6a:	2320      	movs	r3, #32
 8004e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e74:	2330      	movs	r3, #48	; 0x30
 8004e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005020 <_svfiprintf_r+0x1ec>
 8004e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e7e:	f04f 0901 	mov.w	r9, #1
 8004e82:	4623      	mov	r3, r4
 8004e84:	469a      	mov	sl, r3
 8004e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e8a:	b10a      	cbz	r2, 8004e90 <_svfiprintf_r+0x5c>
 8004e8c:	2a25      	cmp	r2, #37	; 0x25
 8004e8e:	d1f9      	bne.n	8004e84 <_svfiprintf_r+0x50>
 8004e90:	ebba 0b04 	subs.w	fp, sl, r4
 8004e94:	d00b      	beq.n	8004eae <_svfiprintf_r+0x7a>
 8004e96:	465b      	mov	r3, fp
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f7ff ff6d 	bl	8004d7c <__ssputs_r>
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f000 80aa 	beq.w	8004ffc <_svfiprintf_r+0x1c8>
 8004ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eaa:	445a      	add	r2, fp
 8004eac:	9209      	str	r2, [sp, #36]	; 0x24
 8004eae:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80a2 	beq.w	8004ffc <_svfiprintf_r+0x1c8>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ec2:	f10a 0a01 	add.w	sl, sl, #1
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	9307      	str	r3, [sp, #28]
 8004eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ece:	931a      	str	r3, [sp, #104]	; 0x68
 8004ed0:	4654      	mov	r4, sl
 8004ed2:	2205      	movs	r2, #5
 8004ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed8:	4851      	ldr	r0, [pc, #324]	; (8005020 <_svfiprintf_r+0x1ec>)
 8004eda:	f7fb f989 	bl	80001f0 <memchr>
 8004ede:	9a04      	ldr	r2, [sp, #16]
 8004ee0:	b9d8      	cbnz	r0, 8004f1a <_svfiprintf_r+0xe6>
 8004ee2:	06d0      	lsls	r0, r2, #27
 8004ee4:	bf44      	itt	mi
 8004ee6:	2320      	movmi	r3, #32
 8004ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eec:	0711      	lsls	r1, r2, #28
 8004eee:	bf44      	itt	mi
 8004ef0:	232b      	movmi	r3, #43	; 0x2b
 8004ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8004efa:	2b2a      	cmp	r3, #42	; 0x2a
 8004efc:	d015      	beq.n	8004f2a <_svfiprintf_r+0xf6>
 8004efe:	9a07      	ldr	r2, [sp, #28]
 8004f00:	4654      	mov	r4, sl
 8004f02:	2000      	movs	r0, #0
 8004f04:	f04f 0c0a 	mov.w	ip, #10
 8004f08:	4621      	mov	r1, r4
 8004f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f0e:	3b30      	subs	r3, #48	; 0x30
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	d94e      	bls.n	8004fb2 <_svfiprintf_r+0x17e>
 8004f14:	b1b0      	cbz	r0, 8004f44 <_svfiprintf_r+0x110>
 8004f16:	9207      	str	r2, [sp, #28]
 8004f18:	e014      	b.n	8004f44 <_svfiprintf_r+0x110>
 8004f1a:	eba0 0308 	sub.w	r3, r0, r8
 8004f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f22:	4313      	orrs	r3, r2
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	46a2      	mov	sl, r4
 8004f28:	e7d2      	b.n	8004ed0 <_svfiprintf_r+0x9c>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	1d19      	adds	r1, r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	9103      	str	r1, [sp, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bfbb      	ittet	lt
 8004f36:	425b      	neglt	r3, r3
 8004f38:	f042 0202 	orrlt.w	r2, r2, #2
 8004f3c:	9307      	strge	r3, [sp, #28]
 8004f3e:	9307      	strlt	r3, [sp, #28]
 8004f40:	bfb8      	it	lt
 8004f42:	9204      	strlt	r2, [sp, #16]
 8004f44:	7823      	ldrb	r3, [r4, #0]
 8004f46:	2b2e      	cmp	r3, #46	; 0x2e
 8004f48:	d10c      	bne.n	8004f64 <_svfiprintf_r+0x130>
 8004f4a:	7863      	ldrb	r3, [r4, #1]
 8004f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f4e:	d135      	bne.n	8004fbc <_svfiprintf_r+0x188>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	1d1a      	adds	r2, r3, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	9203      	str	r2, [sp, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bfb8      	it	lt
 8004f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f60:	3402      	adds	r4, #2
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005030 <_svfiprintf_r+0x1fc>
 8004f68:	7821      	ldrb	r1, [r4, #0]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	f7fb f93f 	bl	80001f0 <memchr>
 8004f72:	b140      	cbz	r0, 8004f86 <_svfiprintf_r+0x152>
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	eba0 000a 	sub.w	r0, r0, sl
 8004f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f7e:	9b04      	ldr	r3, [sp, #16]
 8004f80:	4303      	orrs	r3, r0
 8004f82:	3401      	adds	r4, #1
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8a:	4826      	ldr	r0, [pc, #152]	; (8005024 <_svfiprintf_r+0x1f0>)
 8004f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f90:	2206      	movs	r2, #6
 8004f92:	f7fb f92d 	bl	80001f0 <memchr>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d038      	beq.n	800500c <_svfiprintf_r+0x1d8>
 8004f9a:	4b23      	ldr	r3, [pc, #140]	; (8005028 <_svfiprintf_r+0x1f4>)
 8004f9c:	bb1b      	cbnz	r3, 8004fe6 <_svfiprintf_r+0x1b2>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	f023 0307 	bic.w	r3, r3, #7
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fac:	4433      	add	r3, r6
 8004fae:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb0:	e767      	b.n	8004e82 <_svfiprintf_r+0x4e>
 8004fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	2001      	movs	r0, #1
 8004fba:	e7a5      	b.n	8004f08 <_svfiprintf_r+0xd4>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	3401      	adds	r4, #1
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	f04f 0c0a 	mov.w	ip, #10
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fce:	3a30      	subs	r2, #48	; 0x30
 8004fd0:	2a09      	cmp	r2, #9
 8004fd2:	d903      	bls.n	8004fdc <_svfiprintf_r+0x1a8>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0c5      	beq.n	8004f64 <_svfiprintf_r+0x130>
 8004fd8:	9105      	str	r1, [sp, #20]
 8004fda:	e7c3      	b.n	8004f64 <_svfiprintf_r+0x130>
 8004fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e7f0      	b.n	8004fc8 <_svfiprintf_r+0x194>
 8004fe6:	ab03      	add	r3, sp, #12
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	462a      	mov	r2, r5
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <_svfiprintf_r+0x1f8>)
 8004fee:	a904      	add	r1, sp, #16
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f3af 8000 	nop.w
 8004ff6:	1c42      	adds	r2, r0, #1
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	d1d6      	bne.n	8004faa <_svfiprintf_r+0x176>
 8004ffc:	89ab      	ldrh	r3, [r5, #12]
 8004ffe:	065b      	lsls	r3, r3, #25
 8005000:	f53f af2c 	bmi.w	8004e5c <_svfiprintf_r+0x28>
 8005004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005006:	b01d      	add	sp, #116	; 0x74
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500c:	ab03      	add	r3, sp, #12
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	462a      	mov	r2, r5
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <_svfiprintf_r+0x1f8>)
 8005014:	a904      	add	r1, sp, #16
 8005016:	4638      	mov	r0, r7
 8005018:	f000 f87a 	bl	8005110 <_printf_i>
 800501c:	e7eb      	b.n	8004ff6 <_svfiprintf_r+0x1c2>
 800501e:	bf00      	nop
 8005020:	0800665d 	.word	0x0800665d
 8005024:	08006667 	.word	0x08006667
 8005028:	00000000 	.word	0x00000000
 800502c:	08004d7d 	.word	0x08004d7d
 8005030:	08006663 	.word	0x08006663

08005034 <_printf_common>:
 8005034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	4616      	mov	r6, r2
 800503a:	4699      	mov	r9, r3
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	690b      	ldr	r3, [r1, #16]
 8005040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005044:	4293      	cmp	r3, r2
 8005046:	bfb8      	it	lt
 8005048:	4613      	movlt	r3, r2
 800504a:	6033      	str	r3, [r6, #0]
 800504c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005050:	4607      	mov	r7, r0
 8005052:	460c      	mov	r4, r1
 8005054:	b10a      	cbz	r2, 800505a <_printf_common+0x26>
 8005056:	3301      	adds	r3, #1
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	0699      	lsls	r1, r3, #26
 800505e:	bf42      	ittt	mi
 8005060:	6833      	ldrmi	r3, [r6, #0]
 8005062:	3302      	addmi	r3, #2
 8005064:	6033      	strmi	r3, [r6, #0]
 8005066:	6825      	ldr	r5, [r4, #0]
 8005068:	f015 0506 	ands.w	r5, r5, #6
 800506c:	d106      	bne.n	800507c <_printf_common+0x48>
 800506e:	f104 0a19 	add.w	sl, r4, #25
 8005072:	68e3      	ldr	r3, [r4, #12]
 8005074:	6832      	ldr	r2, [r6, #0]
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	42ab      	cmp	r3, r5
 800507a:	dc26      	bgt.n	80050ca <_printf_common+0x96>
 800507c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005080:	1e13      	subs	r3, r2, #0
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	bf18      	it	ne
 8005086:	2301      	movne	r3, #1
 8005088:	0692      	lsls	r2, r2, #26
 800508a:	d42b      	bmi.n	80050e4 <_printf_common+0xb0>
 800508c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d01e      	beq.n	80050d8 <_printf_common+0xa4>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	68e5      	ldr	r5, [r4, #12]
 800509e:	6832      	ldr	r2, [r6, #0]
 80050a0:	f003 0306 	and.w	r3, r3, #6
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	bf08      	it	eq
 80050a8:	1aad      	subeq	r5, r5, r2
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	bf0c      	ite	eq
 80050b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b4:	2500      	movne	r5, #0
 80050b6:	4293      	cmp	r3, r2
 80050b8:	bfc4      	itt	gt
 80050ba:	1a9b      	subgt	r3, r3, r2
 80050bc:	18ed      	addgt	r5, r5, r3
 80050be:	2600      	movs	r6, #0
 80050c0:	341a      	adds	r4, #26
 80050c2:	42b5      	cmp	r5, r6
 80050c4:	d11a      	bne.n	80050fc <_printf_common+0xc8>
 80050c6:	2000      	movs	r0, #0
 80050c8:	e008      	b.n	80050dc <_printf_common+0xa8>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4652      	mov	r2, sl
 80050ce:	4649      	mov	r1, r9
 80050d0:	4638      	mov	r0, r7
 80050d2:	47c0      	blx	r8
 80050d4:	3001      	adds	r0, #1
 80050d6:	d103      	bne.n	80050e0 <_printf_common+0xac>
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e0:	3501      	adds	r5, #1
 80050e2:	e7c6      	b.n	8005072 <_printf_common+0x3e>
 80050e4:	18e1      	adds	r1, r4, r3
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	2030      	movs	r0, #48	; 0x30
 80050ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ee:	4422      	add	r2, r4
 80050f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f8:	3302      	adds	r3, #2
 80050fa:	e7c7      	b.n	800508c <_printf_common+0x58>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4622      	mov	r2, r4
 8005100:	4649      	mov	r1, r9
 8005102:	4638      	mov	r0, r7
 8005104:	47c0      	blx	r8
 8005106:	3001      	adds	r0, #1
 8005108:	d0e6      	beq.n	80050d8 <_printf_common+0xa4>
 800510a:	3601      	adds	r6, #1
 800510c:	e7d9      	b.n	80050c2 <_printf_common+0x8e>
	...

08005110 <_printf_i>:
 8005110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005114:	460c      	mov	r4, r1
 8005116:	4691      	mov	r9, r2
 8005118:	7e27      	ldrb	r7, [r4, #24]
 800511a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800511c:	2f78      	cmp	r7, #120	; 0x78
 800511e:	4680      	mov	r8, r0
 8005120:	469a      	mov	sl, r3
 8005122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005126:	d807      	bhi.n	8005138 <_printf_i+0x28>
 8005128:	2f62      	cmp	r7, #98	; 0x62
 800512a:	d80a      	bhi.n	8005142 <_printf_i+0x32>
 800512c:	2f00      	cmp	r7, #0
 800512e:	f000 80d8 	beq.w	80052e2 <_printf_i+0x1d2>
 8005132:	2f58      	cmp	r7, #88	; 0x58
 8005134:	f000 80a3 	beq.w	800527e <_printf_i+0x16e>
 8005138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800513c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005140:	e03a      	b.n	80051b8 <_printf_i+0xa8>
 8005142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005146:	2b15      	cmp	r3, #21
 8005148:	d8f6      	bhi.n	8005138 <_printf_i+0x28>
 800514a:	a001      	add	r0, pc, #4	; (adr r0, 8005150 <_printf_i+0x40>)
 800514c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005150:	080051a9 	.word	0x080051a9
 8005154:	080051bd 	.word	0x080051bd
 8005158:	08005139 	.word	0x08005139
 800515c:	08005139 	.word	0x08005139
 8005160:	08005139 	.word	0x08005139
 8005164:	08005139 	.word	0x08005139
 8005168:	080051bd 	.word	0x080051bd
 800516c:	08005139 	.word	0x08005139
 8005170:	08005139 	.word	0x08005139
 8005174:	08005139 	.word	0x08005139
 8005178:	08005139 	.word	0x08005139
 800517c:	080052c9 	.word	0x080052c9
 8005180:	080051ed 	.word	0x080051ed
 8005184:	080052ab 	.word	0x080052ab
 8005188:	08005139 	.word	0x08005139
 800518c:	08005139 	.word	0x08005139
 8005190:	080052eb 	.word	0x080052eb
 8005194:	08005139 	.word	0x08005139
 8005198:	080051ed 	.word	0x080051ed
 800519c:	08005139 	.word	0x08005139
 80051a0:	08005139 	.word	0x08005139
 80051a4:	080052b3 	.word	0x080052b3
 80051a8:	680b      	ldr	r3, [r1, #0]
 80051aa:	1d1a      	adds	r2, r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	600a      	str	r2, [r1, #0]
 80051b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0a3      	b.n	8005304 <_printf_i+0x1f4>
 80051bc:	6825      	ldr	r5, [r4, #0]
 80051be:	6808      	ldr	r0, [r1, #0]
 80051c0:	062e      	lsls	r6, r5, #24
 80051c2:	f100 0304 	add.w	r3, r0, #4
 80051c6:	d50a      	bpl.n	80051de <_printf_i+0xce>
 80051c8:	6805      	ldr	r5, [r0, #0]
 80051ca:	600b      	str	r3, [r1, #0]
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	da03      	bge.n	80051d8 <_printf_i+0xc8>
 80051d0:	232d      	movs	r3, #45	; 0x2d
 80051d2:	426d      	negs	r5, r5
 80051d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d8:	485e      	ldr	r0, [pc, #376]	; (8005354 <_printf_i+0x244>)
 80051da:	230a      	movs	r3, #10
 80051dc:	e019      	b.n	8005212 <_printf_i+0x102>
 80051de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051e2:	6805      	ldr	r5, [r0, #0]
 80051e4:	600b      	str	r3, [r1, #0]
 80051e6:	bf18      	it	ne
 80051e8:	b22d      	sxthne	r5, r5
 80051ea:	e7ef      	b.n	80051cc <_printf_i+0xbc>
 80051ec:	680b      	ldr	r3, [r1, #0]
 80051ee:	6825      	ldr	r5, [r4, #0]
 80051f0:	1d18      	adds	r0, r3, #4
 80051f2:	6008      	str	r0, [r1, #0]
 80051f4:	0628      	lsls	r0, r5, #24
 80051f6:	d501      	bpl.n	80051fc <_printf_i+0xec>
 80051f8:	681d      	ldr	r5, [r3, #0]
 80051fa:	e002      	b.n	8005202 <_printf_i+0xf2>
 80051fc:	0669      	lsls	r1, r5, #25
 80051fe:	d5fb      	bpl.n	80051f8 <_printf_i+0xe8>
 8005200:	881d      	ldrh	r5, [r3, #0]
 8005202:	4854      	ldr	r0, [pc, #336]	; (8005354 <_printf_i+0x244>)
 8005204:	2f6f      	cmp	r7, #111	; 0x6f
 8005206:	bf0c      	ite	eq
 8005208:	2308      	moveq	r3, #8
 800520a:	230a      	movne	r3, #10
 800520c:	2100      	movs	r1, #0
 800520e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005212:	6866      	ldr	r6, [r4, #4]
 8005214:	60a6      	str	r6, [r4, #8]
 8005216:	2e00      	cmp	r6, #0
 8005218:	bfa2      	ittt	ge
 800521a:	6821      	ldrge	r1, [r4, #0]
 800521c:	f021 0104 	bicge.w	r1, r1, #4
 8005220:	6021      	strge	r1, [r4, #0]
 8005222:	b90d      	cbnz	r5, 8005228 <_printf_i+0x118>
 8005224:	2e00      	cmp	r6, #0
 8005226:	d04d      	beq.n	80052c4 <_printf_i+0x1b4>
 8005228:	4616      	mov	r6, r2
 800522a:	fbb5 f1f3 	udiv	r1, r5, r3
 800522e:	fb03 5711 	mls	r7, r3, r1, r5
 8005232:	5dc7      	ldrb	r7, [r0, r7]
 8005234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005238:	462f      	mov	r7, r5
 800523a:	42bb      	cmp	r3, r7
 800523c:	460d      	mov	r5, r1
 800523e:	d9f4      	bls.n	800522a <_printf_i+0x11a>
 8005240:	2b08      	cmp	r3, #8
 8005242:	d10b      	bne.n	800525c <_printf_i+0x14c>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07df      	lsls	r7, r3, #31
 8005248:	d508      	bpl.n	800525c <_printf_i+0x14c>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6861      	ldr	r1, [r4, #4]
 800524e:	4299      	cmp	r1, r3
 8005250:	bfde      	ittt	le
 8005252:	2330      	movle	r3, #48	; 0x30
 8005254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800525c:	1b92      	subs	r2, r2, r6
 800525e:	6122      	str	r2, [r4, #16]
 8005260:	f8cd a000 	str.w	sl, [sp]
 8005264:	464b      	mov	r3, r9
 8005266:	aa03      	add	r2, sp, #12
 8005268:	4621      	mov	r1, r4
 800526a:	4640      	mov	r0, r8
 800526c:	f7ff fee2 	bl	8005034 <_printf_common>
 8005270:	3001      	adds	r0, #1
 8005272:	d14c      	bne.n	800530e <_printf_i+0x1fe>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	b004      	add	sp, #16
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	4835      	ldr	r0, [pc, #212]	; (8005354 <_printf_i+0x244>)
 8005280:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	680e      	ldr	r6, [r1, #0]
 8005288:	061f      	lsls	r7, r3, #24
 800528a:	f856 5b04 	ldr.w	r5, [r6], #4
 800528e:	600e      	str	r6, [r1, #0]
 8005290:	d514      	bpl.n	80052bc <_printf_i+0x1ac>
 8005292:	07d9      	lsls	r1, r3, #31
 8005294:	bf44      	itt	mi
 8005296:	f043 0320 	orrmi.w	r3, r3, #32
 800529a:	6023      	strmi	r3, [r4, #0]
 800529c:	b91d      	cbnz	r5, 80052a6 <_printf_i+0x196>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	f023 0320 	bic.w	r3, r3, #32
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	2310      	movs	r3, #16
 80052a8:	e7b0      	b.n	800520c <_printf_i+0xfc>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	2378      	movs	r3, #120	; 0x78
 80052b4:	4828      	ldr	r0, [pc, #160]	; (8005358 <_printf_i+0x248>)
 80052b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ba:	e7e3      	b.n	8005284 <_printf_i+0x174>
 80052bc:	065e      	lsls	r6, r3, #25
 80052be:	bf48      	it	mi
 80052c0:	b2ad      	uxthmi	r5, r5
 80052c2:	e7e6      	b.n	8005292 <_printf_i+0x182>
 80052c4:	4616      	mov	r6, r2
 80052c6:	e7bb      	b.n	8005240 <_printf_i+0x130>
 80052c8:	680b      	ldr	r3, [r1, #0]
 80052ca:	6826      	ldr	r6, [r4, #0]
 80052cc:	6960      	ldr	r0, [r4, #20]
 80052ce:	1d1d      	adds	r5, r3, #4
 80052d0:	600d      	str	r5, [r1, #0]
 80052d2:	0635      	lsls	r5, r6, #24
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	d501      	bpl.n	80052dc <_printf_i+0x1cc>
 80052d8:	6018      	str	r0, [r3, #0]
 80052da:	e002      	b.n	80052e2 <_printf_i+0x1d2>
 80052dc:	0671      	lsls	r1, r6, #25
 80052de:	d5fb      	bpl.n	80052d8 <_printf_i+0x1c8>
 80052e0:	8018      	strh	r0, [r3, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	4616      	mov	r6, r2
 80052e8:	e7ba      	b.n	8005260 <_printf_i+0x150>
 80052ea:	680b      	ldr	r3, [r1, #0]
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	600a      	str	r2, [r1, #0]
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4630      	mov	r0, r6
 80052f8:	f7fa ff7a 	bl	80001f0 <memchr>
 80052fc:	b108      	cbz	r0, 8005302 <_printf_i+0x1f2>
 80052fe:	1b80      	subs	r0, r0, r6
 8005300:	6060      	str	r0, [r4, #4]
 8005302:	6863      	ldr	r3, [r4, #4]
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	2300      	movs	r3, #0
 8005308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530c:	e7a8      	b.n	8005260 <_printf_i+0x150>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	4632      	mov	r2, r6
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	47d0      	blx	sl
 8005318:	3001      	adds	r0, #1
 800531a:	d0ab      	beq.n	8005274 <_printf_i+0x164>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	079b      	lsls	r3, r3, #30
 8005320:	d413      	bmi.n	800534a <_printf_i+0x23a>
 8005322:	68e0      	ldr	r0, [r4, #12]
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	4298      	cmp	r0, r3
 8005328:	bfb8      	it	lt
 800532a:	4618      	movlt	r0, r3
 800532c:	e7a4      	b.n	8005278 <_printf_i+0x168>
 800532e:	2301      	movs	r3, #1
 8005330:	4632      	mov	r2, r6
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d09b      	beq.n	8005274 <_printf_i+0x164>
 800533c:	3501      	adds	r5, #1
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	9903      	ldr	r1, [sp, #12]
 8005342:	1a5b      	subs	r3, r3, r1
 8005344:	42ab      	cmp	r3, r5
 8005346:	dcf2      	bgt.n	800532e <_printf_i+0x21e>
 8005348:	e7eb      	b.n	8005322 <_printf_i+0x212>
 800534a:	2500      	movs	r5, #0
 800534c:	f104 0619 	add.w	r6, r4, #25
 8005350:	e7f5      	b.n	800533e <_printf_i+0x22e>
 8005352:	bf00      	nop
 8005354:	0800666e 	.word	0x0800666e
 8005358:	0800667f 	.word	0x0800667f

0800535c <memcpy>:
 800535c:	440a      	add	r2, r1
 800535e:	4291      	cmp	r1, r2
 8005360:	f100 33ff 	add.w	r3, r0, #4294967295
 8005364:	d100      	bne.n	8005368 <memcpy+0xc>
 8005366:	4770      	bx	lr
 8005368:	b510      	push	{r4, lr}
 800536a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005372:	4291      	cmp	r1, r2
 8005374:	d1f9      	bne.n	800536a <memcpy+0xe>
 8005376:	bd10      	pop	{r4, pc}

08005378 <memmove>:
 8005378:	4288      	cmp	r0, r1
 800537a:	b510      	push	{r4, lr}
 800537c:	eb01 0402 	add.w	r4, r1, r2
 8005380:	d902      	bls.n	8005388 <memmove+0x10>
 8005382:	4284      	cmp	r4, r0
 8005384:	4623      	mov	r3, r4
 8005386:	d807      	bhi.n	8005398 <memmove+0x20>
 8005388:	1e43      	subs	r3, r0, #1
 800538a:	42a1      	cmp	r1, r4
 800538c:	d008      	beq.n	80053a0 <memmove+0x28>
 800538e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005396:	e7f8      	b.n	800538a <memmove+0x12>
 8005398:	4402      	add	r2, r0
 800539a:	4601      	mov	r1, r0
 800539c:	428a      	cmp	r2, r1
 800539e:	d100      	bne.n	80053a2 <memmove+0x2a>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053aa:	e7f7      	b.n	800539c <memmove+0x24>

080053ac <_free_r>:
 80053ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d048      	beq.n	8005444 <_free_r+0x98>
 80053b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b6:	9001      	str	r0, [sp, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f1a1 0404 	sub.w	r4, r1, #4
 80053be:	bfb8      	it	lt
 80053c0:	18e4      	addlt	r4, r4, r3
 80053c2:	f000 f8d3 	bl	800556c <__malloc_lock>
 80053c6:	4a20      	ldr	r2, [pc, #128]	; (8005448 <_free_r+0x9c>)
 80053c8:	9801      	ldr	r0, [sp, #4]
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	4615      	mov	r5, r2
 80053ce:	b933      	cbnz	r3, 80053de <_free_r+0x32>
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	6014      	str	r4, [r2, #0]
 80053d4:	b003      	add	sp, #12
 80053d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053da:	f000 b8cd 	b.w	8005578 <__malloc_unlock>
 80053de:	42a3      	cmp	r3, r4
 80053e0:	d90b      	bls.n	80053fa <_free_r+0x4e>
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	1862      	adds	r2, r4, r1
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bf04      	itt	eq
 80053ea:	681a      	ldreq	r2, [r3, #0]
 80053ec:	685b      	ldreq	r3, [r3, #4]
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	bf04      	itt	eq
 80053f2:	1852      	addeq	r2, r2, r1
 80053f4:	6022      	streq	r2, [r4, #0]
 80053f6:	602c      	str	r4, [r5, #0]
 80053f8:	e7ec      	b.n	80053d4 <_free_r+0x28>
 80053fa:	461a      	mov	r2, r3
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	b10b      	cbz	r3, 8005404 <_free_r+0x58>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d9fa      	bls.n	80053fa <_free_r+0x4e>
 8005404:	6811      	ldr	r1, [r2, #0]
 8005406:	1855      	adds	r5, r2, r1
 8005408:	42a5      	cmp	r5, r4
 800540a:	d10b      	bne.n	8005424 <_free_r+0x78>
 800540c:	6824      	ldr	r4, [r4, #0]
 800540e:	4421      	add	r1, r4
 8005410:	1854      	adds	r4, r2, r1
 8005412:	42a3      	cmp	r3, r4
 8005414:	6011      	str	r1, [r2, #0]
 8005416:	d1dd      	bne.n	80053d4 <_free_r+0x28>
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	6053      	str	r3, [r2, #4]
 800541e:	4421      	add	r1, r4
 8005420:	6011      	str	r1, [r2, #0]
 8005422:	e7d7      	b.n	80053d4 <_free_r+0x28>
 8005424:	d902      	bls.n	800542c <_free_r+0x80>
 8005426:	230c      	movs	r3, #12
 8005428:	6003      	str	r3, [r0, #0]
 800542a:	e7d3      	b.n	80053d4 <_free_r+0x28>
 800542c:	6825      	ldr	r5, [r4, #0]
 800542e:	1961      	adds	r1, r4, r5
 8005430:	428b      	cmp	r3, r1
 8005432:	bf04      	itt	eq
 8005434:	6819      	ldreq	r1, [r3, #0]
 8005436:	685b      	ldreq	r3, [r3, #4]
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	bf04      	itt	eq
 800543c:	1949      	addeq	r1, r1, r5
 800543e:	6021      	streq	r1, [r4, #0]
 8005440:	6054      	str	r4, [r2, #4]
 8005442:	e7c7      	b.n	80053d4 <_free_r+0x28>
 8005444:	b003      	add	sp, #12
 8005446:	bd30      	pop	{r4, r5, pc}
 8005448:	200000a4 	.word	0x200000a4

0800544c <_malloc_r>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	1ccd      	adds	r5, r1, #3
 8005450:	f025 0503 	bic.w	r5, r5, #3
 8005454:	3508      	adds	r5, #8
 8005456:	2d0c      	cmp	r5, #12
 8005458:	bf38      	it	cc
 800545a:	250c      	movcc	r5, #12
 800545c:	2d00      	cmp	r5, #0
 800545e:	4606      	mov	r6, r0
 8005460:	db01      	blt.n	8005466 <_malloc_r+0x1a>
 8005462:	42a9      	cmp	r1, r5
 8005464:	d903      	bls.n	800546e <_malloc_r+0x22>
 8005466:	230c      	movs	r3, #12
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	2000      	movs	r0, #0
 800546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546e:	f000 f87d 	bl	800556c <__malloc_lock>
 8005472:	4921      	ldr	r1, [pc, #132]	; (80054f8 <_malloc_r+0xac>)
 8005474:	680a      	ldr	r2, [r1, #0]
 8005476:	4614      	mov	r4, r2
 8005478:	b99c      	cbnz	r4, 80054a2 <_malloc_r+0x56>
 800547a:	4f20      	ldr	r7, [pc, #128]	; (80054fc <_malloc_r+0xb0>)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	b923      	cbnz	r3, 800548a <_malloc_r+0x3e>
 8005480:	4621      	mov	r1, r4
 8005482:	4630      	mov	r0, r6
 8005484:	f000 f862 	bl	800554c <_sbrk_r>
 8005488:	6038      	str	r0, [r7, #0]
 800548a:	4629      	mov	r1, r5
 800548c:	4630      	mov	r0, r6
 800548e:	f000 f85d 	bl	800554c <_sbrk_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d123      	bne.n	80054de <_malloc_r+0x92>
 8005496:	230c      	movs	r3, #12
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f86c 	bl	8005578 <__malloc_unlock>
 80054a0:	e7e3      	b.n	800546a <_malloc_r+0x1e>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	1b5b      	subs	r3, r3, r5
 80054a6:	d417      	bmi.n	80054d8 <_malloc_r+0x8c>
 80054a8:	2b0b      	cmp	r3, #11
 80054aa:	d903      	bls.n	80054b4 <_malloc_r+0x68>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	441c      	add	r4, r3
 80054b0:	6025      	str	r5, [r4, #0]
 80054b2:	e004      	b.n	80054be <_malloc_r+0x72>
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	42a2      	cmp	r2, r4
 80054b8:	bf0c      	ite	eq
 80054ba:	600b      	streq	r3, [r1, #0]
 80054bc:	6053      	strne	r3, [r2, #4]
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f85a 	bl	8005578 <__malloc_unlock>
 80054c4:	f104 000b 	add.w	r0, r4, #11
 80054c8:	1d23      	adds	r3, r4, #4
 80054ca:	f020 0007 	bic.w	r0, r0, #7
 80054ce:	1ac2      	subs	r2, r0, r3
 80054d0:	d0cc      	beq.n	800546c <_malloc_r+0x20>
 80054d2:	1a1b      	subs	r3, r3, r0
 80054d4:	50a3      	str	r3, [r4, r2]
 80054d6:	e7c9      	b.n	800546c <_malloc_r+0x20>
 80054d8:	4622      	mov	r2, r4
 80054da:	6864      	ldr	r4, [r4, #4]
 80054dc:	e7cc      	b.n	8005478 <_malloc_r+0x2c>
 80054de:	1cc4      	adds	r4, r0, #3
 80054e0:	f024 0403 	bic.w	r4, r4, #3
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d0e3      	beq.n	80054b0 <_malloc_r+0x64>
 80054e8:	1a21      	subs	r1, r4, r0
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 f82e 	bl	800554c <_sbrk_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d1dd      	bne.n	80054b0 <_malloc_r+0x64>
 80054f4:	e7cf      	b.n	8005496 <_malloc_r+0x4a>
 80054f6:	bf00      	nop
 80054f8:	200000a4 	.word	0x200000a4
 80054fc:	200000a8 	.word	0x200000a8

08005500 <_realloc_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	4607      	mov	r7, r0
 8005504:	4614      	mov	r4, r2
 8005506:	460e      	mov	r6, r1
 8005508:	b921      	cbnz	r1, 8005514 <_realloc_r+0x14>
 800550a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800550e:	4611      	mov	r1, r2
 8005510:	f7ff bf9c 	b.w	800544c <_malloc_r>
 8005514:	b922      	cbnz	r2, 8005520 <_realloc_r+0x20>
 8005516:	f7ff ff49 	bl	80053ac <_free_r>
 800551a:	4625      	mov	r5, r4
 800551c:	4628      	mov	r0, r5
 800551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005520:	f000 f830 	bl	8005584 <_malloc_usable_size_r>
 8005524:	42a0      	cmp	r0, r4
 8005526:	d20f      	bcs.n	8005548 <_realloc_r+0x48>
 8005528:	4621      	mov	r1, r4
 800552a:	4638      	mov	r0, r7
 800552c:	f7ff ff8e 	bl	800544c <_malloc_r>
 8005530:	4605      	mov	r5, r0
 8005532:	2800      	cmp	r0, #0
 8005534:	d0f2      	beq.n	800551c <_realloc_r+0x1c>
 8005536:	4631      	mov	r1, r6
 8005538:	4622      	mov	r2, r4
 800553a:	f7ff ff0f 	bl	800535c <memcpy>
 800553e:	4631      	mov	r1, r6
 8005540:	4638      	mov	r0, r7
 8005542:	f7ff ff33 	bl	80053ac <_free_r>
 8005546:	e7e9      	b.n	800551c <_realloc_r+0x1c>
 8005548:	4635      	mov	r5, r6
 800554a:	e7e7      	b.n	800551c <_realloc_r+0x1c>

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d06      	ldr	r5, [pc, #24]	; (8005568 <_sbrk_r+0x1c>)
 8005550:	2300      	movs	r3, #0
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fc fb4a 	bl	8001bf0 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000274 	.word	0x20000274

0800556c <__malloc_lock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_lock+0x8>)
 800556e:	f000 b811 	b.w	8005594 <__retarget_lock_acquire_recursive>
 8005572:	bf00      	nop
 8005574:	2000027c 	.word	0x2000027c

08005578 <__malloc_unlock>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__malloc_unlock+0x8>)
 800557a:	f000 b80c 	b.w	8005596 <__retarget_lock_release_recursive>
 800557e:	bf00      	nop
 8005580:	2000027c 	.word	0x2000027c

08005584 <_malloc_usable_size_r>:
 8005584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005588:	1f18      	subs	r0, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfbc      	itt	lt
 800558e:	580b      	ldrlt	r3, [r1, r0]
 8005590:	18c0      	addlt	r0, r0, r3
 8005592:	4770      	bx	lr

08005594 <__retarget_lock_acquire_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_release_recursive>:
 8005596:	4770      	bx	lr

08005598 <pow>:
 8005598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800559c:	ec59 8b10 	vmov	r8, r9, d0
 80055a0:	ec57 6b11 	vmov	r6, r7, d1
 80055a4:	f000 f8a8 	bl	80056f8 <__ieee754_pow>
 80055a8:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <pow+0x14c>)
 80055aa:	f993 3000 	ldrsb.w	r3, [r3]
 80055ae:	3301      	adds	r3, #1
 80055b0:	ec55 4b10 	vmov	r4, r5, d0
 80055b4:	d015      	beq.n	80055e2 <pow+0x4a>
 80055b6:	4632      	mov	r2, r6
 80055b8:	463b      	mov	r3, r7
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	f7fb fabd 	bl	8000b3c <__aeabi_dcmpun>
 80055c2:	b970      	cbnz	r0, 80055e2 <pow+0x4a>
 80055c4:	4642      	mov	r2, r8
 80055c6:	464b      	mov	r3, r9
 80055c8:	4640      	mov	r0, r8
 80055ca:	4649      	mov	r1, r9
 80055cc:	f7fb fab6 	bl	8000b3c <__aeabi_dcmpun>
 80055d0:	2200      	movs	r2, #0
 80055d2:	2300      	movs	r3, #0
 80055d4:	b148      	cbz	r0, 80055ea <pow+0x52>
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fb fa7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d17d      	bne.n	80056de <pow+0x146>
 80055e2:	ec45 4b10 	vmov	d0, r4, r5
 80055e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ea:	4640      	mov	r0, r8
 80055ec:	4649      	mov	r1, r9
 80055ee:	f7fb fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80055f2:	b1e0      	cbz	r0, 800562e <pow+0x96>
 80055f4:	2200      	movs	r2, #0
 80055f6:	2300      	movs	r3, #0
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fb fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005600:	2800      	cmp	r0, #0
 8005602:	d16c      	bne.n	80056de <pow+0x146>
 8005604:	ec47 6b10 	vmov	d0, r6, r7
 8005608:	f000 fe55 	bl	80062b6 <finite>
 800560c:	2800      	cmp	r0, #0
 800560e:	d0e8      	beq.n	80055e2 <pow+0x4a>
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb fa68 	bl	8000aec <__aeabi_dcmplt>
 800561c:	2800      	cmp	r0, #0
 800561e:	d0e0      	beq.n	80055e2 <pow+0x4a>
 8005620:	f7ff facc 	bl	8004bbc <__errno>
 8005624:	2321      	movs	r3, #33	; 0x21
 8005626:	6003      	str	r3, [r0, #0]
 8005628:	2400      	movs	r4, #0
 800562a:	4d2f      	ldr	r5, [pc, #188]	; (80056e8 <pow+0x150>)
 800562c:	e7d9      	b.n	80055e2 <pow+0x4a>
 800562e:	ec45 4b10 	vmov	d0, r4, r5
 8005632:	f000 fe40 	bl	80062b6 <finite>
 8005636:	bbb8      	cbnz	r0, 80056a8 <pow+0x110>
 8005638:	ec49 8b10 	vmov	d0, r8, r9
 800563c:	f000 fe3b 	bl	80062b6 <finite>
 8005640:	b390      	cbz	r0, 80056a8 <pow+0x110>
 8005642:	ec47 6b10 	vmov	d0, r6, r7
 8005646:	f000 fe36 	bl	80062b6 <finite>
 800564a:	b368      	cbz	r0, 80056a8 <pow+0x110>
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	4620      	mov	r0, r4
 8005652:	4629      	mov	r1, r5
 8005654:	f7fb fa72 	bl	8000b3c <__aeabi_dcmpun>
 8005658:	b160      	cbz	r0, 8005674 <pow+0xdc>
 800565a:	f7ff faaf 	bl	8004bbc <__errno>
 800565e:	2321      	movs	r3, #33	; 0x21
 8005660:	6003      	str	r3, [r0, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	2300      	movs	r3, #0
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	f7fb f8f7 	bl	800085c <__aeabi_ddiv>
 800566e:	4604      	mov	r4, r0
 8005670:	460d      	mov	r5, r1
 8005672:	e7b6      	b.n	80055e2 <pow+0x4a>
 8005674:	f7ff faa2 	bl	8004bbc <__errno>
 8005678:	2322      	movs	r3, #34	; 0x22
 800567a:	6003      	str	r3, [r0, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	2300      	movs	r3, #0
 8005680:	4640      	mov	r0, r8
 8005682:	4649      	mov	r1, r9
 8005684:	f7fb fa32 	bl	8000aec <__aeabi_dcmplt>
 8005688:	2400      	movs	r4, #0
 800568a:	b158      	cbz	r0, 80056a4 <pow+0x10c>
 800568c:	ec47 6b10 	vmov	d0, r6, r7
 8005690:	f000 fe26 	bl	80062e0 <rint>
 8005694:	4632      	mov	r2, r6
 8005696:	ec51 0b10 	vmov	r0, r1, d0
 800569a:	463b      	mov	r3, r7
 800569c:	f7fb fa1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d0c2      	beq.n	800562a <pow+0x92>
 80056a4:	4d11      	ldr	r5, [pc, #68]	; (80056ec <pow+0x154>)
 80056a6:	e79c      	b.n	80055e2 <pow+0x4a>
 80056a8:	2200      	movs	r2, #0
 80056aa:	2300      	movs	r3, #0
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	f7fb fa12 	bl	8000ad8 <__aeabi_dcmpeq>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d094      	beq.n	80055e2 <pow+0x4a>
 80056b8:	ec49 8b10 	vmov	d0, r8, r9
 80056bc:	f000 fdfb 	bl	80062b6 <finite>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d08e      	beq.n	80055e2 <pow+0x4a>
 80056c4:	ec47 6b10 	vmov	d0, r6, r7
 80056c8:	f000 fdf5 	bl	80062b6 <finite>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d088      	beq.n	80055e2 <pow+0x4a>
 80056d0:	f7ff fa74 	bl	8004bbc <__errno>
 80056d4:	2322      	movs	r3, #34	; 0x22
 80056d6:	6003      	str	r3, [r0, #0]
 80056d8:	2400      	movs	r4, #0
 80056da:	2500      	movs	r5, #0
 80056dc:	e781      	b.n	80055e2 <pow+0x4a>
 80056de:	4d04      	ldr	r5, [pc, #16]	; (80056f0 <pow+0x158>)
 80056e0:	2400      	movs	r4, #0
 80056e2:	e77e      	b.n	80055e2 <pow+0x4a>
 80056e4:	20000074 	.word	0x20000074
 80056e8:	fff00000 	.word	0xfff00000
 80056ec:	7ff00000 	.word	0x7ff00000
 80056f0:	3ff00000 	.word	0x3ff00000
 80056f4:	00000000 	.word	0x00000000

080056f8 <__ieee754_pow>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	ed2d 8b06 	vpush	{d8-d10}
 8005700:	b08d      	sub	sp, #52	; 0x34
 8005702:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005706:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800570a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800570e:	ea56 0100 	orrs.w	r1, r6, r0
 8005712:	ec53 2b10 	vmov	r2, r3, d0
 8005716:	f000 84d1 	beq.w	80060bc <__ieee754_pow+0x9c4>
 800571a:	497f      	ldr	r1, [pc, #508]	; (8005918 <__ieee754_pow+0x220>)
 800571c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005720:	428c      	cmp	r4, r1
 8005722:	ee10 8a10 	vmov	r8, s0
 8005726:	4699      	mov	r9, r3
 8005728:	dc09      	bgt.n	800573e <__ieee754_pow+0x46>
 800572a:	d103      	bne.n	8005734 <__ieee754_pow+0x3c>
 800572c:	b97a      	cbnz	r2, 800574e <__ieee754_pow+0x56>
 800572e:	42a6      	cmp	r6, r4
 8005730:	dd02      	ble.n	8005738 <__ieee754_pow+0x40>
 8005732:	e00c      	b.n	800574e <__ieee754_pow+0x56>
 8005734:	428e      	cmp	r6, r1
 8005736:	dc02      	bgt.n	800573e <__ieee754_pow+0x46>
 8005738:	428e      	cmp	r6, r1
 800573a:	d110      	bne.n	800575e <__ieee754_pow+0x66>
 800573c:	b178      	cbz	r0, 800575e <__ieee754_pow+0x66>
 800573e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005742:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005746:	ea54 0308 	orrs.w	r3, r4, r8
 800574a:	f000 84b7 	beq.w	80060bc <__ieee754_pow+0x9c4>
 800574e:	4873      	ldr	r0, [pc, #460]	; (800591c <__ieee754_pow+0x224>)
 8005750:	b00d      	add	sp, #52	; 0x34
 8005752:	ecbd 8b06 	vpop	{d8-d10}
 8005756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f000 bdb9 	b.w	80062d0 <nan>
 800575e:	f1b9 0f00 	cmp.w	r9, #0
 8005762:	da36      	bge.n	80057d2 <__ieee754_pow+0xda>
 8005764:	496e      	ldr	r1, [pc, #440]	; (8005920 <__ieee754_pow+0x228>)
 8005766:	428e      	cmp	r6, r1
 8005768:	dc51      	bgt.n	800580e <__ieee754_pow+0x116>
 800576a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800576e:	428e      	cmp	r6, r1
 8005770:	f340 84af 	ble.w	80060d2 <__ieee754_pow+0x9da>
 8005774:	1531      	asrs	r1, r6, #20
 8005776:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800577a:	2914      	cmp	r1, #20
 800577c:	dd0f      	ble.n	800579e <__ieee754_pow+0xa6>
 800577e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005782:	fa20 fc01 	lsr.w	ip, r0, r1
 8005786:	fa0c f101 	lsl.w	r1, ip, r1
 800578a:	4281      	cmp	r1, r0
 800578c:	f040 84a1 	bne.w	80060d2 <__ieee754_pow+0x9da>
 8005790:	f00c 0c01 	and.w	ip, ip, #1
 8005794:	f1cc 0102 	rsb	r1, ip, #2
 8005798:	9100      	str	r1, [sp, #0]
 800579a:	b180      	cbz	r0, 80057be <__ieee754_pow+0xc6>
 800579c:	e059      	b.n	8005852 <__ieee754_pow+0x15a>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d155      	bne.n	800584e <__ieee754_pow+0x156>
 80057a2:	f1c1 0114 	rsb	r1, r1, #20
 80057a6:	fa46 fc01 	asr.w	ip, r6, r1
 80057aa:	fa0c f101 	lsl.w	r1, ip, r1
 80057ae:	42b1      	cmp	r1, r6
 80057b0:	f040 848c 	bne.w	80060cc <__ieee754_pow+0x9d4>
 80057b4:	f00c 0c01 	and.w	ip, ip, #1
 80057b8:	f1cc 0102 	rsb	r1, ip, #2
 80057bc:	9100      	str	r1, [sp, #0]
 80057be:	4959      	ldr	r1, [pc, #356]	; (8005924 <__ieee754_pow+0x22c>)
 80057c0:	428e      	cmp	r6, r1
 80057c2:	d12d      	bne.n	8005820 <__ieee754_pow+0x128>
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	da79      	bge.n	80058bc <__ieee754_pow+0x1c4>
 80057c8:	4956      	ldr	r1, [pc, #344]	; (8005924 <__ieee754_pow+0x22c>)
 80057ca:	2000      	movs	r0, #0
 80057cc:	f7fb f846 	bl	800085c <__aeabi_ddiv>
 80057d0:	e016      	b.n	8005800 <__ieee754_pow+0x108>
 80057d2:	2100      	movs	r1, #0
 80057d4:	9100      	str	r1, [sp, #0]
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d13b      	bne.n	8005852 <__ieee754_pow+0x15a>
 80057da:	494f      	ldr	r1, [pc, #316]	; (8005918 <__ieee754_pow+0x220>)
 80057dc:	428e      	cmp	r6, r1
 80057de:	d1ee      	bne.n	80057be <__ieee754_pow+0xc6>
 80057e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80057e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80057e8:	ea53 0308 	orrs.w	r3, r3, r8
 80057ec:	f000 8466 	beq.w	80060bc <__ieee754_pow+0x9c4>
 80057f0:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <__ieee754_pow+0x230>)
 80057f2:	429c      	cmp	r4, r3
 80057f4:	dd0d      	ble.n	8005812 <__ieee754_pow+0x11a>
 80057f6:	2f00      	cmp	r7, #0
 80057f8:	f280 8464 	bge.w	80060c4 <__ieee754_pow+0x9cc>
 80057fc:	2000      	movs	r0, #0
 80057fe:	2100      	movs	r1, #0
 8005800:	ec41 0b10 	vmov	d0, r0, r1
 8005804:	b00d      	add	sp, #52	; 0x34
 8005806:	ecbd 8b06 	vpop	{d8-d10}
 800580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580e:	2102      	movs	r1, #2
 8005810:	e7e0      	b.n	80057d4 <__ieee754_pow+0xdc>
 8005812:	2f00      	cmp	r7, #0
 8005814:	daf2      	bge.n	80057fc <__ieee754_pow+0x104>
 8005816:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800581a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800581e:	e7ef      	b.n	8005800 <__ieee754_pow+0x108>
 8005820:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005824:	d104      	bne.n	8005830 <__ieee754_pow+0x138>
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	f7fa feed 	bl	8000608 <__aeabi_dmul>
 800582e:	e7e7      	b.n	8005800 <__ieee754_pow+0x108>
 8005830:	493e      	ldr	r1, [pc, #248]	; (800592c <__ieee754_pow+0x234>)
 8005832:	428f      	cmp	r7, r1
 8005834:	d10d      	bne.n	8005852 <__ieee754_pow+0x15a>
 8005836:	f1b9 0f00 	cmp.w	r9, #0
 800583a:	db0a      	blt.n	8005852 <__ieee754_pow+0x15a>
 800583c:	ec43 2b10 	vmov	d0, r2, r3
 8005840:	b00d      	add	sp, #52	; 0x34
 8005842:	ecbd 8b06 	vpop	{d8-d10}
 8005846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f000 bc77 	b.w	800613c <__ieee754_sqrt>
 800584e:	2100      	movs	r1, #0
 8005850:	9100      	str	r1, [sp, #0]
 8005852:	ec43 2b10 	vmov	d0, r2, r3
 8005856:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800585a:	f000 fd23 	bl	80062a4 <fabs>
 800585e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005862:	ec51 0b10 	vmov	r0, r1, d0
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	d12a      	bne.n	80058c2 <__ieee754_pow+0x1ca>
 800586c:	b12c      	cbz	r4, 800587a <__ieee754_pow+0x182>
 800586e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005924 <__ieee754_pow+0x22c>
 8005872:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005876:	45e6      	cmp	lr, ip
 8005878:	d123      	bne.n	80058c2 <__ieee754_pow+0x1ca>
 800587a:	2f00      	cmp	r7, #0
 800587c:	da05      	bge.n	800588a <__ieee754_pow+0x192>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	2000      	movs	r0, #0
 8005884:	4927      	ldr	r1, [pc, #156]	; (8005924 <__ieee754_pow+0x22c>)
 8005886:	f7fa ffe9 	bl	800085c <__aeabi_ddiv>
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	dab7      	bge.n	8005800 <__ieee754_pow+0x108>
 8005890:	9b00      	ldr	r3, [sp, #0]
 8005892:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005896:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800589a:	4323      	orrs	r3, r4
 800589c:	d108      	bne.n	80058b0 <__ieee754_pow+0x1b8>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fa fcf7 	bl	8000298 <__aeabi_dsub>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	e78d      	b.n	80057cc <__ieee754_pow+0xd4>
 80058b0:	9b00      	ldr	r3, [sp, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d1a4      	bne.n	8005800 <__ieee754_pow+0x108>
 80058b6:	4602      	mov	r2, r0
 80058b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058bc:	4610      	mov	r0, r2
 80058be:	4619      	mov	r1, r3
 80058c0:	e79e      	b.n	8005800 <__ieee754_pow+0x108>
 80058c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80058c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80058ca:	950a      	str	r5, [sp, #40]	; 0x28
 80058cc:	9d00      	ldr	r5, [sp, #0]
 80058ce:	46ac      	mov	ip, r5
 80058d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80058d2:	ea5c 0505 	orrs.w	r5, ip, r5
 80058d6:	d0e4      	beq.n	80058a2 <__ieee754_pow+0x1aa>
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <__ieee754_pow+0x238>)
 80058da:	429e      	cmp	r6, r3
 80058dc:	f340 80fc 	ble.w	8005ad8 <__ieee754_pow+0x3e0>
 80058e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80058e4:	429e      	cmp	r6, r3
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <__ieee754_pow+0x230>)
 80058e8:	dd07      	ble.n	80058fa <__ieee754_pow+0x202>
 80058ea:	429c      	cmp	r4, r3
 80058ec:	dc0a      	bgt.n	8005904 <__ieee754_pow+0x20c>
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	da84      	bge.n	80057fc <__ieee754_pow+0x104>
 80058f2:	a307      	add	r3, pc, #28	; (adr r3, 8005910 <__ieee754_pow+0x218>)
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	e795      	b.n	8005826 <__ieee754_pow+0x12e>
 80058fa:	429c      	cmp	r4, r3
 80058fc:	dbf7      	blt.n	80058ee <__ieee754_pow+0x1f6>
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <__ieee754_pow+0x22c>)
 8005900:	429c      	cmp	r4, r3
 8005902:	dd17      	ble.n	8005934 <__ieee754_pow+0x23c>
 8005904:	2f00      	cmp	r7, #0
 8005906:	dcf4      	bgt.n	80058f2 <__ieee754_pow+0x1fa>
 8005908:	e778      	b.n	80057fc <__ieee754_pow+0x104>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
 8005910:	8800759c 	.word	0x8800759c
 8005914:	7e37e43c 	.word	0x7e37e43c
 8005918:	7ff00000 	.word	0x7ff00000
 800591c:	08006662 	.word	0x08006662
 8005920:	433fffff 	.word	0x433fffff
 8005924:	3ff00000 	.word	0x3ff00000
 8005928:	3fefffff 	.word	0x3fefffff
 800592c:	3fe00000 	.word	0x3fe00000
 8005930:	41e00000 	.word	0x41e00000
 8005934:	4b64      	ldr	r3, [pc, #400]	; (8005ac8 <__ieee754_pow+0x3d0>)
 8005936:	2200      	movs	r2, #0
 8005938:	f7fa fcae 	bl	8000298 <__aeabi_dsub>
 800593c:	a356      	add	r3, pc, #344	; (adr r3, 8005a98 <__ieee754_pow+0x3a0>)
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	f7fa fe5f 	bl	8000608 <__aeabi_dmul>
 800594a:	a355      	add	r3, pc, #340	; (adr r3, 8005aa0 <__ieee754_pow+0x3a8>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fe56 	bl	8000608 <__aeabi_dmul>
 800595c:	4b5b      	ldr	r3, [pc, #364]	; (8005acc <__ieee754_pow+0x3d4>)
 800595e:	4682      	mov	sl, r0
 8005960:	468b      	mov	fp, r1
 8005962:	2200      	movs	r2, #0
 8005964:	4620      	mov	r0, r4
 8005966:	4629      	mov	r1, r5
 8005968:	f7fa fe4e 	bl	8000608 <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	a14d      	add	r1, pc, #308	; (adr r1, 8005aa8 <__ieee754_pow+0x3b0>)
 8005972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005976:	f7fa fc8f 	bl	8000298 <__aeabi_dsub>
 800597a:	4622      	mov	r2, r4
 800597c:	462b      	mov	r3, r5
 800597e:	f7fa fe43 	bl	8000608 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	2000      	movs	r0, #0
 8005988:	4951      	ldr	r1, [pc, #324]	; (8005ad0 <__ieee754_pow+0x3d8>)
 800598a:	f7fa fc85 	bl	8000298 <__aeabi_dsub>
 800598e:	4622      	mov	r2, r4
 8005990:	4680      	mov	r8, r0
 8005992:	4689      	mov	r9, r1
 8005994:	462b      	mov	r3, r5
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fe35 	bl	8000608 <__aeabi_dmul>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4640      	mov	r0, r8
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fa fe2f 	bl	8000608 <__aeabi_dmul>
 80059aa:	a341      	add	r3, pc, #260	; (adr r3, 8005ab0 <__ieee754_pow+0x3b8>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fe2a 	bl	8000608 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4650      	mov	r0, sl
 80059ba:	4659      	mov	r1, fp
 80059bc:	f7fa fc6c 	bl	8000298 <__aeabi_dsub>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4680      	mov	r8, r0
 80059c6:	4689      	mov	r9, r1
 80059c8:	4630      	mov	r0, r6
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7fa fc66 	bl	800029c <__adddf3>
 80059d0:	2400      	movs	r4, #0
 80059d2:	4632      	mov	r2, r6
 80059d4:	463b      	mov	r3, r7
 80059d6:	4620      	mov	r0, r4
 80059d8:	460d      	mov	r5, r1
 80059da:	f7fa fc5d 	bl	8000298 <__aeabi_dsub>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4640      	mov	r0, r8
 80059e4:	4649      	mov	r1, r9
 80059e6:	f7fa fc57 	bl	8000298 <__aeabi_dsub>
 80059ea:	9b00      	ldr	r3, [sp, #0]
 80059ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4313      	orrs	r3, r2
 80059f2:	4682      	mov	sl, r0
 80059f4:	468b      	mov	fp, r1
 80059f6:	f040 81f1 	bne.w	8005ddc <__ieee754_pow+0x6e4>
 80059fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005ab8 <__ieee754_pow+0x3c0>
 80059fe:	eeb0 8a47 	vmov.f32	s16, s14
 8005a02:	eef0 8a67 	vmov.f32	s17, s15
 8005a06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	463b      	mov	r3, r7
 8005a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a14:	f7fa fc40 	bl	8000298 <__aeabi_dsub>
 8005a18:	4622      	mov	r2, r4
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	f7fa fdf4 	bl	8000608 <__aeabi_dmul>
 8005a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a24:	4680      	mov	r8, r0
 8005a26:	4689      	mov	r9, r1
 8005a28:	4650      	mov	r0, sl
 8005a2a:	4659      	mov	r1, fp
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4640      	mov	r0, r8
 8005a36:	4649      	mov	r1, r9
 8005a38:	f7fa fc30 	bl	800029c <__adddf3>
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	463b      	mov	r3, r7
 8005a40:	4680      	mov	r8, r0
 8005a42:	4689      	mov	r9, r1
 8005a44:	4620      	mov	r0, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7fa fdde 	bl	8000608 <__aeabi_dmul>
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4604      	mov	r4, r0
 8005a50:	460d      	mov	r5, r1
 8005a52:	4602      	mov	r2, r0
 8005a54:	4649      	mov	r1, r9
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7fa fc20 	bl	800029c <__adddf3>
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <__ieee754_pow+0x3dc>)
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	ec45 4b19 	vmov	d9, r4, r5
 8005a64:	4606      	mov	r6, r0
 8005a66:	460f      	mov	r7, r1
 8005a68:	468b      	mov	fp, r1
 8005a6a:	f340 82fe 	ble.w	800606a <__ieee754_pow+0x972>
 8005a6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005a72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005a76:	4303      	orrs	r3, r0
 8005a78:	f000 81f0 	beq.w	8005e5c <__ieee754_pow+0x764>
 8005a7c:	a310      	add	r3, pc, #64	; (adr r3, 8005ac0 <__ieee754_pow+0x3c8>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	ec51 0b18 	vmov	r0, r1, d8
 8005a86:	f7fa fdbf 	bl	8000608 <__aeabi_dmul>
 8005a8a:	a30d      	add	r3, pc, #52	; (adr r3, 8005ac0 <__ieee754_pow+0x3c8>)
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	e6cb      	b.n	800582a <__ieee754_pow+0x132>
 8005a92:	bf00      	nop
 8005a94:	f3af 8000 	nop.w
 8005a98:	60000000 	.word	0x60000000
 8005a9c:	3ff71547 	.word	0x3ff71547
 8005aa0:	f85ddf44 	.word	0xf85ddf44
 8005aa4:	3e54ae0b 	.word	0x3e54ae0b
 8005aa8:	55555555 	.word	0x55555555
 8005aac:	3fd55555 	.word	0x3fd55555
 8005ab0:	652b82fe 	.word	0x652b82fe
 8005ab4:	3ff71547 	.word	0x3ff71547
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	bff00000 	.word	0xbff00000
 8005ac0:	8800759c 	.word	0x8800759c
 8005ac4:	7e37e43c 	.word	0x7e37e43c
 8005ac8:	3ff00000 	.word	0x3ff00000
 8005acc:	3fd00000 	.word	0x3fd00000
 8005ad0:	3fe00000 	.word	0x3fe00000
 8005ad4:	408fffff 	.word	0x408fffff
 8005ad8:	4bd7      	ldr	r3, [pc, #860]	; (8005e38 <__ieee754_pow+0x740>)
 8005ada:	ea03 0309 	and.w	r3, r3, r9
 8005ade:	2200      	movs	r2, #0
 8005ae0:	b92b      	cbnz	r3, 8005aee <__ieee754_pow+0x3f6>
 8005ae2:	4bd6      	ldr	r3, [pc, #856]	; (8005e3c <__ieee754_pow+0x744>)
 8005ae4:	f7fa fd90 	bl	8000608 <__aeabi_dmul>
 8005ae8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005aec:	460c      	mov	r4, r1
 8005aee:	1523      	asrs	r3, r4, #20
 8005af0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005af4:	4413      	add	r3, r2
 8005af6:	9309      	str	r3, [sp, #36]	; 0x24
 8005af8:	4bd1      	ldr	r3, [pc, #836]	; (8005e40 <__ieee754_pow+0x748>)
 8005afa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005afe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005b02:	429c      	cmp	r4, r3
 8005b04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005b08:	dd08      	ble.n	8005b1c <__ieee754_pow+0x424>
 8005b0a:	4bce      	ldr	r3, [pc, #824]	; (8005e44 <__ieee754_pow+0x74c>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	f340 8163 	ble.w	8005dd8 <__ieee754_pow+0x6e0>
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	3301      	adds	r3, #1
 8005b16:	9309      	str	r3, [sp, #36]	; 0x24
 8005b18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005b1c:	2400      	movs	r4, #0
 8005b1e:	00e3      	lsls	r3, r4, #3
 8005b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b22:	4bc9      	ldr	r3, [pc, #804]	; (8005e48 <__ieee754_pow+0x750>)
 8005b24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b28:	ed93 7b00 	vldr	d7, [r3]
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	ec53 2b17 	vmov	r2, r3, d7
 8005b32:	eeb0 8a47 	vmov.f32	s16, s14
 8005b36:	eef0 8a67 	vmov.f32	s17, s15
 8005b3a:	4682      	mov	sl, r0
 8005b3c:	f7fa fbac 	bl	8000298 <__aeabi_dsub>
 8005b40:	4652      	mov	r2, sl
 8005b42:	4606      	mov	r6, r0
 8005b44:	460f      	mov	r7, r1
 8005b46:	462b      	mov	r3, r5
 8005b48:	ec51 0b18 	vmov	r0, r1, d8
 8005b4c:	f7fa fba6 	bl	800029c <__adddf3>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	2000      	movs	r0, #0
 8005b56:	49bd      	ldr	r1, [pc, #756]	; (8005e4c <__ieee754_pow+0x754>)
 8005b58:	f7fa fe80 	bl	800085c <__aeabi_ddiv>
 8005b5c:	ec41 0b19 	vmov	d9, r0, r1
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa fd4e 	bl	8000608 <__aeabi_dmul>
 8005b6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9304      	str	r3, [sp, #16]
 8005b7c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005b80:	46ab      	mov	fp, r5
 8005b82:	106d      	asrs	r5, r5, #1
 8005b84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005b88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005b8c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005b90:	2200      	movs	r2, #0
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	4614      	mov	r4, r2
 8005b98:	461d      	mov	r5, r3
 8005b9a:	f7fa fd35 	bl	8000608 <__aeabi_dmul>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa fb77 	bl	8000298 <__aeabi_dsub>
 8005baa:	ec53 2b18 	vmov	r2, r3, d8
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7fa fb6f 	bl	8000298 <__aeabi_dsub>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	f7fa fb69 	bl	8000298 <__aeabi_dsub>
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	f7fa fd1d 	bl	8000608 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fb5f 	bl	8000298 <__aeabi_dsub>
 8005bda:	ec53 2b19 	vmov	r2, r3, d9
 8005bde:	f7fa fd13 	bl	8000608 <__aeabi_dmul>
 8005be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005be6:	ec41 0b18 	vmov	d8, r0, r1
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	f7fa fd0b 	bl	8000608 <__aeabi_dmul>
 8005bf2:	a37d      	add	r3, pc, #500	; (adr r3, 8005de8 <__ieee754_pow+0x6f0>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	f7fa fd04 	bl	8000608 <__aeabi_dmul>
 8005c00:	a37b      	add	r3, pc, #492	; (adr r3, 8005df0 <__ieee754_pow+0x6f8>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fb49 	bl	800029c <__adddf3>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f7fa fcfb 	bl	8000608 <__aeabi_dmul>
 8005c12:	a379      	add	r3, pc, #484	; (adr r3, 8005df8 <__ieee754_pow+0x700>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fb40 	bl	800029c <__adddf3>
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	462b      	mov	r3, r5
 8005c20:	f7fa fcf2 	bl	8000608 <__aeabi_dmul>
 8005c24:	a376      	add	r3, pc, #472	; (adr r3, 8005e00 <__ieee754_pow+0x708>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fb37 	bl	800029c <__adddf3>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	f7fa fce9 	bl	8000608 <__aeabi_dmul>
 8005c36:	a374      	add	r3, pc, #464	; (adr r3, 8005e08 <__ieee754_pow+0x710>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fb2e 	bl	800029c <__adddf3>
 8005c40:	4622      	mov	r2, r4
 8005c42:	462b      	mov	r3, r5
 8005c44:	f7fa fce0 	bl	8000608 <__aeabi_dmul>
 8005c48:	a371      	add	r3, pc, #452	; (adr r3, 8005e10 <__ieee754_pow+0x718>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fb25 	bl	800029c <__adddf3>
 8005c52:	4622      	mov	r2, r4
 8005c54:	4606      	mov	r6, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	462b      	mov	r3, r5
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa fcd3 	bl	8000608 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4630      	mov	r0, r6
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa fccd 	bl	8000608 <__aeabi_dmul>
 8005c6e:	4642      	mov	r2, r8
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	464b      	mov	r3, r9
 8005c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c7a:	f7fa fb0f 	bl	800029c <__adddf3>
 8005c7e:	ec53 2b18 	vmov	r2, r3, d8
 8005c82:	f7fa fcc1 	bl	8000608 <__aeabi_dmul>
 8005c86:	4622      	mov	r2, r4
 8005c88:	462b      	mov	r3, r5
 8005c8a:	f7fa fb07 	bl	800029c <__adddf3>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	4682      	mov	sl, r0
 8005c92:	468b      	mov	fp, r1
 8005c94:	464b      	mov	r3, r9
 8005c96:	4640      	mov	r0, r8
 8005c98:	4649      	mov	r1, r9
 8005c9a:	f7fa fcb5 	bl	8000608 <__aeabi_dmul>
 8005c9e:	4b6c      	ldr	r3, [pc, #432]	; (8005e50 <__ieee754_pow+0x758>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460f      	mov	r7, r1
 8005ca6:	f7fa faf9 	bl	800029c <__adddf3>
 8005caa:	4652      	mov	r2, sl
 8005cac:	465b      	mov	r3, fp
 8005cae:	f7fa faf5 	bl	800029c <__adddf3>
 8005cb2:	9c04      	ldr	r4, [sp, #16]
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	f7fa fca3 	bl	8000608 <__aeabi_dmul>
 8005cc2:	4b63      	ldr	r3, [pc, #396]	; (8005e50 <__ieee754_pow+0x758>)
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4689      	mov	r9, r1
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f7fa fae3 	bl	8000298 <__aeabi_dsub>
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	f7fa fadf 	bl	8000298 <__aeabi_dsub>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4650      	mov	r0, sl
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	f7fa fad9 	bl	8000298 <__aeabi_dsub>
 8005ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cea:	f7fa fc8d 	bl	8000608 <__aeabi_dmul>
 8005cee:	4622      	mov	r2, r4
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	ec51 0b18 	vmov	r0, r1, d8
 8005cfa:	f7fa fc85 	bl	8000608 <__aeabi_dmul>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4630      	mov	r0, r6
 8005d04:	4639      	mov	r1, r7
 8005d06:	f7fa fac9 	bl	800029c <__adddf3>
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4640      	mov	r0, r8
 8005d14:	4649      	mov	r1, r9
 8005d16:	f7fa fac1 	bl	800029c <__adddf3>
 8005d1a:	9c04      	ldr	r4, [sp, #16]
 8005d1c:	a33e      	add	r3, pc, #248	; (adr r3, 8005e18 <__ieee754_pow+0x720>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	4620      	mov	r0, r4
 8005d24:	460d      	mov	r5, r1
 8005d26:	f7fa fc6f 	bl	8000608 <__aeabi_dmul>
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	ec41 0b18 	vmov	d8, r0, r1
 8005d30:	464b      	mov	r3, r9
 8005d32:	4620      	mov	r0, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	f7fa faaf 	bl	8000298 <__aeabi_dsub>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4630      	mov	r0, r6
 8005d40:	4639      	mov	r1, r7
 8005d42:	f7fa faa9 	bl	8000298 <__aeabi_dsub>
 8005d46:	a336      	add	r3, pc, #216	; (adr r3, 8005e20 <__ieee754_pow+0x728>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fc5c 	bl	8000608 <__aeabi_dmul>
 8005d50:	a335      	add	r3, pc, #212	; (adr r3, 8005e28 <__ieee754_pow+0x730>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	4606      	mov	r6, r0
 8005d58:	460f      	mov	r7, r1
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fc53 	bl	8000608 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4630      	mov	r0, r6
 8005d68:	4639      	mov	r1, r7
 8005d6a:	f7fa fa97 	bl	800029c <__adddf3>
 8005d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d70:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <__ieee754_pow+0x75c>)
 8005d72:	4413      	add	r3, r2
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fa90 	bl	800029c <__adddf3>
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d80:	468b      	mov	fp, r1
 8005d82:	f7fa fbd7 	bl	8000534 <__aeabi_i2d>
 8005d86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d88:	4b33      	ldr	r3, [pc, #204]	; (8005e58 <__ieee754_pow+0x760>)
 8005d8a:	4413      	add	r3, r2
 8005d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d90:	4606      	mov	r6, r0
 8005d92:	460f      	mov	r7, r1
 8005d94:	4652      	mov	r2, sl
 8005d96:	465b      	mov	r3, fp
 8005d98:	ec51 0b18 	vmov	r0, r1, d8
 8005d9c:	f7fa fa7e 	bl	800029c <__adddf3>
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	f7fa fa7a 	bl	800029c <__adddf3>
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	f7fa fa76 	bl	800029c <__adddf3>
 8005db0:	9c04      	ldr	r4, [sp, #16]
 8005db2:	4632      	mov	r2, r6
 8005db4:	463b      	mov	r3, r7
 8005db6:	4620      	mov	r0, r4
 8005db8:	460d      	mov	r5, r1
 8005dba:	f7fa fa6d 	bl	8000298 <__aeabi_dsub>
 8005dbe:	4642      	mov	r2, r8
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	f7fa fa69 	bl	8000298 <__aeabi_dsub>
 8005dc6:	ec53 2b18 	vmov	r2, r3, d8
 8005dca:	f7fa fa65 	bl	8000298 <__aeabi_dsub>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	e606      	b.n	80059e6 <__ieee754_pow+0x2ee>
 8005dd8:	2401      	movs	r4, #1
 8005dda:	e6a0      	b.n	8005b1e <__ieee754_pow+0x426>
 8005ddc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005e30 <__ieee754_pow+0x738>
 8005de0:	e60d      	b.n	80059fe <__ieee754_pow+0x306>
 8005de2:	bf00      	nop
 8005de4:	f3af 8000 	nop.w
 8005de8:	4a454eef 	.word	0x4a454eef
 8005dec:	3fca7e28 	.word	0x3fca7e28
 8005df0:	93c9db65 	.word	0x93c9db65
 8005df4:	3fcd864a 	.word	0x3fcd864a
 8005df8:	a91d4101 	.word	0xa91d4101
 8005dfc:	3fd17460 	.word	0x3fd17460
 8005e00:	518f264d 	.word	0x518f264d
 8005e04:	3fd55555 	.word	0x3fd55555
 8005e08:	db6fabff 	.word	0xdb6fabff
 8005e0c:	3fdb6db6 	.word	0x3fdb6db6
 8005e10:	33333303 	.word	0x33333303
 8005e14:	3fe33333 	.word	0x3fe33333
 8005e18:	e0000000 	.word	0xe0000000
 8005e1c:	3feec709 	.word	0x3feec709
 8005e20:	dc3a03fd 	.word	0xdc3a03fd
 8005e24:	3feec709 	.word	0x3feec709
 8005e28:	145b01f5 	.word	0x145b01f5
 8005e2c:	be3e2fe0 	.word	0xbe3e2fe0
 8005e30:	00000000 	.word	0x00000000
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	7ff00000 	.word	0x7ff00000
 8005e3c:	43400000 	.word	0x43400000
 8005e40:	0003988e 	.word	0x0003988e
 8005e44:	000bb679 	.word	0x000bb679
 8005e48:	08006690 	.word	0x08006690
 8005e4c:	3ff00000 	.word	0x3ff00000
 8005e50:	40080000 	.word	0x40080000
 8005e54:	080066b0 	.word	0x080066b0
 8005e58:	080066a0 	.word	0x080066a0
 8005e5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006134 <__ieee754_pow+0xa3c>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa fa19 	bl	800029c <__adddf3>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	ec41 0b1a 	vmov	d10, r0, r1
 8005e70:	462b      	mov	r3, r5
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa fa0f 	bl	8000298 <__aeabi_dsub>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	ec51 0b1a 	vmov	r0, r1, d10
 8005e82:	f7fa fe51 	bl	8000b28 <__aeabi_dcmpgt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f47f adf8 	bne.w	8005a7c <__ieee754_pow+0x384>
 8005e8c:	4aa4      	ldr	r2, [pc, #656]	; (8006120 <__ieee754_pow+0xa28>)
 8005e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f340 810b 	ble.w	80060ae <__ieee754_pow+0x9b6>
 8005e98:	151b      	asrs	r3, r3, #20
 8005e9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005e9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005ea2:	fa4a f303 	asr.w	r3, sl, r3
 8005ea6:	445b      	add	r3, fp
 8005ea8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005eac:	4e9d      	ldr	r6, [pc, #628]	; (8006124 <__ieee754_pow+0xa2c>)
 8005eae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005eb2:	4116      	asrs	r6, r2
 8005eb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005eb8:	2000      	movs	r0, #0
 8005eba:	ea23 0106 	bic.w	r1, r3, r6
 8005ebe:	f1c2 0214 	rsb	r2, r2, #20
 8005ec2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005ec6:	fa4a fa02 	asr.w	sl, sl, r2
 8005eca:	f1bb 0f00 	cmp.w	fp, #0
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	bfb8      	it	lt
 8005ed8:	f1ca 0a00 	rsblt	sl, sl, #0
 8005edc:	f7fa f9dc 	bl	8000298 <__aeabi_dsub>
 8005ee0:	ec41 0b19 	vmov	d9, r0, r1
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	ec51 0b19 	vmov	r0, r1, d9
 8005eec:	f7fa f9d6 	bl	800029c <__adddf3>
 8005ef0:	2400      	movs	r4, #0
 8005ef2:	a379      	add	r3, pc, #484	; (adr r3, 80060d8 <__ieee754_pow+0x9e0>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	4620      	mov	r0, r4
 8005efa:	460d      	mov	r5, r1
 8005efc:	f7fa fb84 	bl	8000608 <__aeabi_dmul>
 8005f00:	ec53 2b19 	vmov	r2, r3, d9
 8005f04:	4606      	mov	r6, r0
 8005f06:	460f      	mov	r7, r1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa f9c4 	bl	8000298 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa f9be 	bl	8000298 <__aeabi_dsub>
 8005f1c:	a370      	add	r3, pc, #448	; (adr r3, 80060e0 <__ieee754_pow+0x9e8>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa fb71 	bl	8000608 <__aeabi_dmul>
 8005f26:	a370      	add	r3, pc, #448	; (adr r3, 80060e8 <__ieee754_pow+0x9f0>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa fb68 	bl	8000608 <__aeabi_dmul>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	4649      	mov	r1, r9
 8005f40:	f7fa f9ac 	bl	800029c <__adddf3>
 8005f44:	4604      	mov	r4, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	f7fa f9a4 	bl	800029c <__adddf3>
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	f7fa f99c 	bl	8000298 <__aeabi_dsub>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa f996 	bl	8000298 <__aeabi_dsub>
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	464b      	mov	r3, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	4649      	mov	r1, r9
 8005f78:	f7fa fb46 	bl	8000608 <__aeabi_dmul>
 8005f7c:	a35c      	add	r3, pc, #368	; (adr r3, 80060f0 <__ieee754_pow+0x9f8>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	4604      	mov	r4, r0
 8005f84:	460d      	mov	r5, r1
 8005f86:	f7fa fb3f 	bl	8000608 <__aeabi_dmul>
 8005f8a:	a35b      	add	r3, pc, #364	; (adr r3, 80060f8 <__ieee754_pow+0xa00>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa f982 	bl	8000298 <__aeabi_dsub>
 8005f94:	4622      	mov	r2, r4
 8005f96:	462b      	mov	r3, r5
 8005f98:	f7fa fb36 	bl	8000608 <__aeabi_dmul>
 8005f9c:	a358      	add	r3, pc, #352	; (adr r3, 8006100 <__ieee754_pow+0xa08>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f7fa f97b 	bl	800029c <__adddf3>
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	462b      	mov	r3, r5
 8005faa:	f7fa fb2d 	bl	8000608 <__aeabi_dmul>
 8005fae:	a356      	add	r3, pc, #344	; (adr r3, 8006108 <__ieee754_pow+0xa10>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa f970 	bl	8000298 <__aeabi_dsub>
 8005fb8:	4622      	mov	r2, r4
 8005fba:	462b      	mov	r3, r5
 8005fbc:	f7fa fb24 	bl	8000608 <__aeabi_dmul>
 8005fc0:	a353      	add	r3, pc, #332	; (adr r3, 8006110 <__ieee754_pow+0xa18>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa f969 	bl	800029c <__adddf3>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	f7fa fb1b 	bl	8000608 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa f95d 	bl	8000298 <__aeabi_dsub>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	4649      	mov	r1, r9
 8005fea:	f7fa fb0d 	bl	8000608 <__aeabi_dmul>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	ec41 0b19 	vmov	d9, r0, r1
 8005ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa f94c 	bl	8000298 <__aeabi_dsub>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	ec51 0b19 	vmov	r0, r1, d9
 8006008:	f7fa fc28 	bl	800085c <__aeabi_ddiv>
 800600c:	4632      	mov	r2, r6
 800600e:	4604      	mov	r4, r0
 8006010:	460d      	mov	r5, r1
 8006012:	463b      	mov	r3, r7
 8006014:	4640      	mov	r0, r8
 8006016:	4649      	mov	r1, r9
 8006018:	f7fa faf6 	bl	8000608 <__aeabi_dmul>
 800601c:	4632      	mov	r2, r6
 800601e:	463b      	mov	r3, r7
 8006020:	f7fa f93c 	bl	800029c <__adddf3>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa f934 	bl	8000298 <__aeabi_dsub>
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	f7fa f930 	bl	8000298 <__aeabi_dsub>
 8006038:	460b      	mov	r3, r1
 800603a:	4602      	mov	r2, r0
 800603c:	493a      	ldr	r1, [pc, #232]	; (8006128 <__ieee754_pow+0xa30>)
 800603e:	2000      	movs	r0, #0
 8006040:	f7fa f92a 	bl	8000298 <__aeabi_dsub>
 8006044:	e9cd 0100 	strd	r0, r1, [sp]
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006052:	da2f      	bge.n	80060b4 <__ieee754_pow+0x9bc>
 8006054:	4650      	mov	r0, sl
 8006056:	ed9d 0b00 	vldr	d0, [sp]
 800605a:	f000 f9cd 	bl	80063f8 <scalbn>
 800605e:	ec51 0b10 	vmov	r0, r1, d0
 8006062:	ec53 2b18 	vmov	r2, r3, d8
 8006066:	f7ff bbe0 	b.w	800582a <__ieee754_pow+0x132>
 800606a:	4b30      	ldr	r3, [pc, #192]	; (800612c <__ieee754_pow+0xa34>)
 800606c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006070:	429e      	cmp	r6, r3
 8006072:	f77f af0b 	ble.w	8005e8c <__ieee754_pow+0x794>
 8006076:	4b2e      	ldr	r3, [pc, #184]	; (8006130 <__ieee754_pow+0xa38>)
 8006078:	440b      	add	r3, r1
 800607a:	4303      	orrs	r3, r0
 800607c:	d00b      	beq.n	8006096 <__ieee754_pow+0x99e>
 800607e:	a326      	add	r3, pc, #152	; (adr r3, 8006118 <__ieee754_pow+0xa20>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	ec51 0b18 	vmov	r0, r1, d8
 8006088:	f7fa fabe 	bl	8000608 <__aeabi_dmul>
 800608c:	a322      	add	r3, pc, #136	; (adr r3, 8006118 <__ieee754_pow+0xa20>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7ff bbca 	b.w	800582a <__ieee754_pow+0x132>
 8006096:	4622      	mov	r2, r4
 8006098:	462b      	mov	r3, r5
 800609a:	f7fa f8fd 	bl	8000298 <__aeabi_dsub>
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	f7fa fd37 	bl	8000b14 <__aeabi_dcmpge>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f43f aef0 	beq.w	8005e8c <__ieee754_pow+0x794>
 80060ac:	e7e7      	b.n	800607e <__ieee754_pow+0x986>
 80060ae:	f04f 0a00 	mov.w	sl, #0
 80060b2:	e717      	b.n	8005ee4 <__ieee754_pow+0x7ec>
 80060b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b8:	4619      	mov	r1, r3
 80060ba:	e7d2      	b.n	8006062 <__ieee754_pow+0x96a>
 80060bc:	491a      	ldr	r1, [pc, #104]	; (8006128 <__ieee754_pow+0xa30>)
 80060be:	2000      	movs	r0, #0
 80060c0:	f7ff bb9e 	b.w	8005800 <__ieee754_pow+0x108>
 80060c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c8:	f7ff bb9a 	b.w	8005800 <__ieee754_pow+0x108>
 80060cc:	9000      	str	r0, [sp, #0]
 80060ce:	f7ff bb76 	b.w	80057be <__ieee754_pow+0xc6>
 80060d2:	2100      	movs	r1, #0
 80060d4:	f7ff bb60 	b.w	8005798 <__ieee754_pow+0xa0>
 80060d8:	00000000 	.word	0x00000000
 80060dc:	3fe62e43 	.word	0x3fe62e43
 80060e0:	fefa39ef 	.word	0xfefa39ef
 80060e4:	3fe62e42 	.word	0x3fe62e42
 80060e8:	0ca86c39 	.word	0x0ca86c39
 80060ec:	be205c61 	.word	0xbe205c61
 80060f0:	72bea4d0 	.word	0x72bea4d0
 80060f4:	3e663769 	.word	0x3e663769
 80060f8:	c5d26bf1 	.word	0xc5d26bf1
 80060fc:	3ebbbd41 	.word	0x3ebbbd41
 8006100:	af25de2c 	.word	0xaf25de2c
 8006104:	3f11566a 	.word	0x3f11566a
 8006108:	16bebd93 	.word	0x16bebd93
 800610c:	3f66c16c 	.word	0x3f66c16c
 8006110:	5555553e 	.word	0x5555553e
 8006114:	3fc55555 	.word	0x3fc55555
 8006118:	c2f8f359 	.word	0xc2f8f359
 800611c:	01a56e1f 	.word	0x01a56e1f
 8006120:	3fe00000 	.word	0x3fe00000
 8006124:	000fffff 	.word	0x000fffff
 8006128:	3ff00000 	.word	0x3ff00000
 800612c:	4090cbff 	.word	0x4090cbff
 8006130:	3f6f3400 	.word	0x3f6f3400
 8006134:	652b82fe 	.word	0x652b82fe
 8006138:	3c971547 	.word	0x3c971547

0800613c <__ieee754_sqrt>:
 800613c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006140:	ec55 4b10 	vmov	r4, r5, d0
 8006144:	4e56      	ldr	r6, [pc, #344]	; (80062a0 <__ieee754_sqrt+0x164>)
 8006146:	43ae      	bics	r6, r5
 8006148:	ee10 0a10 	vmov	r0, s0
 800614c:	ee10 3a10 	vmov	r3, s0
 8006150:	4629      	mov	r1, r5
 8006152:	462a      	mov	r2, r5
 8006154:	d110      	bne.n	8006178 <__ieee754_sqrt+0x3c>
 8006156:	ee10 2a10 	vmov	r2, s0
 800615a:	462b      	mov	r3, r5
 800615c:	f7fa fa54 	bl	8000608 <__aeabi_dmul>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa f898 	bl	800029c <__adddf3>
 800616c:	4604      	mov	r4, r0
 800616e:	460d      	mov	r5, r1
 8006170:	ec45 4b10 	vmov	d0, r4, r5
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006178:	2d00      	cmp	r5, #0
 800617a:	dc10      	bgt.n	800619e <__ieee754_sqrt+0x62>
 800617c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006180:	4330      	orrs	r0, r6
 8006182:	d0f5      	beq.n	8006170 <__ieee754_sqrt+0x34>
 8006184:	b15d      	cbz	r5, 800619e <__ieee754_sqrt+0x62>
 8006186:	ee10 2a10 	vmov	r2, s0
 800618a:	462b      	mov	r3, r5
 800618c:	ee10 0a10 	vmov	r0, s0
 8006190:	f7fa f882 	bl	8000298 <__aeabi_dsub>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	f7fa fb60 	bl	800085c <__aeabi_ddiv>
 800619c:	e7e6      	b.n	800616c <__ieee754_sqrt+0x30>
 800619e:	1509      	asrs	r1, r1, #20
 80061a0:	d076      	beq.n	8006290 <__ieee754_sqrt+0x154>
 80061a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80061a6:	07ce      	lsls	r6, r1, #31
 80061a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80061ac:	bf5e      	ittt	pl
 80061ae:	0fda      	lsrpl	r2, r3, #31
 80061b0:	005b      	lslpl	r3, r3, #1
 80061b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80061b6:	0fda      	lsrs	r2, r3, #31
 80061b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80061bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80061c0:	2000      	movs	r0, #0
 80061c2:	106d      	asrs	r5, r5, #1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	f04f 0e16 	mov.w	lr, #22
 80061ca:	4684      	mov	ip, r0
 80061cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061d0:	eb0c 0401 	add.w	r4, ip, r1
 80061d4:	4294      	cmp	r4, r2
 80061d6:	bfde      	ittt	le
 80061d8:	1b12      	suble	r2, r2, r4
 80061da:	eb04 0c01 	addle.w	ip, r4, r1
 80061de:	1840      	addle	r0, r0, r1
 80061e0:	0052      	lsls	r2, r2, #1
 80061e2:	f1be 0e01 	subs.w	lr, lr, #1
 80061e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80061ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80061ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061f2:	d1ed      	bne.n	80061d0 <__ieee754_sqrt+0x94>
 80061f4:	4671      	mov	r1, lr
 80061f6:	2720      	movs	r7, #32
 80061f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80061fc:	4562      	cmp	r2, ip
 80061fe:	eb04 060e 	add.w	r6, r4, lr
 8006202:	dc02      	bgt.n	800620a <__ieee754_sqrt+0xce>
 8006204:	d113      	bne.n	800622e <__ieee754_sqrt+0xf2>
 8006206:	429e      	cmp	r6, r3
 8006208:	d811      	bhi.n	800622e <__ieee754_sqrt+0xf2>
 800620a:	2e00      	cmp	r6, #0
 800620c:	eb06 0e04 	add.w	lr, r6, r4
 8006210:	da43      	bge.n	800629a <__ieee754_sqrt+0x15e>
 8006212:	f1be 0f00 	cmp.w	lr, #0
 8006216:	db40      	blt.n	800629a <__ieee754_sqrt+0x15e>
 8006218:	f10c 0801 	add.w	r8, ip, #1
 800621c:	eba2 020c 	sub.w	r2, r2, ip
 8006220:	429e      	cmp	r6, r3
 8006222:	bf88      	it	hi
 8006224:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006228:	1b9b      	subs	r3, r3, r6
 800622a:	4421      	add	r1, r4
 800622c:	46c4      	mov	ip, r8
 800622e:	0052      	lsls	r2, r2, #1
 8006230:	3f01      	subs	r7, #1
 8006232:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006236:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800623a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800623e:	d1dd      	bne.n	80061fc <__ieee754_sqrt+0xc0>
 8006240:	4313      	orrs	r3, r2
 8006242:	d006      	beq.n	8006252 <__ieee754_sqrt+0x116>
 8006244:	1c4c      	adds	r4, r1, #1
 8006246:	bf13      	iteet	ne
 8006248:	3101      	addne	r1, #1
 800624a:	3001      	addeq	r0, #1
 800624c:	4639      	moveq	r1, r7
 800624e:	f021 0101 	bicne.w	r1, r1, #1
 8006252:	1043      	asrs	r3, r0, #1
 8006254:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006258:	0849      	lsrs	r1, r1, #1
 800625a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800625e:	07c2      	lsls	r2, r0, #31
 8006260:	bf48      	it	mi
 8006262:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006266:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800626a:	460c      	mov	r4, r1
 800626c:	463d      	mov	r5, r7
 800626e:	e77f      	b.n	8006170 <__ieee754_sqrt+0x34>
 8006270:	0ada      	lsrs	r2, r3, #11
 8006272:	3815      	subs	r0, #21
 8006274:	055b      	lsls	r3, r3, #21
 8006276:	2a00      	cmp	r2, #0
 8006278:	d0fa      	beq.n	8006270 <__ieee754_sqrt+0x134>
 800627a:	02d7      	lsls	r7, r2, #11
 800627c:	d50a      	bpl.n	8006294 <__ieee754_sqrt+0x158>
 800627e:	f1c1 0420 	rsb	r4, r1, #32
 8006282:	fa23 f404 	lsr.w	r4, r3, r4
 8006286:	1e4d      	subs	r5, r1, #1
 8006288:	408b      	lsls	r3, r1
 800628a:	4322      	orrs	r2, r4
 800628c:	1b41      	subs	r1, r0, r5
 800628e:	e788      	b.n	80061a2 <__ieee754_sqrt+0x66>
 8006290:	4608      	mov	r0, r1
 8006292:	e7f0      	b.n	8006276 <__ieee754_sqrt+0x13a>
 8006294:	0052      	lsls	r2, r2, #1
 8006296:	3101      	adds	r1, #1
 8006298:	e7ef      	b.n	800627a <__ieee754_sqrt+0x13e>
 800629a:	46e0      	mov	r8, ip
 800629c:	e7be      	b.n	800621c <__ieee754_sqrt+0xe0>
 800629e:	bf00      	nop
 80062a0:	7ff00000 	.word	0x7ff00000

080062a4 <fabs>:
 80062a4:	ec51 0b10 	vmov	r0, r1, d0
 80062a8:	ee10 2a10 	vmov	r2, s0
 80062ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80062b0:	ec43 2b10 	vmov	d0, r2, r3
 80062b4:	4770      	bx	lr

080062b6 <finite>:
 80062b6:	b082      	sub	sp, #8
 80062b8:	ed8d 0b00 	vstr	d0, [sp]
 80062bc:	9801      	ldr	r0, [sp, #4]
 80062be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80062c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80062c6:	0fc0      	lsrs	r0, r0, #31
 80062c8:	b002      	add	sp, #8
 80062ca:	4770      	bx	lr
 80062cc:	0000      	movs	r0, r0
	...

080062d0 <nan>:
 80062d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80062d8 <nan+0x8>
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	00000000 	.word	0x00000000
 80062dc:	7ff80000 	.word	0x7ff80000

080062e0 <rint>:
 80062e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062e2:	ec51 0b10 	vmov	r0, r1, d0
 80062e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80062ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80062ee:	2e13      	cmp	r6, #19
 80062f0:	ee10 4a10 	vmov	r4, s0
 80062f4:	460b      	mov	r3, r1
 80062f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80062fa:	dc58      	bgt.n	80063ae <rint+0xce>
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	da2b      	bge.n	8006358 <rint+0x78>
 8006300:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006304:	4302      	orrs	r2, r0
 8006306:	d023      	beq.n	8006350 <rint+0x70>
 8006308:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800630c:	4302      	orrs	r2, r0
 800630e:	4254      	negs	r4, r2
 8006310:	4314      	orrs	r4, r2
 8006312:	0c4b      	lsrs	r3, r1, #17
 8006314:	0b24      	lsrs	r4, r4, #12
 8006316:	045b      	lsls	r3, r3, #17
 8006318:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800631c:	ea44 0103 	orr.w	r1, r4, r3
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <rint+0x10c>)
 8006322:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006326:	e9d3 6700 	ldrd	r6, r7, [r3]
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7f9 ffb3 	bl	800029c <__adddf3>
 8006336:	e9cd 0100 	strd	r0, r1, [sp]
 800633a:	463b      	mov	r3, r7
 800633c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006340:	4632      	mov	r2, r6
 8006342:	f7f9 ffa9 	bl	8000298 <__aeabi_dsub>
 8006346:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800634a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800634e:	4639      	mov	r1, r7
 8006350:	ec41 0b10 	vmov	d0, r0, r1
 8006354:	b003      	add	sp, #12
 8006356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <rint+0x110>)
 800635a:	4132      	asrs	r2, r6
 800635c:	ea01 0702 	and.w	r7, r1, r2
 8006360:	4307      	orrs	r7, r0
 8006362:	d0f5      	beq.n	8006350 <rint+0x70>
 8006364:	0851      	lsrs	r1, r2, #1
 8006366:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800636a:	4314      	orrs	r4, r2
 800636c:	d00c      	beq.n	8006388 <rint+0xa8>
 800636e:	ea23 0201 	bic.w	r2, r3, r1
 8006372:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006376:	2e13      	cmp	r6, #19
 8006378:	fa43 f606 	asr.w	r6, r3, r6
 800637c:	bf0c      	ite	eq
 800637e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006382:	2400      	movne	r4, #0
 8006384:	ea42 0306 	orr.w	r3, r2, r6
 8006388:	4918      	ldr	r1, [pc, #96]	; (80063ec <rint+0x10c>)
 800638a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800638e:	4622      	mov	r2, r4
 8006390:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7f9 ff80 	bl	800029c <__adddf3>
 800639c:	e9cd 0100 	strd	r0, r1, [sp]
 80063a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	f7f9 ff76 	bl	8000298 <__aeabi_dsub>
 80063ac:	e7d0      	b.n	8006350 <rint+0x70>
 80063ae:	2e33      	cmp	r6, #51	; 0x33
 80063b0:	dd07      	ble.n	80063c2 <rint+0xe2>
 80063b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063b6:	d1cb      	bne.n	8006350 <rint+0x70>
 80063b8:	ee10 2a10 	vmov	r2, s0
 80063bc:	f7f9 ff6e 	bl	800029c <__adddf3>
 80063c0:	e7c6      	b.n	8006350 <rint+0x70>
 80063c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80063c6:	f04f 36ff 	mov.w	r6, #4294967295
 80063ca:	40d6      	lsrs	r6, r2
 80063cc:	4230      	tst	r0, r6
 80063ce:	d0bf      	beq.n	8006350 <rint+0x70>
 80063d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80063d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80063d8:	bf1f      	itttt	ne
 80063da:	ea24 0101 	bicne.w	r1, r4, r1
 80063de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80063e2:	fa44 f202 	asrne.w	r2, r4, r2
 80063e6:	ea41 0402 	orrne.w	r4, r1, r2
 80063ea:	e7cd      	b.n	8006388 <rint+0xa8>
 80063ec:	080066c0 	.word	0x080066c0
 80063f0:	000fffff 	.word	0x000fffff
 80063f4:	00000000 	.word	0x00000000

080063f8 <scalbn>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	ec55 4b10 	vmov	r4, r5, d0
 80063fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006402:	4606      	mov	r6, r0
 8006404:	462b      	mov	r3, r5
 8006406:	b99a      	cbnz	r2, 8006430 <scalbn+0x38>
 8006408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800640c:	4323      	orrs	r3, r4
 800640e:	d036      	beq.n	800647e <scalbn+0x86>
 8006410:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <scalbn+0x100>)
 8006412:	4629      	mov	r1, r5
 8006414:	ee10 0a10 	vmov	r0, s0
 8006418:	2200      	movs	r2, #0
 800641a:	f7fa f8f5 	bl	8000608 <__aeabi_dmul>
 800641e:	4b37      	ldr	r3, [pc, #220]	; (80064fc <scalbn+0x104>)
 8006420:	429e      	cmp	r6, r3
 8006422:	4604      	mov	r4, r0
 8006424:	460d      	mov	r5, r1
 8006426:	da10      	bge.n	800644a <scalbn+0x52>
 8006428:	a32b      	add	r3, pc, #172	; (adr r3, 80064d8 <scalbn+0xe0>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	e03a      	b.n	80064a6 <scalbn+0xae>
 8006430:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006434:	428a      	cmp	r2, r1
 8006436:	d10c      	bne.n	8006452 <scalbn+0x5a>
 8006438:	ee10 2a10 	vmov	r2, s0
 800643c:	4620      	mov	r0, r4
 800643e:	4629      	mov	r1, r5
 8006440:	f7f9 ff2c 	bl	800029c <__adddf3>
 8006444:	4604      	mov	r4, r0
 8006446:	460d      	mov	r5, r1
 8006448:	e019      	b.n	800647e <scalbn+0x86>
 800644a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800644e:	460b      	mov	r3, r1
 8006450:	3a36      	subs	r2, #54	; 0x36
 8006452:	4432      	add	r2, r6
 8006454:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006458:	428a      	cmp	r2, r1
 800645a:	dd08      	ble.n	800646e <scalbn+0x76>
 800645c:	2d00      	cmp	r5, #0
 800645e:	a120      	add	r1, pc, #128	; (adr r1, 80064e0 <scalbn+0xe8>)
 8006460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006464:	da1c      	bge.n	80064a0 <scalbn+0xa8>
 8006466:	a120      	add	r1, pc, #128	; (adr r1, 80064e8 <scalbn+0xf0>)
 8006468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800646c:	e018      	b.n	80064a0 <scalbn+0xa8>
 800646e:	2a00      	cmp	r2, #0
 8006470:	dd08      	ble.n	8006484 <scalbn+0x8c>
 8006472:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800647a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800647e:	ec45 4b10 	vmov	d0, r4, r5
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006488:	da19      	bge.n	80064be <scalbn+0xc6>
 800648a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800648e:	429e      	cmp	r6, r3
 8006490:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006494:	dd0a      	ble.n	80064ac <scalbn+0xb4>
 8006496:	a112      	add	r1, pc, #72	; (adr r1, 80064e0 <scalbn+0xe8>)
 8006498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e2      	bne.n	8006466 <scalbn+0x6e>
 80064a0:	a30f      	add	r3, pc, #60	; (adr r3, 80064e0 <scalbn+0xe8>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7fa f8af 	bl	8000608 <__aeabi_dmul>
 80064aa:	e7cb      	b.n	8006444 <scalbn+0x4c>
 80064ac:	a10a      	add	r1, pc, #40	; (adr r1, 80064d8 <scalbn+0xe0>)
 80064ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0b8      	beq.n	8006428 <scalbn+0x30>
 80064b6:	a10e      	add	r1, pc, #56	; (adr r1, 80064f0 <scalbn+0xf8>)
 80064b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064bc:	e7b4      	b.n	8006428 <scalbn+0x30>
 80064be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064c2:	3236      	adds	r2, #54	; 0x36
 80064c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80064cc:	4620      	mov	r0, r4
 80064ce:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <scalbn+0x108>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	e7e8      	b.n	80064a6 <scalbn+0xae>
 80064d4:	f3af 8000 	nop.w
 80064d8:	c2f8f359 	.word	0xc2f8f359
 80064dc:	01a56e1f 	.word	0x01a56e1f
 80064e0:	8800759c 	.word	0x8800759c
 80064e4:	7e37e43c 	.word	0x7e37e43c
 80064e8:	8800759c 	.word	0x8800759c
 80064ec:	fe37e43c 	.word	0xfe37e43c
 80064f0:	c2f8f359 	.word	0xc2f8f359
 80064f4:	81a56e1f 	.word	0x81a56e1f
 80064f8:	43500000 	.word	0x43500000
 80064fc:	ffff3cb0 	.word	0xffff3cb0
 8006500:	3c900000 	.word	0x3c900000

08006504 <_init>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr

08006510 <_fini>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr
